// Copyright 2019 Prysmatic Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package ethereum.eth.v1alpha1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option csharp_namespace = "Ethereum.Eth.v1alpha1";
option go_package = "github.com/prysmaticlabs/ethereumapis/eth/v1alpha1;eth";
option java_multiple_files = true;
option java_outer_classname = "NodeProto";
option java_package = "org.ethereum.eth.v1alpha1";
option php_namespace = "Ethereum\\Eth\\v1alpha1";

// Node service API
// 
// Node service provides general information about the node itself, the services
// it supports, chain information and node version.
service Node {
    // Retrieve information about the node.
	rpc GetNodeInfo(google.protobuf.Empty) returns (NodeInfo) {
        option (google.api.http) = {
            get: "/eth/v1alpha1/node/info"
        };
    }

    // Retrieve the list of services implemented and enabled by this node. 
    // 
    // Any service not present in this list may return UNIMPLEMENTED or 
    // PERMISSION_DENIED. The server may also support fetching services by grpc 
    // reflection. 
    rpc ListImplementedServices(google.protobuf.Empty) returns (ImplementedServices) {
        option (google.api.http) = {
            get: "/eth/v1alpha1/node/services"
        };
    }
}

message NodeInfo {
    // Node identification [1001-2000]
    // A unique identifier for the node, derived from the node's network key.
    string node_id = 1001;
    // The version of the currently-running node software.
    string version = 1002;

    // Network [2001-3000]
    // The address(es) where the node is listening for incoming libp2p connections.
    repeated string addresses = 2001;
    // Information about nodes to which this peer is connected.
    repeated Peer peers = 2002;

    // Node state [3001-4000]
    // State of the node's interaction with its peers.
    SyncState sync_state = 3001;
    // The current epoch as far as the node is concerned; this is dependent on its current view of the chain.
    uint64 current_epoch = 3002;
    // The current slot as far as the node is concerned; this is dependent on its current view of the chain.
    uint64 current_slot = 3003;
    // The current block root as far as the node is concerned; this is dependent on its current view of the chain.
    uint64 current_block_root = 3004;
    // The finalized epoch as far as the node is concerned; this is dependent on its current view of the chain.
    uint64 finalized_epoch = 3005;
    // The finalized slot as far as the node is concerned; this is dependent on its current view of the chain.
    uint64 finalized_slot = 3006;
    // The finalized block root as far as the node is concerned; this is dependent on its current view of the chain.
    uint64 finalized_block_root = 3007;
    // The justified epoch as far as the node is concerned; this is dependent on its current view of the chain.
    uint64 justified_epoch = 3008;
    // The justified slot as far as the node is concerned; this is dependent on its current view of the chain.
    uint64 justified_slot = 3009;
    // The justified block root as far as the node is concerned; this is dependent on its current view of the chain.
    uint64 justified_block_root = 3010;
    // The previous justified epoch as far as the node is concerned; this is dependent on its current view of the chain.
    uint64 previous_justified_epoch = 3011;
    // The previous justified slot as far as the node is concerned; this is dependent on its current view of the chain.
    uint64 previous_justified_slot = 3012;
    // The previous justified block root as far as the node is concerned; this is dependent on its current view of the chain.
    uint64 previous_justified_block_root = 3013;
}

enum SyncState {
  // UNDEFINED means no status is available.
  SYNC_UNKNOWN = 0;
  // INACTIVE means the node is not currently syncing with its peers.
  SYNC_INACTIVE = 1;
  // CATCHUP means the node is in catchup mode; skipping full verification of information from peers in return for processing speed.
  SYNC_CATCHUP = 2;
  // FULL means the node is actively syncing with its peers, carrying out full verification of information received.
  SYNC_FULL = 3;
}

// Peer provides details of a peer on the network.
message Peer {
    // The Ethereum Name Record (ENR) of the peer.
    string enr = 1;
    // The libp2p listen address of the peer, as a full multiaddr, for example:
    // /ip4/37.221.192.134/tcp/13000/p2p/16Uiu2HAm8maLMjag1TAUM52zPfmLbVMGFdwUAWgoHu1HDQLR6e17
    string address = 2;
    // The direction of the connection (inbound/outbound).
    PeerDirection direction = 3;
}

// PeerDirection states the direction of the connection to a peer.
enum PeerDirection {
  UNKNOWN = 0;
  INBOUND = 1;
  OUTBOUND = 2;
}

message ImplementedServices {
    repeated string services = 1;
}
