{
  "swagger": "2.0",
  "info": {
    "title": "eth/v1alpha1/beacon_chain.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "BeaconChain"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/eth/v1alpha1/beacon/attestations": {
      "get": {
        "summary": "Retrieve attestations by block root, slot, or epoch.",
        "description": "The server may return an empty list when no attestations match the given\nfilter criteria. This RPC should not return NOT_FOUND. Only one filter\ncriteria should be used. This endpoint allows for retrieval of genesis\ninformation via a boolean query filter.",
        "operationId": "BeaconChain_ListAttestations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListAttestationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "epoch",
            "description": "Filter attestations by epoch processed.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "genesisEpoch",
            "description": "Optional criteria to retrieve attestations from 0 epoch.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pageSize",
            "description": "The maximum number of Attestations to return in the response.\nThis field is optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "A pagination token returned from a previous call to `ListAttestations`\nthat indicates where this listing should continue from.\nThis field is optional.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BeaconChain"
        ]
      }
    },
    "/eth/v1alpha1/beacon/attestations/indexed": {
      "get": {
        "summary": "Retrieve indexed attestations by block root, slot, or epoch.",
        "description": "The server may return an empty list when no indexed attestations match the given\nfilter criteria. This RPC should not return NOT_FOUND. Only one filter\ncriteria should be used. This endpoint allows for retrieval of genesis\ninformation via a boolean query filter.",
        "operationId": "BeaconChain_ListIndexedAttestations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListIndexedAttestationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "epoch",
            "description": "Retrieve attestations by epoch processed.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "genesisEpoch",
            "description": "Optional criteria to retrieve genesis epoch attestations.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pageSize",
            "description": "The maximum number of IndexedAttestations to return in the response.\nThis field is optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "A pagination token returned from a previous call to `ListIndexedAttestations`\nthat indicates where this listing should continue from.\nThis field is optional.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BeaconChain"
        ]
      }
    },
    "/eth/v1alpha1/beacon/attestations/indexed/stream": {
      "get": {
        "summary": "Server-side stream of indexed attestations as they are received by\nthe beacon chain node.",
        "operationId": "BeaconChain_StreamIndexedAttestations",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1alpha1IndexedAttestation"
                },
                "error": {
                  "$ref": "#/definitions/googlerpcStatus"
                }
              },
              "title": "Stream result of v1alpha1IndexedAttestation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "BeaconChain"
        ]
      }
    },
    "/eth/v1alpha1/beacon/attestations/pool": {
      "get": {
        "summary": "Retrieve attestations from pool.",
        "description": "The server returns a list of attestations that have been seen but not\nyet processed. Pool attestations eventually expire as the slot\nadvances, so an attestation missing from this request does not imply\nthat it was included in a block. The attestation may have expired.\nRefer to the ethereum 2.0 specification for more details on how\nattestations are processed and when they are no longer valid.\nhttps://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_beacon-chain.md#attestations",
        "operationId": "BeaconChain_AttestationPool",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1AttestationPoolResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "The maximum number of objects to return in the response.\nThis field is optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "A pagination token returned from a previous call\nthat indicates where this listing should continue from.\nThis field is optional.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BeaconChain"
        ]
      }
    },
    "/eth/v1alpha1/beacon/attestations/stream": {
      "get": {
        "summary": "Server-side stream of attestations as they are received by\nthe beacon chain node.",
        "operationId": "BeaconChain_StreamAttestations",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1alpha1Attestation"
                },
                "error": {
                  "$ref": "#/definitions/googlerpcStatus"
                }
              },
              "title": "Stream result of v1alpha1Attestation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "BeaconChain"
        ]
      }
    },
    "/eth/v1alpha1/beacon/blocks": {
      "get": {
        "summary": "Retrieve blocks by root, slot, or epoch.",
        "description": "The server may return multiple blocks in the case that a slot or epoch is\nprovided as the filter criteria. The server may return an empty list when\nno blocks in their database match the filter criteria. This RPC should\nnot return NOT_FOUND. Only one filter criteria should be used. This endpoint\nallows for retrieval of genesis information via a boolean query filter.",
        "operationId": "BeaconChain_ListBlocks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ListBlocksResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "root",
            "description": "Block root filter to return a single block.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "slot",
            "description": "Slot to lookup a block. If the slot is not yet finalized, this\ncriteria may yield multiple valid blocks if the node has seen blocks\nfrom another fork.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "epoch",
            "description": "The epoch number for which to retrieve blocks. If specified, this\nwill return all blocks found within the span of the specified epoch.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "genesis",
            "description": "Optional criteria to retrieve genesis block.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pageSize",
            "description": "The maximum number of Blocks to return in the response.\nThis field is optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "A pagination token returned from a previous call to `ListBlocks`\nthat indicates where this listing should continue from.\nThis field is optional.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BeaconChain"
        ]
      }
    },
    "/eth/v1alpha1/beacon/blocks/stream": {
      "get": {
        "summary": "Server-side stream of all signed blocks as they are received by\nthe beacon chain node.",
        "operationId": "BeaconChain_StreamBlocks",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1alpha1SignedBeaconBlock"
                },
                "error": {
                  "$ref": "#/definitions/googlerpcStatus"
                }
              },
              "title": "Stream result of v1alpha1SignedBeaconBlock"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "verifiedOnly",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "BeaconChain"
        ]
      }
    },
    "/eth/v1alpha1/beacon/chainhead": {
      "get": {
        "summary": "Retrieve information about the head of the beacon chain from the view of\nthe beacon chain node.",
        "description": "This includes the head block slot and root as well as information about\nthe most recent finalized and justified slots.",
        "operationId": "BeaconChain_GetChainHead",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ChainHead"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "BeaconChain"
        ]
      }
    },
    "/eth/v1alpha1/beacon/chainhead/stream": {
      "get": {
        "summary": "Server-side stream of information about the head of the beacon chain\nfrom the view of the beacon chain node.",
        "description": "This includes the head block slot and root as well as information about\nthe most recent finalized and justified slots.",
        "operationId": "BeaconChain_StreamChainHead",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1alpha1ChainHead"
                },
                "error": {
                  "$ref": "#/definitions/googlerpcStatus"
                }
              },
              "title": "Stream result of v1alpha1ChainHead"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "BeaconChain"
        ]
      }
    },
    "/eth/v1alpha1/beacon/committees": {
      "get": {
        "summary": "Retrieve the beacon chain committees for a given epoch.",
        "description": "If no filter criteria is specified, the response returns\nall beacon committees for the current epoch. The results are paginated by default.\nThis endpoint allows for retrieval of genesis information via a boolean query filter.",
        "operationId": "BeaconChain_ListBeaconCommittees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1BeaconCommittees"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "epoch",
            "description": "Optional criteria to retrieve data at a specific epoch.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "genesis",
            "description": "Optional criteria to retrieve genesis data.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "BeaconChain"
        ]
      }
    },
    "/eth/v1alpha1/beacon/config": {
      "get": {
        "summary": "Retrieve the current configuration parameters of the beacon chain.",
        "operationId": "BeaconChain_GetBeaconConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1BeaconConfig"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "BeaconChain"
        ]
      }
    },
    "/eth/v1alpha1/beacon/individual_votes": {
      "get": {
        "summary": "Returns a list of validators individual vote status of a given epoch.",
        "operationId": "BeaconChain_GetIndividualVotes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1IndividualVotesRespond"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "epoch",
            "description": "Epoch of the request.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "publicKeys",
            "description": "Validator 48 byte BLS public keys to filter validators for the given epoch.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "byte"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "indices",
            "description": "Validator indices to filter validators for the given epoch.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uint64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "BeaconChain"
        ]
      }
    },
    "/eth/v1alpha1/beacon/slashings/attester/submit": {
      "get": {
        "summary": "Submit an attester slashing object to the beacon node.",
        "operationId": "BeaconChain_SubmitAttesterSlashing",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1SubmitSlashingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "attestation1.attestingIndices",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uint64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "attestation1.data.slot",
            "description": "Slot of the attestation attesting for.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "attestation1.data.committeeIndex",
            "description": "The committee index that submitted this attestation.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "attestation1.data.beaconBlockRoot",
            "description": "32 byte root of the LMD GHOST block vote.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "attestation1.data.source.epoch",
            "description": "Epoch the checkpoint references.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "attestation1.data.source.root",
            "description": "Block root of the checkpoint references.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "attestation1.data.target.epoch",
            "description": "Epoch the checkpoint references.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "attestation1.data.target.root",
            "description": "Block root of the checkpoint references.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "attestation1.signature",
            "description": "96 bytes aggregate signature.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "attestation2.attestingIndices",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uint64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "attestation2.data.slot",
            "description": "Slot of the attestation attesting for.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "attestation2.data.committeeIndex",
            "description": "The committee index that submitted this attestation.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "attestation2.data.beaconBlockRoot",
            "description": "32 byte root of the LMD GHOST block vote.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "attestation2.data.source.epoch",
            "description": "Epoch the checkpoint references.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "attestation2.data.source.root",
            "description": "Block root of the checkpoint references.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "attestation2.data.target.epoch",
            "description": "Epoch the checkpoint references.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "attestation2.data.target.root",
            "description": "Block root of the checkpoint references.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "attestation2.signature",
            "description": "96 bytes aggregate signature.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "BeaconChain"
        ]
      }
    },
    "/eth/v1alpha1/beacon/slashings/proposer/submit": {
      "get": {
        "summary": "Submit a proposer slashing object to the beacon node.",
        "operationId": "BeaconChain_SubmitProposerSlashing",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1SubmitSlashingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "header1.header.slot",
            "description": "Beacon chain slot that this block represents.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "header1.header.proposerIndex",
            "description": "Validator index of the validator that proposed the block header.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "header1.header.parentRoot",
            "description": "32 byte merkle tree root of the parent ssz encoded block.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "header1.header.stateRoot",
            "description": "32 byte merkle tree root of the resulting ssz encoded state after processing this block.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "header1.header.bodyRoot",
            "description": "32 byte merkle tree root of the ssz encoded block body.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "header1.signature",
            "description": "96 byte BLS signature from the validator that produced this block header.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "header2.header.slot",
            "description": "Beacon chain slot that this block represents.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "header2.header.proposerIndex",
            "description": "Validator index of the validator that proposed the block header.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "header2.header.parentRoot",
            "description": "32 byte merkle tree root of the parent ssz encoded block.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "header2.header.stateRoot",
            "description": "32 byte merkle tree root of the resulting ssz encoded state after processing this block.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "header2.header.bodyRoot",
            "description": "32 byte merkle tree root of the ssz encoded block body.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "header2.signature",
            "description": "96 byte BLS signature from the validator that produced this block header.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "BeaconChain"
        ]
      }
    },
    "/eth/v1alpha1/beacon/validators/info/stream": {
      "get": {
        "summary": "Server-side stream of validator information at each epoch.",
        "operationId": "BeaconChain_StreamValidatorsInfo",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1alpha1ValidatorInfo"
                },
                "error": {
                  "$ref": "#/definitions/googlerpcStatus"
                }
              },
              "title": "Stream result of v1alpha1ValidatorInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "action",
            "description": "Action (add/remove/set).\n\n - ADD_VALIDATOR_KEYS: ADD_VALIDATOR_KEYS adds to the existing keys.\n - REMOVE_VALIDATOR_KEYS: REMOVE_VALIDATOR_KEYS removes from the existing keys.\n - SET_VALIDATOR_KEYS: SET_VALIDATOR_KEYS overwrites the existing keys.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ADD_VALIDATOR_KEYS",
              "REMOVE_VALIDATOR_KEYS",
              "SET_VALIDATOR_KEYS"
            ],
            "default": "ADD_VALIDATOR_KEYS"
          },
          {
            "name": "publicKeys",
            "description": "48 byte BLS public keys of validators on which the operation occurs.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "byte"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "BeaconChain"
        ]
      }
    },
    "/eth/v1alpha1/beacon/weak_subjectivity_checkpoint": {
      "get": {
        "summary": "Retrieve information about the weak subjectivity of the beacon chain from the view of\nthe beacon chain node.",
        "description": "This includes the weak subjectivity block root, state root and epoch number.",
        "operationId": "BeaconChain_GetWeakSubjectivityCheckpoint",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1WeakSubjectivityCheckpoint"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "BeaconChain"
        ]
      }
    },
    "/eth/v1alpha1/validator": {
      "get": {
        "summary": "Retrieve information about a specific validator in the registry.",
        "description": "This request may query by validator index or public key.",
        "operationId": "BeaconChain_GetValidator",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1Validator"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "index",
            "description": "Validator index in the registry.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "publicKey",
            "description": "48 byte validator public key.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "BeaconChain"
        ]
      }
    },
    "/eth/v1alpha1/validators": {
      "get": {
        "summary": "Retrieve the current validator registry.",
        "description": "The request may include an optional historical epoch to retrieve a\nspecific validator set in time. This endpoint allows for retrieval of genesis\ninformation via a boolean query filter.",
        "operationId": "BeaconChain_ListValidators",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1Validators"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "epoch",
            "description": "Optional criteria to retrieve validators at a specific epoch.\nOmitting this field or setting it to zero will retrieve a response\nwith the current active validator set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "genesis",
            "description": "Optional criteria to retrieve the genesis set of validators.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "active",
            "description": "Specify whether or not you want to retrieve only active validators.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pageSize",
            "description": "The maximum number of Validators to return in the response.\nThis field is optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "A pagination token returned from a previous call to `GetValidators`\nthat indicates where this listing should continue from.\nThis field is optional.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicKeys",
            "description": "Specify which validators you would like to retrieve by their public keys.\nThis field is optional.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "byte"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "indices",
            "description": "Specify which validators you would like to retrieve by their indices.\nThis field is optional.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uint64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "BeaconChain"
        ]
      }
    },
    "/eth/v1alpha1/validators/activesetchanges": {
      "get": {
        "summary": "Retrieve the active set changes for a given epoch.",
        "description": "This data includes any activations, voluntary exits, and involuntary\nejections. This endpoint allows for retrieval of genesis\ninformation via a boolean query filter.",
        "operationId": "BeaconChain_GetValidatorActiveSetChanges",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ActiveSetChanges"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "epoch",
            "description": "Optional criteria to retrieve balances at a specific epoch.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "genesis",
            "description": "Optional criteria to retrieve the genesis list of balances.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "BeaconChain"
        ]
      }
    },
    "/eth/v1alpha1/validators/assignments": {
      "get": {
        "summary": "Retrieve the validator assignments for a given epoch.",
        "description": "This request may specify optional validator indices or public keys to\nfilter validator assignments. This endpoint allows for retrieval of genesis\ninformation via a boolean query filter.",
        "operationId": "BeaconChain_ListValidatorAssignments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ValidatorAssignments"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "epoch",
            "description": "Epoch to validator assignments for.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "genesis",
            "description": "Whether or not to query for the genesis information.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "publicKeys",
            "description": "48 byte validator public keys to filter assignments for the given epoch.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "byte"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "indices",
            "description": "Validator indicies to filter assignments for the given epoch.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uint64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pageSize",
            "description": "The maximum number of ValidatorAssignments to return in the response.\nThis field is optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "A pagination token returned from a previous call to `ListValidatorAssignments`\nthat indicates where this listing should continue from.\nThis field is optional.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BeaconChain"
        ]
      }
    },
    "/eth/v1alpha1/validators/balances": {
      "get": {
        "summary": "Retrieve validator balances for a given set of public keys at a specific\nepoch in time. This endpoint allows for retrieval of genesis information\nvia a boolean query filter.",
        "operationId": "BeaconChain_ListValidatorBalances",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ValidatorBalances"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "epoch",
            "description": "Optional criteria to retrieve balances at a specific epoch.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "genesis",
            "description": "Optional criteria to retrieve the genesis list of balances.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "publicKeys",
            "description": "Validator 48 byte BLS public keys to filter validators for the given\nepoch.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "byte"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "indices",
            "description": "Validator indices to filter validators for the given epoch.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uint64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pageSize",
            "description": "The maximum number of Validators to return in the response.\nThis field is optional.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "A pagination token returned from a previous call to `GetValidators`\nthat indicates where this listing should continue from.\nThis field is optional.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BeaconChain"
        ]
      }
    },
    "/eth/v1alpha1/validators/participation": {
      "get": {
        "summary": "Retrieve the validator participation information for a given epoch.",
        "description": "This method returns information about the global participation of\nvalidator attestations. This endpoint allows for retrieval of genesis\ninformation via a boolean query filter.",
        "operationId": "BeaconChain_GetValidatorParticipation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ValidatorParticipationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "epoch",
            "description": "Epoch to request participation information.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "genesis",
            "description": "Whether or not to query for the genesis information.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "BeaconChain"
        ]
      }
    },
    "/eth/v1alpha1/validators/performance": {
      "get": {
        "summary": "GetValidatorPerformance reports a validator's latest balance along with other important\nmetrics on rewards and penalties throughout its lifecycle in the beacon chain.\nThe request takes in a list of validator public keys and returns a performance report\nfor all of them respectively.",
        "operationId": "BeaconChain_GetValidatorPerformance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ValidatorPerformanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "publicKeys",
            "description": "A list of 48 byte validator public keys.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "byte"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "indices",
            "description": "A list of validator indices to retrieve performance by their indices.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uint64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "BeaconChain"
        ]
      }
    },
    "/eth/v1alpha1/validators/queue": {
      "get": {
        "summary": "Retrieve the current validator queue information.",
        "operationId": "BeaconChain_GetValidatorQueue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1ValidatorQueue"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "BeaconChain"
        ]
      }
    }
  },
  "definitions": {
    "BeaconCommitteesCommitteeItem": {
      "type": "object",
      "properties": {
        "validatorIndices": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          },
          "description": "A committee is a list of validator indices participating in consensus at a slot."
        }
      }
    },
    "BeaconCommitteesCommitteesList": {
      "type": "object",
      "properties": {
        "committees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BeaconCommitteesCommitteeItem"
          },
          "description": "A list of committees."
        }
      }
    },
    "DepositData": {
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "string",
          "format": "byte",
          "description": "48 byte BLS public key of the validator."
        },
        "withdrawalCredentials": {
          "type": "string",
          "format": "byte",
          "description": "A 32 byte hash of the withdrawal address public key."
        },
        "amount": {
          "type": "string",
          "format": "uint64",
          "description": "Deposit amount in gwei."
        },
        "signature": {
          "type": "string",
          "format": "byte",
          "description": "96 byte signature from the validators public key."
        }
      },
      "description": "DepositData that is encoded into a deposit signature."
    },
    "IndividualVotesRespondIndividualVote": {
      "type": "object",
      "properties": {
        "epoch": {
          "type": "string",
          "format": "uint64",
          "description": "The epoch of the vote status request."
        },
        "publicKey": {
          "type": "string",
          "format": "byte",
          "description": "The public key of the vote status request."
        },
        "validatorIndex": {
          "type": "string",
          "format": "uint64",
          "description": "The validator index of the request."
        },
        "isSlashed": {
          "type": "boolean",
          "description": "Has the validator been slashed."
        },
        "isWithdrawableInCurrentEpoch": {
          "type": "boolean",
          "description": "Is the validator withdrawable."
        },
        "isActiveInCurrentEpoch": {
          "type": "boolean",
          "description": "Is the validator active in current epoch."
        },
        "isActiveInPreviousEpoch": {
          "type": "boolean",
          "description": "Was the validator active in previous epoch."
        },
        "isCurrentEpochAttester": {
          "type": "boolean",
          "description": "Did validator attest for current epoch."
        },
        "isCurrentEpochTargetAttester": {
          "type": "boolean",
          "description": "Did validator attest target for current epoch."
        },
        "isPreviousEpochAttester": {
          "type": "boolean",
          "description": "Did validator attest for previous epoch."
        },
        "isPreviousEpochTargetAttester": {
          "type": "boolean",
          "description": "Did validator attest target for previous epoch."
        },
        "isPreviousEpochHeadAttester": {
          "type": "boolean",
          "description": "Did validator attest head for previous epoch."
        },
        "currentEpochEffectiveBalanceGwei": {
          "type": "string",
          "format": "uint64",
          "description": "The current effective balance of the validator."
        },
        "inclusionSlot": {
          "type": "string",
          "format": "uint64",
          "description": "The slots of when the validator's attestation got included in the block."
        },
        "inclusionDistance": {
          "type": "string",
          "format": "uint64",
          "description": "How many slots have passed until the validator's attestation got included in the block."
        }
      }
    },
    "ValidatorAssignmentsCommitteeAssignment": {
      "type": "object",
      "properties": {
        "beaconCommittees": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          },
          "description": "Beacon committees are responsible for crosslinking committee data back to the beacon chain,\nthey also attest and produce beacon chain blocks. This is a list of validator indices that\nare in the same committee as requested validator, everyone in the committee is assigned to the\nsame slot and same committee."
        },
        "committeeIndex": {
          "type": "string",
          "format": "uint64",
          "description": "Committee index represents the committee of validator that's in."
        },
        "attesterSlot": {
          "type": "string",
          "format": "uint64",
          "description": "Beacon chain slot in which the validator must perform its assigned\nduty as an attester."
        },
        "proposerSlots": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          },
          "description": "Beacon chain slots in which the validator must perform its assigned\nduty as a proposer."
        },
        "publicKey": {
          "type": "string",
          "format": "byte",
          "description": "48 byte BLS public key."
        },
        "validatorIndex": {
          "type": "string",
          "format": "uint64",
          "description": "Validator index in the beacon state."
        }
      }
    },
    "ValidatorBalancesBalance": {
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "string",
          "format": "byte",
          "description": "Validator's 48 byte BLS public key."
        },
        "index": {
          "type": "string",
          "format": "uint64",
          "description": "Validator's index in the validator set."
        },
        "balance": {
          "type": "string",
          "format": "uint64",
          "description": "Validator's balance in gwei."
        },
        "status": {
          "type": "string",
          "description": "Validator's status, UNKNOWN if not found."
        }
      }
    },
    "ValidatorsValidatorContainer": {
      "type": "object",
      "properties": {
        "index": {
          "type": "string",
          "format": "uint64"
        },
        "validator": {
          "$ref": "#/definitions/v1alpha1Validator"
        }
      }
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1alpha1ActiveSetChanges": {
      "type": "object",
      "properties": {
        "epoch": {
          "type": "string",
          "format": "uint64",
          "description": "Epoch which the state was considered to determine the active validator\nset."
        },
        "activatedPublicKeys": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "48 byte validator public keys that have been activated in the given epoch."
        },
        "activatedIndices": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          },
          "description": "Indices of validators activated in the given epoch."
        },
        "exitedPublicKeys": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "48 byte validator public keys that have been voluntarily exited in the given epoch."
        },
        "exitedIndices": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          },
          "description": "Indices of validators exited in the given epoch."
        },
        "slashedPublicKeys": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "48 byte validator public keys that have been slashed in the given epoch."
        },
        "slashedIndices": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          },
          "description": "Indices of validators slashed in the given epoch."
        },
        "ejectedPublicKeys": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "48 byte validator public keys that have been involuntarily ejected in this epoch."
        },
        "ejectedIndices": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          },
          "description": "Indices of validators ejected in the given epoch."
        }
      }
    },
    "v1alpha1Attestation": {
      "type": "object",
      "properties": {
        "aggregationBits": {
          "type": "string",
          "format": "byte",
          "description": "A bitfield representation of validator indices that have voted exactly\nthe same vote and have been aggregated into this attestation."
        },
        "data": {
          "$ref": "#/definitions/v1alpha1AttestationData"
        },
        "signature": {
          "type": "string",
          "format": "byte",
          "description": "96 byte BLS aggregate signature."
        }
      }
    },
    "v1alpha1AttestationData": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "uint64",
          "description": "Slot of the attestation attesting for."
        },
        "committeeIndex": {
          "type": "string",
          "format": "uint64",
          "description": "The committee index that submitted this attestation."
        },
        "beaconBlockRoot": {
          "type": "string",
          "format": "byte",
          "description": "32 byte root of the LMD GHOST block vote."
        },
        "source": {
          "$ref": "#/definitions/v1alpha1Checkpoint",
          "title": "The most recent justified checkpoint in the beacon state"
        },
        "target": {
          "$ref": "#/definitions/v1alpha1Checkpoint",
          "title": "The checkpoint attempting to be justified for the current epoch and its epoch boundary block"
        }
      }
    },
    "v1alpha1AttestationPoolResponse": {
      "type": "object",
      "properties": {
        "attestations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Attestation"
          },
          "description": "List of attestations currently in the pool of the beacon chain."
        },
        "nextPageToken": {
          "type": "string",
          "description": "A pagination token returned from a previous call\nthat indicates where this listing should continue from.\nThis field is optional."
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "description": "Total count of objects matching the request filter."
        }
      }
    },
    "v1alpha1AttesterSlashing": {
      "type": "object",
      "properties": {
        "attestation1": {
          "$ref": "#/definitions/v1alpha1IndexedAttestation",
          "description": "First conflicting attestation."
        },
        "attestation2": {
          "$ref": "#/definitions/v1alpha1IndexedAttestation",
          "description": "Second conflicting attestation."
        }
      },
      "description": "Attestor slashings are proofs that a slashable offense has been committed by\nattestating to two conflicting pieces of information by the same validator."
    },
    "v1alpha1BeaconBlock": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "uint64",
          "description": "Beacon chain slot that this block represents."
        },
        "proposerIndex": {
          "type": "string",
          "format": "uint64",
          "description": "Validator index of the validator that proposed the block header."
        },
        "parentRoot": {
          "type": "string",
          "format": "byte",
          "description": "32 byte root of the parent block."
        },
        "stateRoot": {
          "type": "string",
          "format": "byte",
          "description": "32 byte root of the resulting state after processing this block."
        },
        "body": {
          "$ref": "#/definitions/v1alpha1BeaconBlockBody",
          "description": "The block body itself."
        }
      },
      "description": "The Ethereum 2.0 beacon block. The message does not contain a validator signature."
    },
    "v1alpha1BeaconBlockBody": {
      "type": "object",
      "properties": {
        "randaoReveal": {
          "type": "string",
          "format": "byte",
          "description": "The validators RANDAO reveal 96 byte value."
        },
        "eth1Data": {
          "$ref": "#/definitions/v1alpha1Eth1Data",
          "description": "A reference to the Ethereum 1.x chain."
        },
        "graffiti": {
          "type": "string",
          "format": "byte",
          "description": "32 byte field of arbitrary data. This field may contain any data and\nis not used for anything other than a fun message."
        },
        "proposerSlashings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ProposerSlashing"
          },
          "description": "At most MAX_PROPOSER_SLASHINGS."
        },
        "attesterSlashings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1AttesterSlashing"
          },
          "description": "At most MAX_ATTESTER_SLASHINGS."
        },
        "attestations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Attestation"
          },
          "description": "At most MAX_ATTESTATIONS."
        },
        "deposits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Deposit"
          },
          "description": "At most MAX_DEPOSITS."
        },
        "voluntaryExits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1SignedVoluntaryExit"
          },
          "description": "At most MAX_VOLUNTARY_EXITS."
        }
      },
      "description": "The block body of an Ethereum 2.0 beacon block."
    },
    "v1alpha1BeaconBlockContainer": {
      "type": "object",
      "properties": {
        "block": {
          "$ref": "#/definitions/v1alpha1SignedBeaconBlock",
          "description": "The contained Ethereum beacon block."
        },
        "blockRoot": {
          "type": "string",
          "format": "byte",
          "description": "32 byte merkle tree root of contained beacon block."
        },
        "canonical": {
          "type": "boolean",
          "description": "Boolean indicating whether the block is canonical."
        }
      },
      "description": "A container that contains both the beacon block\nand its corresponding root."
    },
    "v1alpha1BeaconBlockHeader": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "uint64",
          "description": "Beacon chain slot that this block represents."
        },
        "proposerIndex": {
          "type": "string",
          "format": "uint64",
          "description": "Validator index of the validator that proposed the block header."
        },
        "parentRoot": {
          "type": "string",
          "format": "byte",
          "description": "32 byte merkle tree root of the parent ssz encoded block."
        },
        "stateRoot": {
          "type": "string",
          "format": "byte",
          "description": "32 byte merkle tree root of the resulting ssz encoded state after processing this block."
        },
        "bodyRoot": {
          "type": "string",
          "format": "byte",
          "description": "32 byte merkle tree root of the ssz encoded block body."
        }
      },
      "description": "A beacon block header is essentially a beacon block with only a reference to\nthe beacon body as a 32 byte merkle tree root. This type of message is more\nlightweight than a full beacon block. The message does not contain\na validator signature."
    },
    "v1alpha1BeaconCommittees": {
      "type": "object",
      "properties": {
        "epoch": {
          "type": "string",
          "format": "uint64",
          "description": "The epoch for which the committees in the response belong to."
        },
        "committees": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/BeaconCommitteesCommitteesList"
          },
          "description": "A map of validator committees by slot."
        },
        "activeValidatorCount": {
          "type": "string",
          "format": "uint64",
          "description": "The number of active validators at the given epoch."
        }
      }
    },
    "v1alpha1BeaconConfig": {
      "type": "object",
      "properties": {
        "config": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "Information about the configuration parameters of the beacon node, such\nas the slots per epoch, slots per eth1 voting period, and more."
    },
    "v1alpha1ChainHead": {
      "type": "object",
      "properties": {
        "headSlot": {
          "type": "string",
          "format": "uint64",
          "description": "Slot of the head block."
        },
        "headEpoch": {
          "type": "string",
          "format": "uint64",
          "description": "Epoch of the head block."
        },
        "headBlockRoot": {
          "type": "string",
          "format": "byte",
          "description": "32 byte merkle tree root of the canonical head block in the beacon node."
        },
        "finalizedSlot": {
          "type": "string",
          "format": "uint64",
          "description": "Most recent slot that contains the finalized block."
        },
        "finalizedEpoch": {
          "type": "string",
          "format": "uint64",
          "description": "Epoch of the finalized block."
        },
        "finalizedBlockRoot": {
          "type": "string",
          "format": "byte",
          "description": "Most recent 32 byte finalized block root."
        },
        "justifiedSlot": {
          "type": "string",
          "format": "uint64",
          "description": "Most recent slot that contains the justified block."
        },
        "justifiedEpoch": {
          "type": "string",
          "format": "uint64",
          "description": "Epoch of the justified block."
        },
        "justifiedBlockRoot": {
          "type": "string",
          "format": "byte",
          "description": "Most recent 32 byte justified block root."
        },
        "previousJustifiedSlot": {
          "type": "string",
          "format": "uint64",
          "description": "Most recent slot that contains the previous justified block."
        },
        "previousJustifiedEpoch": {
          "type": "string",
          "format": "uint64",
          "description": "Epoch of the previous justified block."
        },
        "previousJustifiedBlockRoot": {
          "type": "string",
          "format": "byte",
          "description": "Previous 32 byte justified block root."
        }
      },
      "description": "Information about the head of the beacon chain."
    },
    "v1alpha1Checkpoint": {
      "type": "object",
      "properties": {
        "epoch": {
          "type": "string",
          "format": "uint64",
          "description": "Epoch the checkpoint references."
        },
        "root": {
          "type": "string",
          "format": "byte",
          "description": "Block root of the checkpoint references."
        }
      }
    },
    "v1alpha1Deposit": {
      "type": "object",
      "properties": {
        "proof": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "32 byte roots in the deposit tree branch."
        },
        "data": {
          "$ref": "#/definitions/DepositData"
        }
      },
      "description": "Deposit into the Ethereum 2.0 from the Ethereum 1.x deposit contract."
    },
    "v1alpha1Eth1Data": {
      "type": "object",
      "properties": {
        "depositRoot": {
          "type": "string",
          "format": "byte",
          "description": "The 32 byte deposit tree root for the last deposit included in this\nblock."
        },
        "depositCount": {
          "type": "string",
          "format": "uint64",
          "description": "The total number of deposits included in the beacon chain since genesis\nincluding the deposits in this block."
        },
        "blockHash": {
          "type": "string",
          "format": "byte",
          "description": "The 32 byte block hash of the Ethereum 1.x block considered for deposit\ninclusion."
        }
      },
      "description": "Eth1Data represents references to the Ethereum 1.x deposit contract."
    },
    "v1alpha1IndexedAttestation": {
      "type": "object",
      "properties": {
        "attestingIndices": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          }
        },
        "data": {
          "$ref": "#/definitions/v1alpha1AttestationData"
        },
        "signature": {
          "type": "string",
          "format": "byte",
          "description": "96 bytes aggregate signature."
        }
      }
    },
    "v1alpha1IndividualVotesRespond": {
      "type": "object",
      "properties": {
        "individualVotes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IndividualVotesRespondIndividualVote"
          }
        }
      }
    },
    "v1alpha1ListAttestationsResponse": {
      "type": "object",
      "properties": {
        "attestations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Attestation"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "A pagination token returned from a previous call to `ListAttestations`\nthat indicates from where listing should continue.\nThis field is optional."
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "description": "Total count of Attestations matching the request filter."
        }
      }
    },
    "v1alpha1ListBlocksResponse": {
      "type": "object",
      "properties": {
        "blockContainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1BeaconBlockContainer"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "A pagination token returned from a previous call to `ListBlocks`\nthat indicates from where listing should continue.\nThis field is optional."
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "description": "Total count of Blocks matching the request filter."
        }
      }
    },
    "v1alpha1ListIndexedAttestationsResponse": {
      "type": "object",
      "properties": {
        "indexedAttestations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1IndexedAttestation"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "A pagination token returned from a previous call to `ListIndexedAttestations`\nthat indicates from where listing should continue.\nThis field is optional."
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "description": "Total count of Attestations matching the request filter."
        }
      }
    },
    "v1alpha1ProposerSlashing": {
      "type": "object",
      "properties": {
        "header1": {
          "$ref": "#/definitions/v1alpha1SignedBeaconBlockHeader",
          "description": "First conflicting signed block header."
        },
        "header2": {
          "$ref": "#/definitions/v1alpha1SignedBeaconBlockHeader",
          "description": "Second conflicting signed block header."
        }
      },
      "description": "Proposer slashings are proofs that a slashable offense has been committed by\nproposing two conflicting blocks from the same validator."
    },
    "v1alpha1SetAction": {
      "type": "string",
      "enum": [
        "ADD_VALIDATOR_KEYS",
        "REMOVE_VALIDATOR_KEYS",
        "SET_VALIDATOR_KEYS"
      ],
      "default": "ADD_VALIDATOR_KEYS",
      "description": "SetAction defines the type of action that should be applied to the keys in a validator change set.\n\n - ADD_VALIDATOR_KEYS: ADD_VALIDATOR_KEYS adds to the existing keys.\n - REMOVE_VALIDATOR_KEYS: REMOVE_VALIDATOR_KEYS removes from the existing keys.\n - SET_VALIDATOR_KEYS: SET_VALIDATOR_KEYS overwrites the existing keys."
    },
    "v1alpha1SignedBeaconBlock": {
      "type": "object",
      "properties": {
        "block": {
          "$ref": "#/definitions/v1alpha1BeaconBlock",
          "description": "The unsigned beacon block itself."
        },
        "signature": {
          "type": "string",
          "format": "byte",
          "description": "96 byte BLS signature from the validator that produced this block."
        }
      },
      "description": "The signed version of beacon block."
    },
    "v1alpha1SignedBeaconBlockHeader": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/v1alpha1BeaconBlockHeader",
          "description": "The unsigned beacon block header itself."
        },
        "signature": {
          "type": "string",
          "format": "byte",
          "description": "96 byte BLS signature from the validator that produced this block header."
        }
      }
    },
    "v1alpha1SignedVoluntaryExit": {
      "type": "object",
      "properties": {
        "exit": {
          "$ref": "#/definitions/v1alpha1VoluntaryExit",
          "description": "The unsigned voluntary exit itself."
        },
        "signature": {
          "type": "string",
          "format": "byte",
          "title": "Validator's 96 byte signature"
        }
      },
      "description": "The signed version of voluntary exit."
    },
    "v1alpha1SubmitSlashingResponse": {
      "type": "object",
      "properties": {
        "slashedIndices": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          },
          "description": "Indices of the validators to be slashed by the submitted\nproposer/attester slashing object."
        }
      }
    },
    "v1alpha1Validator": {
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "string",
          "format": "byte",
          "description": "48 byte BLS public key used for the validator's activities."
        },
        "withdrawalCredentials": {
          "type": "string",
          "format": "byte",
          "description": "32 byte hash of the withdrawal destination public key."
        },
        "effectiveBalance": {
          "type": "string",
          "format": "uint64",
          "description": "The validators current effective balance in gwei."
        },
        "slashed": {
          "type": "boolean",
          "description": "Whether or not the validator has been slashed."
        },
        "activationEligibilityEpoch": {
          "type": "string",
          "format": "uint64",
          "description": "Epoch when the validator became eligible for activation. This field may\nbe zero if the validator was present in the Ethereum 2.0 genesis. This\nfield is FAR_FUTURE_EPOCH if the validator has not been activated."
        },
        "activationEpoch": {
          "type": "string",
          "format": "uint64",
          "description": "Epoch when the validator was activated. This field may be zero if the\nvalidator was present in the Ethereum 2.0 genesis. This field is\nFAR_FUTURE_EPOCH if the validator has not been activated."
        },
        "exitEpoch": {
          "type": "string",
          "format": "uint64",
          "title": "Epoch when the validator was exited. This field is FAR_FUTURE_EPOCH if\nthe validator has not exited.\nFAR_FUTURE_EPOCH is a constant defined by the official Ethereum 2.0 specification:\nhttps://github.com/ethereum/eth2.0-specs/blob/v0.9.2/specs/core/0_beacon-chain.md#constants"
        },
        "withdrawableEpoch": {
          "type": "string",
          "format": "uint64",
          "title": "Epoch when the validator is eligible to withdraw their funds. This field\nis FAR_FUTURE_EPOCH if the validator has not exited.\nFAR_FUTURE_EPOCH is a constant defined by the official Ethereum 2.0 specification:\nhttps://github.com/ethereum/eth2.0-specs/blob/v0.9.2/specs/core/0_beacon-chain.md#constants"
        }
      },
      "description": "An Ethereum 2.0 validator."
    },
    "v1alpha1ValidatorAssignments": {
      "type": "object",
      "properties": {
        "epoch": {
          "type": "string",
          "format": "uint64",
          "description": "The epoch for which this set of validator assignments is valid."
        },
        "assignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValidatorAssignmentsCommitteeAssignment"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "A pagination token returned from a previous call to `ListValidatorAssignmentsRequest`\nthat indicates where this listing should continue from.\nThis field is optional."
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "description": "Total count of CommitteeAssignments matching the request filter."
        }
      }
    },
    "v1alpha1ValidatorBalances": {
      "type": "object",
      "properties": {
        "epoch": {
          "type": "string",
          "format": "uint64",
          "description": "Epoch which the state was considered to determine the validator balances."
        },
        "balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValidatorBalancesBalance"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "A pagination token returned from a previous call to `GetListValidatorBalances`\nthat indicates from where listing should continue."
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "description": "Total count of items matching the request filter."
        }
      }
    },
    "v1alpha1ValidatorInfo": {
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "string",
          "format": "byte",
          "description": "The validator's 48 byte BLS public key."
        },
        "index": {
          "type": "string",
          "format": "uint64",
          "description": "The validator's index in the beacon state."
        },
        "epoch": {
          "type": "string",
          "format": "uint64",
          "description": "The epoch for which the information pertains."
        },
        "status": {
          "$ref": "#/definitions/v1alpha1ValidatorStatus",
          "description": "The validator's current status."
        },
        "transitionTimestamp": {
          "type": "string",
          "format": "uint64",
          "description": "The unix timestamp when the validator enters the next state.\nThis could be in the past.  Some values depend on chain operation and so will vary from epoch to epoch.\nSpecific times for each state are as follows:\n- state == DEPOSITED: time at which Ethereum 1 deposit will be stored on-chain by Ethereum 2 (variable, can be 0).\n- state == PENDING: time at which validator will be activated (variable).\n- state == ACTIVE: no value (next transition depends on user and network actions).\n- state == EXITING: time at which validator will exit.\n- state == SLASHING: time at which validator will exit.\n- state == EXITED: time at which validator funds will be withdrawable."
        },
        "balance": {
          "type": "string",
          "format": "uint64",
          "description": "The validator's current balance in GWei."
        },
        "effectiveBalance": {
          "type": "string",
          "format": "uint64",
          "description": "The validator's current effective balance in GWei.\nOnly valid for states ACTIVE, EXITING, SLASHING."
        }
      },
      "description": "ValidatorInfo gives information about the state of a validator at a certain epoch."
    },
    "v1alpha1ValidatorParticipation": {
      "type": "object",
      "properties": {
        "globalParticipationRate": {
          "type": "number",
          "format": "float",
          "description": "Percentage of validator participation in the given epoch. This field\ncontains a value between 0 and 1."
        },
        "votedEther": {
          "type": "string",
          "format": "uint64",
          "description": "The total amount of ether, in gwei, that has been used in voting."
        },
        "eligibleEther": {
          "type": "string",
          "format": "uint64",
          "description": "The total amount of ether, in gwei, that is eligible for voting."
        },
        "currentEpochActiveGwei": {
          "type": "string",
          "format": "uint64",
          "description": "Total staked gwei that was active (i.e. eligible to vote) during the current epoch."
        },
        "currentEpochAttestingGwei": {
          "type": "string",
          "format": "uint64",
          "description": "Total staked gwei that had attestations included in a block during the current epoch,\nattestations by the same validator do not increase this figure."
        },
        "currentEpochTargetAttestingGwei": {
          "type": "string",
          "format": "uint64",
          "description": "Total staked gwei that attested to the majority-elected Casper FFG target epoch during the current epoch."
        },
        "previousEpochActiveGwei": {
          "type": "string",
          "format": "uint64",
          "description": "Same as current_epoch_active_gwei but for previous epoch."
        },
        "previousEpochAttestingGwei": {
          "type": "string",
          "format": "uint64",
          "description": "Same as current_epoch_attesting_gwei but for previous epoch."
        },
        "previousEpochTargetAttestingGwei": {
          "type": "string",
          "format": "uint64",
          "description": "Same as current_epoch_target_attesting_gwei but for previous epoch."
        },
        "previousEpochHeadAttestingGwei": {
          "type": "string",
          "format": "uint64",
          "description": "Total staked gwei that attested to a head beacon block that is in the canonical chain."
        }
      },
      "description": "ValidatorParticipation stores participation metrics during a given epoch."
    },
    "v1alpha1ValidatorParticipationResponse": {
      "type": "object",
      "properties": {
        "epoch": {
          "type": "string",
          "format": "uint64",
          "description": "Epoch which this message is applicable."
        },
        "finalized": {
          "type": "boolean",
          "description": "Whether or not epoch has been finalized."
        },
        "participation": {
          "$ref": "#/definitions/v1alpha1ValidatorParticipation",
          "description": "The actual validator participation metrics."
        }
      }
    },
    "v1alpha1ValidatorPerformanceResponse": {
      "type": "object",
      "properties": {
        "currentEffectiveBalances": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          },
          "description": "A list of validator effective balances mapped 1-to-1 with the request's\npublic keys."
        },
        "inclusionSlots": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          },
          "description": "The slot of when validator's attestation got included in the chain at previous epoch, the slot\nis mapped 1-to-1 with the request's public keys."
        },
        "inclusionDistances": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          },
          "description": "The distance of when validator submitted and got included in the chain, the distance\nis mapped 1-to-1 with the request's public keys."
        },
        "correctlyVotedSource": {
          "type": "array",
          "items": {
            "type": "boolean"
          },
          "description": "Whether the list of validator recently correctly voted for source at previous epoch, the result\nis mapped 1-to-1 with the request's public keys."
        },
        "correctlyVotedTarget": {
          "type": "array",
          "items": {
            "type": "boolean"
          },
          "description": "Whether the list of validator recently correctly voted for target at previous epoch, the result\nis mapped 1-to-1 with the request's public keys."
        },
        "correctlyVotedHead": {
          "type": "array",
          "items": {
            "type": "boolean"
          },
          "description": "Whether the list of validator recently correctly voted for head at previous epoch, the result\nis mapped 1-to-1 with the request's public keys."
        },
        "balancesBeforeEpochTransition": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          },
          "description": "The balance of validators before epoch transition, the balance is mapped 1-to-1 with the requests's\npublic keys."
        },
        "balancesAfterEpochTransition": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          },
          "description": "The balance of validators after epoch transition, the balance is mapped 1-to-1 with the requests's\npublic keys."
        },
        "missingValidators": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "The total number of validators from the request not found in\nin the beacon chain."
        },
        "averageActiveValidatorBalance": {
          "type": "number",
          "format": "float",
          "description": "The average active validator balance in the beacon chain."
        },
        "publicKeys": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "The public keys in the order they are in of the response."
        }
      }
    },
    "v1alpha1ValidatorQueue": {
      "type": "object",
      "properties": {
        "churnLimit": {
          "type": "string",
          "format": "uint64",
          "description": "The amount of ether in gwei allowed to enter or exit the active\nvalidator set."
        },
        "activationPublicKeys": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "Ordered list of 48 byte public keys awaiting activation. 0th index is the\nnext key to be processed."
        },
        "exitPublicKeys": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "Ordered list of public keys awaiting exit. 0th index is the next key to\nbe processed."
        },
        "activationValidatorIndices": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          },
          "description": "Ordered list of validator indices awaiting activation. 0th item in the list is the\nnext validator index to be processed."
        },
        "exitValidatorIndices": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          },
          "description": "Ordered list of validator indices awaiting exit. 0th item in the list is the\nnext validator index to be processed."
        }
      }
    },
    "v1alpha1ValidatorStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN_STATUS",
        "DEPOSITED",
        "PENDING",
        "ACTIVE",
        "EXITING",
        "SLASHING",
        "EXITED",
        "INVALID",
        "PARTIALLY_DEPOSITED"
      ],
      "default": "UNKNOWN_STATUS"
    },
    "v1alpha1Validators": {
      "type": "object",
      "properties": {
        "epoch": {
          "type": "string",
          "format": "uint64",
          "description": "Epoch which the state was considered to determine the active validator\nset. This field is not optional. Zero value epoch indicates the validator\nset is from the Ethereum 2.0 genesis set."
        },
        "validatorList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValidatorsValidatorContainer"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "A pagination token returned from a previous call to `GetValidators`\nthat indicates from where listing should continue.\nThis field is optional."
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "description": "Total count of Validators matching the request filter."
        }
      }
    },
    "v1alpha1VoluntaryExit": {
      "type": "object",
      "properties": {
        "epoch": {
          "type": "string",
          "format": "uint64",
          "description": "The epoch on when exit request becomes valid."
        },
        "validatorIndex": {
          "type": "string",
          "format": "uint64",
          "description": "Index of the exiting validator."
        }
      },
      "description": "A message that represents a validator signaling that they want to voluntarily\nwithdraw from the active validator set. The message does not contain a\nvalidator signature."
    },
    "v1alpha1WeakSubjectivityCheckpoint": {
      "type": "object",
      "properties": {
        "blockRoot": {
          "type": "string",
          "format": "byte",
          "description": "The block root of weak subjectivity checkpoint."
        },
        "stateRoot": {
          "type": "string",
          "format": "byte",
          "description": "The state root of weak subjectivity checkpoint."
        },
        "epoch": {
          "type": "string",
          "format": "uint64",
          "description": "The epoch of weak subjectivity checkpoint."
        }
      }
    }
  }
}
