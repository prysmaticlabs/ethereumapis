// Copyright 2019 Prysmatic Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package ethereum.eth.v1alpha1;

import "eth/v1alpha1/attestation.proto";

option csharp_namespace = "Ethereum.Eth.v1alpha1";
option go_package = "github.com/prysmaticlabs/ethereumapis/eth/v1alpha1;eth";
option java_multiple_files = true;
option java_outer_classname = "BeaconBlockProto";
option java_package = "org.ethereum.eth.v1alpha1";
option php_namespace = "Ethereum\\Eth\\v1alpha1";

// The Ethereum 2.0 beacon block.
message BeaconBlock {
    // Beacon chain slot that this block represents.
    uint64 slot = 1; 

    // 32 byte root of the parent block.
    bytes parent_root = 2;

    // 32 byte root of the resulting state after processing this block.
    bytes state_root = 3;

    // The block body itself.
    BeaconBlockBody body = 4;

    // 96 byte BLS signature from the validator that produced this block.
    bytes signature = 5;
}

// The block body of an Ethereum 2.0 beacon block.
message BeaconBlockBody {
    // The validators RANDAO reveal 96 byte value.
    bytes randao_reveal = 1;

    // A reference to the Ethereum 1.x chain.
    Eth1Data eth1_data = 2;

    // 32 byte field of arbitrary data. This field may contain any data and
    // is not used for anything other than a fun message.
    bytes graffiti = 3; 

    // Block operations
    // Refer to spec constants at https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_beacon-chain.md#max-operations-per-block

    // At most MAX_PROPOSER_SLASHINGS.
    repeated ProposerSlashing proposer_slashings = 4;

    // At most MAX_ATTESTER_SLASHINGS.
    repeated AttesterSlashing attester_slashings = 5;

    // At most MAX_ATTESTATIONS.
    repeated Attestation attestations = 6;

    // At most MAX_DEPOSITS.
    repeated Deposit deposits = 7;

    // At most MAX_VOLUNTARY_EXITS.
    repeated VoluntaryExit voluntary_exits = 8;

    // At most MAX_TRANSFERS.
    // Note: this is always empty for phase 0.
    repeated Transfer transfers = 9;
}

// Proposer slashings are proofs that a slashable offense has been committed by
// proposing two conflicting blocks from the same validator. 
message ProposerSlashing {
    // Validator index of the validator that proposed the two conflicting block
    // headers.
    uint64 proposer_index = 1;

    // First conflicting block header.
    BeaconBlockHeader header_1 = 2;

    // Second conflicting block header.
    BeaconBlockHeader header_2 = 3;
}

// Attestor slashings are proofs that a slashable offense has been committed by
// attestating to two conflicting pieces of information by the same validator.
message AttesterSlashing {
    // First conflicting attestation.
    IndexedAttestation attestation_1 = 1;

    // Second conflicting attestation.
    IndexedAttestation attestation_2 = 2;
}

// Deposit into the Ethereum 2.0 from the Ethereum 1.x deposit contract.
message Deposit {
    message Data {
        // 48 byte BLS public key of the validator.
        bytes public_key = 1;

        // A 32 byte hash of the withdrawal address public key.
        bytes withdrawal_credentials = 2;

        // Deposit amount in gwei.
        uint64 amount = 3;

        // 96 byte signature from the validators public key.
        bytes signature = 4;
    }

    // 32 byte roots in the deposit tree branch.
    repeated bytes proof = 1;

    Data data = 2;
}

// A message that represents a validator signaling that they want to voluntarily
// withdraw from the active validator set.
message VoluntaryExit {
    // The epoch on when exit request becomes valid.
    uint64 epoch = 1; 

    // Index of the exiting validator.
    uint64 validator_index = 2;

    // Validator's 96 byte signature
    bytes signature = 3;
}

// A beacon chain transfer is a ETH currency transfer between two validators.
message Transfer {
    // Validator index of the sender.
    uint64 sender_index = 1;

    // Validator index of the recipient. 
    uint64 recipient_index = 2;

    // Amount in gwei sent to the recipient.
    uint64 amount = 3; 

    // Fee in gwei for the block proposer to include this transfer.
    uint64 fee = 4;

    // Slot at which transfer must be processed. This is used for replay protection.
    uint64 slot = 5;

    // 48 byte sender's withdrawal public key.
    bytes sender_withdrawal_public_key = 6;

    // 96 byte signature from the sender's withdrawal key.
    bytes signature = 7;
}

// Eth1Data represents references to the Ethereum 1.x deposit contract.
message Eth1Data {
    // The 32 byte deposit tree root for the last deposit included in this
    // block.
    bytes deposit_root = 1;

    // The total number of deposits included in the beacon chain since genesis
    // including the deposits in this block.
    uint64 deposit_count = 2;

    // The 32 byte block hash of the Ethereum 1.x block considered for deposit
    // inclusion.
    bytes block_hash = 3;
}

// A beacon block header is essentially a beacon block with only a reference to
// the beacon body as a 32 byte merkle tree root. This type of message is more
// lightweight than a full beacon block.
message BeaconBlockHeader {
    // Beacon chain slot that this block represents.
    uint64 slot = 1; 

    // 32 byte merkle tree root of the parent ssz encoded block.
    bytes parent_root = 2;

    // 32 byte merkle tree root of the resulting ssz encoded state after processing this block.
    bytes state_root = 3;

    // 32 byte merkle tree root of the ssz encoded block body.
    bytes body_root = 4;

    // 96 byte BLS signature from the validator that produced this block.
    bytes signature = 5;
}

message IndexedAttestation {
    repeated uint64 custody_bit_0_indices = 1;
    repeated uint64 custody_bit_1_indices = 2;

    AttestationData data = 3;

    // 96 bytes aggregate signature.
    bytes signature = 4;
}
