// Copyright 2019 Prysmatic Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package ethereum.eth.v1alpha1;

option csharp_namespace = "Ethereum.Eth.v1alpha1";
option go_package = "github.com/prysmaticlabs/ethereumapis/eth/v1alpha1;eth";
option java_multiple_files = true;
option java_outer_classname = "AttestationProto";
option java_package = "org.ethereum.eth.v1alpha1";
option php_namespace = "Ethereum\\Eth\\v1alpha1";

message Attestation {
  // A bitfield representation of validator indices that have voted exactly
  // the same vote and have been aggregated into this attestation.
  bytes aggregation_bitfield = 1;

  AttestationData data = 2; 

  // Not used in phase 0.
  // 
  // TODO: Add custody bitfield information.
  // bytes custody_bitfield = 3;
  reserved 3;

  // 96 byte BLS aggregate signature.
  bytes signature = 4;
}

message AttestationData {
  // Attestation data includes information on Casper the Friendly Finality Gadget's votes
  // See: https://arxiv.org/pdf/1710.09437.pdf

  // 32 byte root of the LMD GHOST block vote.
  bytes block_root = 1;

  // A recent justified epoch.
  uint64 source_epoch = 2;

  // The 32 byte root of the epoch boundary block at the source epoch.
  bytes source_root = 3;

  // The epoch this attestation is targeting.
  uint64 target_epoch = 4;

  // The 32 byte root of the block at the most recent epoch boundary.
  bytes target_root = 5; 

  // Crosslink voted by this attestation.
  Crosslink crosslink = 6;
}

message Crosslink {
  // The shard that crosslinks to the beacon chain.
  uint64 shard = 1;

  // Start epoch must match the parent crosslink's end epoch.
  uint64 start_epoch = 2;

  // Ending epoch for this crosslink period. This field matches the attestation
  // target epoch or the start epoch + MAX_EPOCHS_PER_CROSSLINK, whichever is
  // less. 
  uint64 end_epoch = 3;

  // 32 byte root of the parent crosslink.
  bytes parent_root = 4;

  // 32 byte root of the crosslinked shard data since the previous crosslink.
  bytes data_root = 5;
}
