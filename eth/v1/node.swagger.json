{
  "swagger": "2.0",
  "info": {
    "title": "eth/v1/node.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "BeaconNode"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/eth/v1/node/health": {
      "get": {
        "summary": "GetHealth returns node health status in http status codes. Useful for load balancers.\nResponse Usage:\n   \"200\":\n     description: Node is ready\n   \"206\":\n     description: Node is syncing but can serve incomplete data\n   \"503\":\n     description: Node not initialized or having issues",
        "operationId": "BeaconNode_GetHealth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "BeaconNode"
        ]
      }
    },
    "/eth/v1/node/identity": {
      "get": {
        "summary": "GetIdentity retrieves data about the node's network presence.",
        "operationId": "BeaconNode_GetIdentity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1IdentityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "BeaconNode"
        ]
      }
    },
    "/eth/v1/node/peer_count": {
      "get": {
        "summary": "PeerCount retrieves number of known peers.",
        "operationId": "BeaconNode_PeerCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PeerCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "BeaconNode"
        ]
      }
    },
    "/eth/v1/node/peers": {
      "get": {
        "summary": "ListPeers retrieves data about the node's network peers.",
        "operationId": "BeaconNode_ListPeers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PeersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "state",
            "description": "Requested peer states (available values: disconnected, connecting, connected, disconnecting).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "DISCONNECTED",
                "CONNECTING",
                "CONNECTED",
                "DISCONNECTING"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "direction",
            "description": "Requested peer directions (available values: inbound, outbound).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "INBOUND",
                "OUTBOUND"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "BeaconNode"
        ]
      }
    },
    "/eth/v1/node/peers/{peerId}": {
      "get": {
        "summary": "GetPeer retrieves data about the given peer.",
        "operationId": "BeaconNode_GetPeer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PeerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "peerId",
            "description": "Peer id of the peer requested.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "BeaconNode"
        ]
      }
    },
    "/eth/v1/node/syncing": {
      "get": {
        "summary": "GetSyncStatus requests the beacon node to describe if it's currently syncing or not, and\nif it is, what block it is up to.",
        "operationId": "BeaconNode_GetSyncStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SyncingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "BeaconNode"
        ]
      }
    },
    "/eth/v1/node/version": {
      "get": {
        "summary": "GetVersion requests that the beacon node identify information about its implementation in a\nformat similar to a HTTP User-Agent field.",
        "operationId": "BeaconNode_GetVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VersionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "BeaconNode"
        ]
      }
    }
  },
  "definitions": {
    "PeerCountResponsePeerCount": {
      "type": "object",
      "properties": {
        "disconnected": {
          "type": "string",
          "format": "uint64",
          "description": "The number of disconnected peers."
        },
        "connecting": {
          "type": "string",
          "format": "uint64",
          "description": "The number of connecting peers."
        },
        "connected": {
          "type": "string",
          "format": "uint64",
          "description": "The number of connected peers."
        },
        "disconnecting": {
          "type": "string",
          "format": "uint64",
          "description": "The number of disconnecting peers."
        }
      }
    },
    "PeerResponseMeta": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1ConnectionState": {
      "type": "string",
      "enum": [
        "DISCONNECTED",
        "CONNECTING",
        "CONNECTED",
        "DISCONNECTING"
      ],
      "default": "DISCONNECTED",
      "description": "ConnectionState states the current status of the peer."
    },
    "v1Identity": {
      "type": "object",
      "properties": {
        "peerId": {
          "type": "string",
          "description": "The peer id of the node."
        },
        "enr": {
          "type": "string",
          "description": "The latest ENR of the node."
        },
        "p2pAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "All the p2p multiaddresses of the peer, specified as a full multiaddr."
        },
        "discoveryAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "All the discv5 multiaddresses of the peer, specified as a full multiaddr."
        },
        "metadata": {
          "$ref": "#/definitions/v1Metadata",
          "description": "Additional metadata that the node would like to provide. Includes extra networking information."
        }
      }
    },
    "v1IdentityResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/v1Identity"
        }
      }
    },
    "v1Metadata": {
      "type": "object",
      "properties": {
        "seqNumber": {
          "type": "string",
          "format": "uint64",
          "description": "Sequence number starts at 0 used to version the node's metadata. If any other field in the local MetaData changes,\nthe node MUST increment seq_number by 1."
        },
        "attnets": {
          "type": "string",
          "format": "byte",
          "description": "Attnets is a bitvector representing the node's persistent attestation subnet subscriptions."
        }
      }
    },
    "v1Peer": {
      "type": "object",
      "properties": {
        "peerId": {
          "type": "string",
          "description": "The peer id of the peer."
        },
        "enr": {
          "type": "string",
          "description": "The latest ENR of the peer that's in the record."
        },
        "lastSeenP2pAddress": {
          "type": "string",
          "title": "The address of the peer, as a full multiaddr, for example:\n/ip4/37.221.192.134/tcp/13000/p2p/16Uiu2HAm8maLMjag1TAUM52zPfmLbVMGFdwUAWgoHu1HDQLR6e17"
        },
        "state": {
          "$ref": "#/definitions/v1ConnectionState",
          "title": "The connection state of the peer at the moment of the request. (e.g. Connecting)"
        },
        "direction": {
          "$ref": "#/definitions/v1PeerDirection",
          "description": "The direction of the connection (inbound/outbound)."
        }
      },
      "description": "Peer provides details of a peer on the network."
    },
    "v1PeerCountResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/PeerCountResponsePeerCount"
        }
      }
    },
    "v1PeerDirection": {
      "type": "string",
      "enum": [
        "INBOUND",
        "OUTBOUND"
      ],
      "default": "INBOUND",
      "description": "PeerDirection states the direction of the connection to a peer."
    },
    "v1PeerResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/v1Peer"
        },
        "meta": {
          "$ref": "#/definitions/PeerResponseMeta"
        }
      }
    },
    "v1PeersResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Peer"
          }
        }
      }
    },
    "v1SyncInfo": {
      "type": "object",
      "properties": {
        "headSlot": {
          "type": "string",
          "format": "uint64",
          "description": "A uint64 states the latest head slot of the current node."
        },
        "syncDistance": {
          "type": "string",
          "format": "uint64",
          "description": "A uint64 indicating how many slots are left for the beacon node sync to complete."
        },
        "isSyncing": {
          "type": "boolean",
          "description": "A bool indicating whether the node is currently syncing or not."
        }
      }
    },
    "v1SyncingResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/v1SyncInfo"
        }
      }
    },
    "v1Version": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "description": "A string that uniquely identifies the node and its version."
        }
      },
      "description": "Information about the node version."
    },
    "v1VersionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/v1Version"
        }
      }
    }
  }
}
