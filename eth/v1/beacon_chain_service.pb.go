// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eth/v1/beacon_chain_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	github_com_prysmaticlabs_eth2_types "github.com/prysmaticlabs/eth2-types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GenesisResponse struct {
	Data                 *GenesisResponse_Genesis `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GenesisResponse) Reset()         { *m = GenesisResponse{} }
func (m *GenesisResponse) String() string { return proto.CompactTextString(m) }
func (*GenesisResponse) ProtoMessage()    {}
func (*GenesisResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{0}
}
func (m *GenesisResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisResponse.Merge(m, src)
}
func (m *GenesisResponse) XXX_Size() int {
	return m.Size()
}
func (m *GenesisResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisResponse proto.InternalMessageInfo

func (m *GenesisResponse) GetData() *GenesisResponse_Genesis {
	if m != nil {
		return m.Data
	}
	return nil
}

type GenesisResponse_Genesis struct {
	GenesisTime           *types.Timestamp `protobuf:"bytes,1,opt,name=genesis_time,json=genesisTime,proto3" json:"genesis_time,omitempty"`
	GenesisValidatorsRoot []byte           `protobuf:"bytes,2,opt,name=genesis_validators_root,json=genesisValidatorsRoot,proto3" json:"genesis_validators_root,omitempty" ssz-size:"32"`
	GenesisForkVersion    []byte           `protobuf:"bytes,3,opt,name=genesis_fork_version,json=genesisForkVersion,proto3" json:"genesis_fork_version,omitempty" ssz-size:"4"`
	XXX_NoUnkeyedLiteral  struct{}         `json:"-"`
	XXX_unrecognized      []byte           `json:"-"`
	XXX_sizecache         int32            `json:"-"`
}

func (m *GenesisResponse_Genesis) Reset()         { *m = GenesisResponse_Genesis{} }
func (m *GenesisResponse_Genesis) String() string { return proto.CompactTextString(m) }
func (*GenesisResponse_Genesis) ProtoMessage()    {}
func (*GenesisResponse_Genesis) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{0, 0}
}
func (m *GenesisResponse_Genesis) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisResponse_Genesis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisResponse_Genesis.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisResponse_Genesis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisResponse_Genesis.Merge(m, src)
}
func (m *GenesisResponse_Genesis) XXX_Size() int {
	return m.Size()
}
func (m *GenesisResponse_Genesis) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisResponse_Genesis.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisResponse_Genesis proto.InternalMessageInfo

func (m *GenesisResponse_Genesis) GetGenesisTime() *types.Timestamp {
	if m != nil {
		return m.GenesisTime
	}
	return nil
}

func (m *GenesisResponse_Genesis) GetGenesisValidatorsRoot() []byte {
	if m != nil {
		return m.GenesisValidatorsRoot
	}
	return nil
}

func (m *GenesisResponse_Genesis) GetGenesisForkVersion() []byte {
	if m != nil {
		return m.GenesisForkVersion
	}
	return nil
}

type StateRequest struct {
	StateId              []byte   `protobuf:"bytes,1,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateRequest) Reset()         { *m = StateRequest{} }
func (m *StateRequest) String() string { return proto.CompactTextString(m) }
func (*StateRequest) ProtoMessage()    {}
func (*StateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{1}
}
func (m *StateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateRequest.Merge(m, src)
}
func (m *StateRequest) XXX_Size() int {
	return m.Size()
}
func (m *StateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateRequest proto.InternalMessageInfo

func (m *StateRequest) GetStateId() []byte {
	if m != nil {
		return m.StateId
	}
	return nil
}

type StateRootResponse struct {
	Data                 *StateRootResponse_StateRoot `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *StateRootResponse) Reset()         { *m = StateRootResponse{} }
func (m *StateRootResponse) String() string { return proto.CompactTextString(m) }
func (*StateRootResponse) ProtoMessage()    {}
func (*StateRootResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{2}
}
func (m *StateRootResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateRootResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateRootResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateRootResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateRootResponse.Merge(m, src)
}
func (m *StateRootResponse) XXX_Size() int {
	return m.Size()
}
func (m *StateRootResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateRootResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateRootResponse proto.InternalMessageInfo

func (m *StateRootResponse) GetData() *StateRootResponse_StateRoot {
	if m != nil {
		return m.Data
	}
	return nil
}

type StateRootResponse_StateRoot struct {
	StateRoot            []byte   `protobuf:"bytes,1,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty" ssz-size:"32"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateRootResponse_StateRoot) Reset()         { *m = StateRootResponse_StateRoot{} }
func (m *StateRootResponse_StateRoot) String() string { return proto.CompactTextString(m) }
func (*StateRootResponse_StateRoot) ProtoMessage()    {}
func (*StateRootResponse_StateRoot) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{2, 0}
}
func (m *StateRootResponse_StateRoot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateRootResponse_StateRoot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateRootResponse_StateRoot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateRootResponse_StateRoot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateRootResponse_StateRoot.Merge(m, src)
}
func (m *StateRootResponse_StateRoot) XXX_Size() int {
	return m.Size()
}
func (m *StateRootResponse_StateRoot) XXX_DiscardUnknown() {
	xxx_messageInfo_StateRootResponse_StateRoot.DiscardUnknown(m)
}

var xxx_messageInfo_StateRootResponse_StateRoot proto.InternalMessageInfo

func (m *StateRootResponse_StateRoot) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

type StateForkResponse struct {
	Data                 *Fork    `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateForkResponse) Reset()         { *m = StateForkResponse{} }
func (m *StateForkResponse) String() string { return proto.CompactTextString(m) }
func (*StateForkResponse) ProtoMessage()    {}
func (*StateForkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{3}
}
func (m *StateForkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateForkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateForkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateForkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateForkResponse.Merge(m, src)
}
func (m *StateForkResponse) XXX_Size() int {
	return m.Size()
}
func (m *StateForkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateForkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateForkResponse proto.InternalMessageInfo

func (m *StateForkResponse) GetData() *Fork {
	if m != nil {
		return m.Data
	}
	return nil
}

type StateFinalityCheckpointResponse struct {
	Data                 *StateFinalityCheckpointResponse_StateFinalityCheckpoint `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                 `json:"-"`
	XXX_unrecognized     []byte                                                   `json:"-"`
	XXX_sizecache        int32                                                    `json:"-"`
}

func (m *StateFinalityCheckpointResponse) Reset()         { *m = StateFinalityCheckpointResponse{} }
func (m *StateFinalityCheckpointResponse) String() string { return proto.CompactTextString(m) }
func (*StateFinalityCheckpointResponse) ProtoMessage()    {}
func (*StateFinalityCheckpointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{4}
}
func (m *StateFinalityCheckpointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateFinalityCheckpointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateFinalityCheckpointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateFinalityCheckpointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateFinalityCheckpointResponse.Merge(m, src)
}
func (m *StateFinalityCheckpointResponse) XXX_Size() int {
	return m.Size()
}
func (m *StateFinalityCheckpointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateFinalityCheckpointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateFinalityCheckpointResponse proto.InternalMessageInfo

func (m *StateFinalityCheckpointResponse) GetData() *StateFinalityCheckpointResponse_StateFinalityCheckpoint {
	if m != nil {
		return m.Data
	}
	return nil
}

type StateFinalityCheckpointResponse_StateFinalityCheckpoint struct {
	PreviousJustified    *Checkpoint `protobuf:"bytes,1,opt,name=previous_justified,json=previousJustified,proto3" json:"previous_justified,omitempty"`
	CurrentJustified     *Checkpoint `protobuf:"bytes,2,opt,name=current_justified,json=currentJustified,proto3" json:"current_justified,omitempty"`
	Finalized            *Checkpoint `protobuf:"bytes,3,opt,name=finalized,proto3" json:"finalized,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *StateFinalityCheckpointResponse_StateFinalityCheckpoint) Reset() {
	*m = StateFinalityCheckpointResponse_StateFinalityCheckpoint{}
}
func (m *StateFinalityCheckpointResponse_StateFinalityCheckpoint) String() string {
	return proto.CompactTextString(m)
}
func (*StateFinalityCheckpointResponse_StateFinalityCheckpoint) ProtoMessage() {}
func (*StateFinalityCheckpointResponse_StateFinalityCheckpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{4, 0}
}
func (m *StateFinalityCheckpointResponse_StateFinalityCheckpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateFinalityCheckpointResponse_StateFinalityCheckpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateFinalityCheckpointResponse_StateFinalityCheckpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateFinalityCheckpointResponse_StateFinalityCheckpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateFinalityCheckpointResponse_StateFinalityCheckpoint.Merge(m, src)
}
func (m *StateFinalityCheckpointResponse_StateFinalityCheckpoint) XXX_Size() int {
	return m.Size()
}
func (m *StateFinalityCheckpointResponse_StateFinalityCheckpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_StateFinalityCheckpointResponse_StateFinalityCheckpoint.DiscardUnknown(m)
}

var xxx_messageInfo_StateFinalityCheckpointResponse_StateFinalityCheckpoint proto.InternalMessageInfo

func (m *StateFinalityCheckpointResponse_StateFinalityCheckpoint) GetPreviousJustified() *Checkpoint {
	if m != nil {
		return m.PreviousJustified
	}
	return nil
}

func (m *StateFinalityCheckpointResponse_StateFinalityCheckpoint) GetCurrentJustified() *Checkpoint {
	if m != nil {
		return m.CurrentJustified
	}
	return nil
}

func (m *StateFinalityCheckpointResponse_StateFinalityCheckpoint) GetFinalized() *Checkpoint {
	if m != nil {
		return m.Finalized
	}
	return nil
}

type StateValidatorsRequest struct {
	StateId              []byte   `protobuf:"bytes,1,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
	Id                   [][]byte `protobuf:"bytes,2,rep,name=id,proto3" json:"id,omitempty"`
	Status               string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateValidatorsRequest) Reset()         { *m = StateValidatorsRequest{} }
func (m *StateValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*StateValidatorsRequest) ProtoMessage()    {}
func (*StateValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{5}
}
func (m *StateValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateValidatorsRequest.Merge(m, src)
}
func (m *StateValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *StateValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateValidatorsRequest proto.InternalMessageInfo

func (m *StateValidatorsRequest) GetStateId() []byte {
	if m != nil {
		return m.StateId
	}
	return nil
}

func (m *StateValidatorsRequest) GetId() [][]byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *StateValidatorsRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type ValidatorBalancesRequest struct {
	StateId              []byte   `protobuf:"bytes,1,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
	Id                   []string `protobuf:"bytes,2,rep,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidatorBalancesRequest) Reset()         { *m = ValidatorBalancesRequest{} }
func (m *ValidatorBalancesRequest) String() string { return proto.CompactTextString(m) }
func (*ValidatorBalancesRequest) ProtoMessage()    {}
func (*ValidatorBalancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{6}
}
func (m *ValidatorBalancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorBalancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorBalancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorBalancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorBalancesRequest.Merge(m, src)
}
func (m *ValidatorBalancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorBalancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorBalancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorBalancesRequest proto.InternalMessageInfo

func (m *ValidatorBalancesRequest) GetStateId() []byte {
	if m != nil {
		return m.StateId
	}
	return nil
}

func (m *ValidatorBalancesRequest) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

type StateValidatorsResponse struct {
	Data                 []*ValidatorContainer `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *StateValidatorsResponse) Reset()         { *m = StateValidatorsResponse{} }
func (m *StateValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*StateValidatorsResponse) ProtoMessage()    {}
func (*StateValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{7}
}
func (m *StateValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateValidatorsResponse.Merge(m, src)
}
func (m *StateValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *StateValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateValidatorsResponse proto.InternalMessageInfo

func (m *StateValidatorsResponse) GetData() []*ValidatorContainer {
	if m != nil {
		return m.Data
	}
	return nil
}

type ValidatorBalancesResponse struct {
	Data                 []*ValidatorBalance `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ValidatorBalancesResponse) Reset()         { *m = ValidatorBalancesResponse{} }
func (m *ValidatorBalancesResponse) String() string { return proto.CompactTextString(m) }
func (*ValidatorBalancesResponse) ProtoMessage()    {}
func (*ValidatorBalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{8}
}
func (m *ValidatorBalancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorBalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorBalancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorBalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorBalancesResponse.Merge(m, src)
}
func (m *ValidatorBalancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorBalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorBalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorBalancesResponse proto.InternalMessageInfo

func (m *ValidatorBalancesResponse) GetData() []*ValidatorBalance {
	if m != nil {
		return m.Data
	}
	return nil
}

type ValidatorBalance struct {
	Index                uint64   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Balance              uint64   `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidatorBalance) Reset()         { *m = ValidatorBalance{} }
func (m *ValidatorBalance) String() string { return proto.CompactTextString(m) }
func (*ValidatorBalance) ProtoMessage()    {}
func (*ValidatorBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{9}
}
func (m *ValidatorBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorBalance.Merge(m, src)
}
func (m *ValidatorBalance) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorBalance.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorBalance proto.InternalMessageInfo

func (m *ValidatorBalance) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ValidatorBalance) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

type StateValidatorRequest struct {
	StateId              []byte   `protobuf:"bytes,1,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
	ValidatorId          []byte   `protobuf:"bytes,2,opt,name=validator_id,json=validatorId,proto3" json:"validator_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateValidatorRequest) Reset()         { *m = StateValidatorRequest{} }
func (m *StateValidatorRequest) String() string { return proto.CompactTextString(m) }
func (*StateValidatorRequest) ProtoMessage()    {}
func (*StateValidatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{10}
}
func (m *StateValidatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateValidatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateValidatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateValidatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateValidatorRequest.Merge(m, src)
}
func (m *StateValidatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *StateValidatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateValidatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateValidatorRequest proto.InternalMessageInfo

func (m *StateValidatorRequest) GetStateId() []byte {
	if m != nil {
		return m.StateId
	}
	return nil
}

func (m *StateValidatorRequest) GetValidatorId() []byte {
	if m != nil {
		return m.ValidatorId
	}
	return nil
}

type StateValidatorResponse struct {
	Data                 *ValidatorContainer `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *StateValidatorResponse) Reset()         { *m = StateValidatorResponse{} }
func (m *StateValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*StateValidatorResponse) ProtoMessage()    {}
func (*StateValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{11}
}
func (m *StateValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateValidatorResponse.Merge(m, src)
}
func (m *StateValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *StateValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateValidatorResponse proto.InternalMessageInfo

func (m *StateValidatorResponse) GetData() *ValidatorContainer {
	if m != nil {
		return m.Data
	}
	return nil
}

type StateCommitteesRequest struct {
	StateId              []byte                                    `protobuf:"bytes,1,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
	Epoch                github_com_prysmaticlabs_eth2_types.Epoch `protobuf:"varint,2,opt,name=epoch,proto3,casttype=github.com/prysmaticlabs/eth2-types.Epoch" json:"epoch,omitempty"`
	Index                uint64                                    `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Slot                 github_com_prysmaticlabs_eth2_types.Slot  `protobuf:"varint,4,opt,name=slot,proto3,casttype=github.com/prysmaticlabs/eth2-types.Slot" json:"slot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *StateCommitteesRequest) Reset()         { *m = StateCommitteesRequest{} }
func (m *StateCommitteesRequest) String() string { return proto.CompactTextString(m) }
func (*StateCommitteesRequest) ProtoMessage()    {}
func (*StateCommitteesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{12}
}
func (m *StateCommitteesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateCommitteesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateCommitteesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateCommitteesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateCommitteesRequest.Merge(m, src)
}
func (m *StateCommitteesRequest) XXX_Size() int {
	return m.Size()
}
func (m *StateCommitteesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StateCommitteesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StateCommitteesRequest proto.InternalMessageInfo

func (m *StateCommitteesRequest) GetStateId() []byte {
	if m != nil {
		return m.StateId
	}
	return nil
}

func (m *StateCommitteesRequest) GetEpoch() github_com_prysmaticlabs_eth2_types.Epoch {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *StateCommitteesRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *StateCommitteesRequest) GetSlot() github_com_prysmaticlabs_eth2_types.Slot {
	if m != nil {
		return m.Slot
	}
	return 0
}

type StateCommitteesResponse struct {
	Data                 []*Committee `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *StateCommitteesResponse) Reset()         { *m = StateCommitteesResponse{} }
func (m *StateCommitteesResponse) String() string { return proto.CompactTextString(m) }
func (*StateCommitteesResponse) ProtoMessage()    {}
func (*StateCommitteesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{13}
}
func (m *StateCommitteesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateCommitteesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateCommitteesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateCommitteesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateCommitteesResponse.Merge(m, src)
}
func (m *StateCommitteesResponse) XXX_Size() int {
	return m.Size()
}
func (m *StateCommitteesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateCommitteesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateCommitteesResponse proto.InternalMessageInfo

func (m *StateCommitteesResponse) GetData() []*Committee {
	if m != nil {
		return m.Data
	}
	return nil
}

type BlockAttestationsResponse struct {
	Data                 []*Attestation `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *BlockAttestationsResponse) Reset()         { *m = BlockAttestationsResponse{} }
func (m *BlockAttestationsResponse) String() string { return proto.CompactTextString(m) }
func (*BlockAttestationsResponse) ProtoMessage()    {}
func (*BlockAttestationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{14}
}
func (m *BlockAttestationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockAttestationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockAttestationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockAttestationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockAttestationsResponse.Merge(m, src)
}
func (m *BlockAttestationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *BlockAttestationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockAttestationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockAttestationsResponse proto.InternalMessageInfo

func (m *BlockAttestationsResponse) GetData() []*Attestation {
	if m != nil {
		return m.Data
	}
	return nil
}

type BlockRootContainer struct {
	Root                 []byte   `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty" ssz-size:"32"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockRootContainer) Reset()         { *m = BlockRootContainer{} }
func (m *BlockRootContainer) String() string { return proto.CompactTextString(m) }
func (*BlockRootContainer) ProtoMessage()    {}
func (*BlockRootContainer) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{15}
}
func (m *BlockRootContainer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockRootContainer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockRootContainer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockRootContainer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockRootContainer.Merge(m, src)
}
func (m *BlockRootContainer) XXX_Size() int {
	return m.Size()
}
func (m *BlockRootContainer) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockRootContainer.DiscardUnknown(m)
}

var xxx_messageInfo_BlockRootContainer proto.InternalMessageInfo

func (m *BlockRootContainer) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

type BlockRootResponse struct {
	Data                 *BlockRootContainer `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *BlockRootResponse) Reset()         { *m = BlockRootResponse{} }
func (m *BlockRootResponse) String() string { return proto.CompactTextString(m) }
func (*BlockRootResponse) ProtoMessage()    {}
func (*BlockRootResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{16}
}
func (m *BlockRootResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockRootResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockRootResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockRootResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockRootResponse.Merge(m, src)
}
func (m *BlockRootResponse) XXX_Size() int {
	return m.Size()
}
func (m *BlockRootResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockRootResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockRootResponse proto.InternalMessageInfo

func (m *BlockRootResponse) GetData() *BlockRootContainer {
	if m != nil {
		return m.Data
	}
	return nil
}

type BlockHeadersRequest struct {
	Slot                 github_com_prysmaticlabs_eth2_types.Slot `protobuf:"varint,1,opt,name=slot,proto3,casttype=github.com/prysmaticlabs/eth2-types.Slot" json:"slot,omitempty"`
	ParentRoot           []byte                                   `protobuf:"bytes,2,opt,name=parent_root,json=parentRoot,proto3" json:"parent_root,omitempty" ssz-size:"32"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *BlockHeadersRequest) Reset()         { *m = BlockHeadersRequest{} }
func (m *BlockHeadersRequest) String() string { return proto.CompactTextString(m) }
func (*BlockHeadersRequest) ProtoMessage()    {}
func (*BlockHeadersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{17}
}
func (m *BlockHeadersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeadersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeadersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHeadersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeadersRequest.Merge(m, src)
}
func (m *BlockHeadersRequest) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeadersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeadersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeadersRequest proto.InternalMessageInfo

func (m *BlockHeadersRequest) GetSlot() github_com_prysmaticlabs_eth2_types.Slot {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *BlockHeadersRequest) GetParentRoot() []byte {
	if m != nil {
		return m.ParentRoot
	}
	return nil
}

type BlockHeadersResponse struct {
	Data                 []*BlockHeaderContainer `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *BlockHeadersResponse) Reset()         { *m = BlockHeadersResponse{} }
func (m *BlockHeadersResponse) String() string { return proto.CompactTextString(m) }
func (*BlockHeadersResponse) ProtoMessage()    {}
func (*BlockHeadersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{18}
}
func (m *BlockHeadersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeadersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeadersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHeadersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeadersResponse.Merge(m, src)
}
func (m *BlockHeadersResponse) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeadersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeadersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeadersResponse proto.InternalMessageInfo

func (m *BlockHeadersResponse) GetData() []*BlockHeaderContainer {
	if m != nil {
		return m.Data
	}
	return nil
}

type BlockRequest struct {
	BlockId              []byte   `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockRequest) Reset()         { *m = BlockRequest{} }
func (m *BlockRequest) String() string { return proto.CompactTextString(m) }
func (*BlockRequest) ProtoMessage()    {}
func (*BlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{19}
}
func (m *BlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockRequest.Merge(m, src)
}
func (m *BlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *BlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockRequest proto.InternalMessageInfo

func (m *BlockRequest) GetBlockId() []byte {
	if m != nil {
		return m.BlockId
	}
	return nil
}

type BlockHeaderResponse struct {
	Data                 *BlockHeaderContainer `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *BlockHeaderResponse) Reset()         { *m = BlockHeaderResponse{} }
func (m *BlockHeaderResponse) String() string { return proto.CompactTextString(m) }
func (*BlockHeaderResponse) ProtoMessage()    {}
func (*BlockHeaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{20}
}
func (m *BlockHeaderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeaderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHeaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeaderResponse.Merge(m, src)
}
func (m *BlockHeaderResponse) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeaderResponse proto.InternalMessageInfo

func (m *BlockHeaderResponse) GetData() *BlockHeaderContainer {
	if m != nil {
		return m.Data
	}
	return nil
}

type BlockHeaderContainer struct {
	Root                 []byte                      `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty" ssz-size:"32"`
	Canonical            bool                        `protobuf:"varint,2,opt,name=canonical,proto3" json:"canonical,omitempty"`
	Header               *BeaconBlockHeaderContainer `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *BlockHeaderContainer) Reset()         { *m = BlockHeaderContainer{} }
func (m *BlockHeaderContainer) String() string { return proto.CompactTextString(m) }
func (*BlockHeaderContainer) ProtoMessage()    {}
func (*BlockHeaderContainer) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{21}
}
func (m *BlockHeaderContainer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeaderContainer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeaderContainer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHeaderContainer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeaderContainer.Merge(m, src)
}
func (m *BlockHeaderContainer) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeaderContainer) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeaderContainer.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeaderContainer proto.InternalMessageInfo

func (m *BlockHeaderContainer) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *BlockHeaderContainer) GetCanonical() bool {
	if m != nil {
		return m.Canonical
	}
	return false
}

func (m *BlockHeaderContainer) GetHeader() *BeaconBlockHeaderContainer {
	if m != nil {
		return m.Header
	}
	return nil
}

type BeaconBlockHeaderContainer struct {
	Message              *BeaconBlockHeader `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Signature            []byte             `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty" ssz-size:"96"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BeaconBlockHeaderContainer) Reset()         { *m = BeaconBlockHeaderContainer{} }
func (m *BeaconBlockHeaderContainer) String() string { return proto.CompactTextString(m) }
func (*BeaconBlockHeaderContainer) ProtoMessage()    {}
func (*BeaconBlockHeaderContainer) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{22}
}
func (m *BeaconBlockHeaderContainer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeaconBlockHeaderContainer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeaconBlockHeaderContainer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeaconBlockHeaderContainer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconBlockHeaderContainer.Merge(m, src)
}
func (m *BeaconBlockHeaderContainer) XXX_Size() int {
	return m.Size()
}
func (m *BeaconBlockHeaderContainer) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconBlockHeaderContainer.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconBlockHeaderContainer proto.InternalMessageInfo

func (m *BeaconBlockHeaderContainer) GetMessage() *BeaconBlockHeader {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *BeaconBlockHeaderContainer) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type BlockResponse struct {
	Data                 *BeaconBlockContainer `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *BlockResponse) Reset()         { *m = BlockResponse{} }
func (m *BlockResponse) String() string { return proto.CompactTextString(m) }
func (*BlockResponse) ProtoMessage()    {}
func (*BlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{23}
}
func (m *BlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockResponse.Merge(m, src)
}
func (m *BlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *BlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockResponse proto.InternalMessageInfo

func (m *BlockResponse) GetData() *BeaconBlockContainer {
	if m != nil {
		return m.Data
	}
	return nil
}

type BeaconBlockContainer struct {
	Message              *BeaconBlock `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Signature            []byte       `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty" ssz-size:"96"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BeaconBlockContainer) Reset()         { *m = BeaconBlockContainer{} }
func (m *BeaconBlockContainer) String() string { return proto.CompactTextString(m) }
func (*BeaconBlockContainer) ProtoMessage()    {}
func (*BeaconBlockContainer) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{24}
}
func (m *BeaconBlockContainer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeaconBlockContainer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeaconBlockContainer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeaconBlockContainer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconBlockContainer.Merge(m, src)
}
func (m *BeaconBlockContainer) XXX_Size() int {
	return m.Size()
}
func (m *BeaconBlockContainer) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconBlockContainer.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconBlockContainer proto.InternalMessageInfo

func (m *BeaconBlockContainer) GetMessage() *BeaconBlock {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *BeaconBlockContainer) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type AttestationsPoolRequest struct {
	Slot                 github_com_prysmaticlabs_eth2_types.Slot           `protobuf:"varint,1,opt,name=slot,proto3,casttype=github.com/prysmaticlabs/eth2-types.Slot" json:"slot,omitempty"`
	CommitteeIndex       github_com_prysmaticlabs_eth2_types.CommitteeIndex `protobuf:"varint,2,opt,name=committee_index,json=committeeIndex,proto3,casttype=github.com/prysmaticlabs/eth2-types.CommitteeIndex" json:"committee_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *AttestationsPoolRequest) Reset()         { *m = AttestationsPoolRequest{} }
func (m *AttestationsPoolRequest) String() string { return proto.CompactTextString(m) }
func (*AttestationsPoolRequest) ProtoMessage()    {}
func (*AttestationsPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{25}
}
func (m *AttestationsPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestationsPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestationsPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttestationsPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestationsPoolRequest.Merge(m, src)
}
func (m *AttestationsPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *AttestationsPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestationsPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AttestationsPoolRequest proto.InternalMessageInfo

func (m *AttestationsPoolRequest) GetSlot() github_com_prysmaticlabs_eth2_types.Slot {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *AttestationsPoolRequest) GetCommitteeIndex() github_com_prysmaticlabs_eth2_types.CommitteeIndex {
	if m != nil {
		return m.CommitteeIndex
	}
	return 0
}

type SubmitAttestationsRequest struct {
	Data                 []*Attestation `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SubmitAttestationsRequest) Reset()         { *m = SubmitAttestationsRequest{} }
func (m *SubmitAttestationsRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitAttestationsRequest) ProtoMessage()    {}
func (*SubmitAttestationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{26}
}
func (m *SubmitAttestationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitAttestationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitAttestationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitAttestationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitAttestationsRequest.Merge(m, src)
}
func (m *SubmitAttestationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubmitAttestationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitAttestationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitAttestationsRequest proto.InternalMessageInfo

func (m *SubmitAttestationsRequest) GetData() []*Attestation {
	if m != nil {
		return m.Data
	}
	return nil
}

type AttestationsPoolResponse struct {
	Data                 []*Attestation `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AttestationsPoolResponse) Reset()         { *m = AttestationsPoolResponse{} }
func (m *AttestationsPoolResponse) String() string { return proto.CompactTextString(m) }
func (*AttestationsPoolResponse) ProtoMessage()    {}
func (*AttestationsPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{27}
}
func (m *AttestationsPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestationsPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestationsPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttestationsPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestationsPoolResponse.Merge(m, src)
}
func (m *AttestationsPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *AttestationsPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestationsPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AttestationsPoolResponse proto.InternalMessageInfo

func (m *AttestationsPoolResponse) GetData() []*Attestation {
	if m != nil {
		return m.Data
	}
	return nil
}

type AttesterSlashingsPoolResponse struct {
	Data                 []*AttesterSlashing `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *AttesterSlashingsPoolResponse) Reset()         { *m = AttesterSlashingsPoolResponse{} }
func (m *AttesterSlashingsPoolResponse) String() string { return proto.CompactTextString(m) }
func (*AttesterSlashingsPoolResponse) ProtoMessage()    {}
func (*AttesterSlashingsPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{28}
}
func (m *AttesterSlashingsPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttesterSlashingsPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttesterSlashingsPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttesterSlashingsPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttesterSlashingsPoolResponse.Merge(m, src)
}
func (m *AttesterSlashingsPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *AttesterSlashingsPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AttesterSlashingsPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AttesterSlashingsPoolResponse proto.InternalMessageInfo

func (m *AttesterSlashingsPoolResponse) GetData() []*AttesterSlashing {
	if m != nil {
		return m.Data
	}
	return nil
}

type ProposerSlashingPoolResponse struct {
	Data                 []*ProposerSlashing `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ProposerSlashingPoolResponse) Reset()         { *m = ProposerSlashingPoolResponse{} }
func (m *ProposerSlashingPoolResponse) String() string { return proto.CompactTextString(m) }
func (*ProposerSlashingPoolResponse) ProtoMessage()    {}
func (*ProposerSlashingPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{29}
}
func (m *ProposerSlashingPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposerSlashingPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposerSlashingPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposerSlashingPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposerSlashingPoolResponse.Merge(m, src)
}
func (m *ProposerSlashingPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProposerSlashingPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposerSlashingPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProposerSlashingPoolResponse proto.InternalMessageInfo

func (m *ProposerSlashingPoolResponse) GetData() []*ProposerSlashing {
	if m != nil {
		return m.Data
	}
	return nil
}

type VoluntaryExitsPoolResponse struct {
	Data                 []*SignedVoluntaryExit `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *VoluntaryExitsPoolResponse) Reset()         { *m = VoluntaryExitsPoolResponse{} }
func (m *VoluntaryExitsPoolResponse) String() string { return proto.CompactTextString(m) }
func (*VoluntaryExitsPoolResponse) ProtoMessage()    {}
func (*VoluntaryExitsPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{30}
}
func (m *VoluntaryExitsPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoluntaryExitsPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoluntaryExitsPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoluntaryExitsPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoluntaryExitsPoolResponse.Merge(m, src)
}
func (m *VoluntaryExitsPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *VoluntaryExitsPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VoluntaryExitsPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VoluntaryExitsPoolResponse proto.InternalMessageInfo

func (m *VoluntaryExitsPoolResponse) GetData() []*SignedVoluntaryExit {
	if m != nil {
		return m.Data
	}
	return nil
}

type ForkScheduleResponse struct {
	Data                 []*Fork  `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForkScheduleResponse) Reset()         { *m = ForkScheduleResponse{} }
func (m *ForkScheduleResponse) String() string { return proto.CompactTextString(m) }
func (*ForkScheduleResponse) ProtoMessage()    {}
func (*ForkScheduleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{31}
}
func (m *ForkScheduleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForkScheduleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForkScheduleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForkScheduleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForkScheduleResponse.Merge(m, src)
}
func (m *ForkScheduleResponse) XXX_Size() int {
	return m.Size()
}
func (m *ForkScheduleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ForkScheduleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ForkScheduleResponse proto.InternalMessageInfo

func (m *ForkScheduleResponse) GetData() []*Fork {
	if m != nil {
		return m.Data
	}
	return nil
}

type SpecResponse struct {
	Data                 map[string]string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SpecResponse) Reset()         { *m = SpecResponse{} }
func (m *SpecResponse) String() string { return proto.CompactTextString(m) }
func (*SpecResponse) ProtoMessage()    {}
func (*SpecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{32}
}
func (m *SpecResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpecResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecResponse.Merge(m, src)
}
func (m *SpecResponse) XXX_Size() int {
	return m.Size()
}
func (m *SpecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SpecResponse proto.InternalMessageInfo

func (m *SpecResponse) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type DepositContractResponse struct {
	Data                 *DepositContract `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DepositContractResponse) Reset()         { *m = DepositContractResponse{} }
func (m *DepositContractResponse) String() string { return proto.CompactTextString(m) }
func (*DepositContractResponse) ProtoMessage()    {}
func (*DepositContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{33}
}
func (m *DepositContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositContractResponse.Merge(m, src)
}
func (m *DepositContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *DepositContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DepositContractResponse proto.InternalMessageInfo

func (m *DepositContractResponse) GetData() *DepositContract {
	if m != nil {
		return m.Data
	}
	return nil
}

type DepositContract struct {
	ChainId              uint64   `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepositContract) Reset()         { *m = DepositContract{} }
func (m *DepositContract) String() string { return proto.CompactTextString(m) }
func (*DepositContract) ProtoMessage()    {}
func (*DepositContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_33987dc4bca2a2e7, []int{34}
}
func (m *DepositContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositContract.Merge(m, src)
}
func (m *DepositContract) XXX_Size() int {
	return m.Size()
}
func (m *DepositContract) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositContract.DiscardUnknown(m)
}

var xxx_messageInfo_DepositContract proto.InternalMessageInfo

func (m *DepositContract) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *DepositContract) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*GenesisResponse)(nil), "ethereum.eth.v1.GenesisResponse")
	proto.RegisterType((*GenesisResponse_Genesis)(nil), "ethereum.eth.v1.GenesisResponse.Genesis")
	proto.RegisterType((*StateRequest)(nil), "ethereum.eth.v1.StateRequest")
	proto.RegisterType((*StateRootResponse)(nil), "ethereum.eth.v1.StateRootResponse")
	proto.RegisterType((*StateRootResponse_StateRoot)(nil), "ethereum.eth.v1.StateRootResponse.StateRoot")
	proto.RegisterType((*StateForkResponse)(nil), "ethereum.eth.v1.StateForkResponse")
	proto.RegisterType((*StateFinalityCheckpointResponse)(nil), "ethereum.eth.v1.StateFinalityCheckpointResponse")
	proto.RegisterType((*StateFinalityCheckpointResponse_StateFinalityCheckpoint)(nil), "ethereum.eth.v1.StateFinalityCheckpointResponse.StateFinalityCheckpoint")
	proto.RegisterType((*StateValidatorsRequest)(nil), "ethereum.eth.v1.StateValidatorsRequest")
	proto.RegisterType((*ValidatorBalancesRequest)(nil), "ethereum.eth.v1.ValidatorBalancesRequest")
	proto.RegisterType((*StateValidatorsResponse)(nil), "ethereum.eth.v1.StateValidatorsResponse")
	proto.RegisterType((*ValidatorBalancesResponse)(nil), "ethereum.eth.v1.ValidatorBalancesResponse")
	proto.RegisterType((*ValidatorBalance)(nil), "ethereum.eth.v1.ValidatorBalance")
	proto.RegisterType((*StateValidatorRequest)(nil), "ethereum.eth.v1.StateValidatorRequest")
	proto.RegisterType((*StateValidatorResponse)(nil), "ethereum.eth.v1.StateValidatorResponse")
	proto.RegisterType((*StateCommitteesRequest)(nil), "ethereum.eth.v1.StateCommitteesRequest")
	proto.RegisterType((*StateCommitteesResponse)(nil), "ethereum.eth.v1.StateCommitteesResponse")
	proto.RegisterType((*BlockAttestationsResponse)(nil), "ethereum.eth.v1.BlockAttestationsResponse")
	proto.RegisterType((*BlockRootContainer)(nil), "ethereum.eth.v1.BlockRootContainer")
	proto.RegisterType((*BlockRootResponse)(nil), "ethereum.eth.v1.BlockRootResponse")
	proto.RegisterType((*BlockHeadersRequest)(nil), "ethereum.eth.v1.BlockHeadersRequest")
	proto.RegisterType((*BlockHeadersResponse)(nil), "ethereum.eth.v1.BlockHeadersResponse")
	proto.RegisterType((*BlockRequest)(nil), "ethereum.eth.v1.BlockRequest")
	proto.RegisterType((*BlockHeaderResponse)(nil), "ethereum.eth.v1.BlockHeaderResponse")
	proto.RegisterType((*BlockHeaderContainer)(nil), "ethereum.eth.v1.BlockHeaderContainer")
	proto.RegisterType((*BeaconBlockHeaderContainer)(nil), "ethereum.eth.v1.BeaconBlockHeaderContainer")
	proto.RegisterType((*BlockResponse)(nil), "ethereum.eth.v1.BlockResponse")
	proto.RegisterType((*BeaconBlockContainer)(nil), "ethereum.eth.v1.BeaconBlockContainer")
	proto.RegisterType((*AttestationsPoolRequest)(nil), "ethereum.eth.v1.AttestationsPoolRequest")
	proto.RegisterType((*SubmitAttestationsRequest)(nil), "ethereum.eth.v1.SubmitAttestationsRequest")
	proto.RegisterType((*AttestationsPoolResponse)(nil), "ethereum.eth.v1.AttestationsPoolResponse")
	proto.RegisterType((*AttesterSlashingsPoolResponse)(nil), "ethereum.eth.v1.AttesterSlashingsPoolResponse")
	proto.RegisterType((*ProposerSlashingPoolResponse)(nil), "ethereum.eth.v1.ProposerSlashingPoolResponse")
	proto.RegisterType((*VoluntaryExitsPoolResponse)(nil), "ethereum.eth.v1.VoluntaryExitsPoolResponse")
	proto.RegisterType((*ForkScheduleResponse)(nil), "ethereum.eth.v1.ForkScheduleResponse")
	proto.RegisterType((*SpecResponse)(nil), "ethereum.eth.v1.SpecResponse")
	proto.RegisterMapType((map[string]string)(nil), "ethereum.eth.v1.SpecResponse.DataEntry")
	proto.RegisterType((*DepositContractResponse)(nil), "ethereum.eth.v1.DepositContractResponse")
	proto.RegisterType((*DepositContract)(nil), "ethereum.eth.v1.DepositContract")
}

func init() { proto.RegisterFile("eth/v1/beacon_chain_service.proto", fileDescriptor_33987dc4bca2a2e7) }

var fileDescriptor_33987dc4bca2a2e7 = []byte{
	// 2068 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcd, 0x6f, 0x1b, 0xc7,
	0x15, 0xc7, 0x4a, 0x8a, 0x65, 0x3e, 0x31, 0x96, 0x3c, 0xd6, 0x27, 0x2d, 0xeb, 0x63, 0x6d, 0xc5,
	0x54, 0x6c, 0x91, 0xb6, 0x1c, 0xdb, 0xf1, 0x57, 0x91, 0x50, 0x51, 0x64, 0x19, 0x2e, 0xaa, 0xac,
	0x1a, 0x1f, 0x5a, 0x17, 0xc4, 0x72, 0x39, 0x22, 0xb7, 0x22, 0x77, 0xb6, 0x3b, 0x43, 0x22, 0xb2,
	0x61, 0x38, 0x48, 0x0b, 0x14, 0x68, 0x6f, 0x4d, 0x0b, 0xb4, 0xb7, 0x00, 0xbd, 0xf4, 0xe3, 0x5f,
	0xe8, 0x1f, 0x50, 0xf4, 0x14, 0xa0, 0x87, 0xde, 0x84, 0xc2, 0xe8, 0xa9, 0xe8, 0x29, 0xb7, 0xfa,
	0x54, 0xcc, 0xec, 0xec, 0xf7, 0xae, 0x96, 0x74, 0x73, 0xe3, 0xec, 0xbc, 0xf7, 0x7b, 0xbf, 0xf7,
	0xdb, 0xd9, 0x37, 0xef, 0x11, 0x56, 0x31, 0x6b, 0x57, 0xfb, 0xd7, 0xab, 0x0d, 0xac, 0x1b, 0xc4,
	0xaa, 0x1b, 0x6d, 0xdd, 0xb4, 0xea, 0x14, 0x3b, 0x7d, 0xd3, 0xc0, 0x15, 0xdb, 0x21, 0x8c, 0xa0,
	0x49, 0xcc, 0xda, 0xd8, 0xc1, 0xbd, 0x6e, 0x05, 0xb3, 0x76, 0xa5, 0x7f, 0xbd, 0xb4, 0xd1, 0x32,
	0x59, 0xbb, 0xd7, 0xa8, 0x18, 0xa4, 0x5b, 0x6d, 0x91, 0x16, 0xa9, 0x0a, 0xbb, 0x46, 0xef, 0x40,
	0xac, 0xc4, 0x42, 0xfc, 0x72, 0xfd, 0x4b, 0x8b, 0x2d, 0x42, 0x5a, 0x1d, 0x5c, 0xd5, 0x6d, 0xb3,
	0xaa, 0x5b, 0x16, 0x61, 0x3a, 0x33, 0x89, 0x45, 0xe5, 0xee, 0x79, 0xb9, 0xeb, 0x63, 0xe0, 0xae,
	0xcd, 0x8e, 0xe4, 0xe6, 0x72, 0x7c, 0x93, 0x99, 0x5d, 0x4c, 0x99, 0xde, 0xb5, 0xa5, 0xc1, 0xbc,
	0xa4, 0xaf, 0x33, 0xc6, 0x9f, 0x73, 0x60, 0xb9, 0xb3, 0x10, 0x4d, 0xac, 0xd1, 0x21, 0xc6, 0x61,
	0xfa, 0x16, 0xf7, 0x93, 0xb9, 0x96, 0x66, 0xe5, 0x56, 0x5f, 0xef, 0x98, 0x4d, 0x9d, 0x11, 0xc7,
	0x7d, 0xae, 0xfe, 0x71, 0x04, 0x26, 0x77, 0xb0, 0x85, 0xa9, 0x49, 0x35, 0x4c, 0x6d, 0x62, 0x51,
	0x8c, 0xee, 0xc3, 0x58, 0x53, 0x67, 0xfa, 0xbc, 0xb2, 0xa2, 0x94, 0x27, 0x36, 0xcb, 0x95, 0x98,
	0x4c, 0x95, 0x98, 0xbd, 0xbf, 0x16, 0x5e, 0xa5, 0x7f, 0x28, 0x30, 0x2e, 0x9f, 0xa0, 0x07, 0x50,
	0x6c, 0xb9, 0x3f, 0xeb, 0x3c, 0x41, 0x89, 0x58, 0xaa, 0xb8, 0xd9, 0x57, 0xbc, 0xec, 0x2b, 0xdf,
	0xf7, 0xb2, 0xd7, 0x26, 0xa4, 0x3d, 0x7f, 0x82, 0x76, 0x61, 0xce, 0x73, 0xf7, 0x79, 0xd3, 0xba,
	0x43, 0x08, 0x9b, 0x1f, 0x59, 0x51, 0xca, 0xc5, 0xda, 0xd9, 0x6f, 0x8e, 0x97, 0xdf, 0xa6, 0xf4,
	0xd9, 0x06, 0x35, 0x9f, 0xe1, 0xbb, 0xea, 0x8d, 0x4d, 0x55, 0x9b, 0x91, 0x1e, 0x4f, 0x7c, 0x07,
	0x8d, 0x10, 0x86, 0x6a, 0x30, 0xed, 0x41, 0x1d, 0x10, 0xe7, 0xb0, 0xde, 0xc7, 0x0e, 0x35, 0x89,
	0x35, 0x3f, 0x2a, 0x70, 0xa6, 0xbe, 0x39, 0x5e, 0x2e, 0x06, 0x38, 0xef, 0xa9, 0x1a, 0x92, 0xd6,
	0x1f, 0x13, 0xe7, 0xf0, 0x89, 0x6b, 0xab, 0xae, 0x43, 0x71, 0x9f, 0x4b, 0xaa, 0xe1, 0x9f, 0xf4,
	0x30, 0x65, 0x68, 0x01, 0x4e, 0x0b, 0x89, 0xeb, 0x66, 0x53, 0x64, 0x56, 0xd4, 0xc6, 0xc5, 0x7a,
	0xb7, 0xa9, 0xfe, 0x5a, 0x81, 0xb3, 0xae, 0x2d, 0x21, 0xcc, 0x17, 0xf6, 0x83, 0x88, 0xb0, 0x57,
	0x13, 0xc2, 0x26, 0x3c, 0x42, 0x4f, 0x5c, 0x71, 0x1f, 0x40, 0xc1, 0x7f, 0x84, 0xae, 0x01, 0xb8,
	0xf1, 0x85, 0x22, 0x4a, 0x96, 0x22, 0x05, 0xea, 0x79, 0xa8, 0xdf, 0x91, 0xac, 0x78, 0x56, 0x3e,
	0xab, 0xf5, 0x08, 0xab, 0x99, 0x04, 0x2b, 0x61, 0x2c, 0x4c, 0xd4, 0xff, 0x8c, 0xc0, 0xb2, 0x0b,
	0x60, 0x5a, 0x7a, 0xc7, 0x64, 0x47, 0x5b, 0x6d, 0x6c, 0x1c, 0xda, 0xc4, 0xb4, 0x82, 0x24, 0x9f,
	0x46, 0xe0, 0x1e, 0xa6, 0x27, 0x99, 0xed, 0x9f, 0xb9, 0xef, 0x0a, 0xf0, 0x6f, 0x05, 0xe6, 0x32,
	0x2c, 0xd0, 0x23, 0x40, 0xb6, 0x83, 0xfb, 0x26, 0xe9, 0xd1, 0xfa, 0x8f, 0x7b, 0x94, 0x99, 0x07,
	0x26, 0x6e, 0x4a, 0x1e, 0xe7, 0x13, 0x3c, 0x42, 0xd0, 0x67, 0x3d, 0xb7, 0x47, 0x9e, 0x17, 0x7a,
	0x08, 0x67, 0x8d, 0x9e, 0xe3, 0x60, 0x8b, 0x85, 0xa0, 0x46, 0xf2, 0xa1, 0xa6, 0xa4, 0x57, 0x80,
	0x74, 0x07, 0x0a, 0x07, 0x82, 0xeb, 0x33, 0xdc, 0x14, 0xc7, 0x2d, 0x07, 0x21, 0xb0, 0x56, 0x7f,
	0x08, 0xb3, 0x22, 0xd7, 0xd0, 0x59, 0xce, 0x3d, 0x7a, 0xe8, 0x0c, 0x8c, 0x98, 0x9c, 0xea, 0x68,
	0xb9, 0xa8, 0x8d, 0x98, 0x4d, 0x34, 0x0b, 0xa7, 0xf8, 0x56, 0x8f, 0x8a, 0xe0, 0x05, 0x4d, 0xae,
	0xd4, 0x6d, 0x98, 0xf7, 0x71, 0x6b, 0x7a, 0x47, 0xb7, 0x0c, 0x3c, 0x1c, 0x7c, 0x81, 0xc3, 0xab,
	0x9a, 0x7c, 0x1f, 0x61, 0x8e, 0xf2, 0x24, 0xdc, 0xf6, 0x4f, 0xc2, 0x68, 0x79, 0x62, 0xf3, 0x62,
	0x22, 0x69, 0xdf, 0x65, 0x8b, 0x58, 0x4c, 0x37, 0x2d, 0xec, 0xc8, 0x63, 0xa6, 0xc1, 0x42, 0x0a,
	0x35, 0x89, 0x7a, 0x33, 0x82, 0xba, 0x9a, 0x8d, 0x2a, 0x3d, 0x25, 0x66, 0x0d, 0xa6, 0xe2, 0x3b,
	0x68, 0x1a, 0xde, 0x32, 0xad, 0x26, 0xfe, 0x4c, 0xe4, 0x38, 0xa6, 0xb9, 0x0b, 0x34, 0x0f, 0xe3,
	0x0d, 0xd7, 0x40, 0xbc, 0xf0, 0x31, 0xcd, 0x5b, 0xaa, 0x9f, 0xc2, 0x4c, 0x34, 0xd7, 0x01, 0xf4,
	0x5a, 0x85, 0xa2, 0x5f, 0xbb, 0xea, 0xa6, 0x7b, 0x86, 0x8a, 0xda, 0x84, 0xff, 0x6c, 0xb7, 0xa9,
	0x7e, 0x12, 0x7f, 0xcd, 0x29, 0x0a, 0x2a, 0xc3, 0x29, 0xf8, 0xb5, 0x22, 0x31, 0xb7, 0x48, 0xb7,
	0x6b, 0x32, 0x86, 0x07, 0x7a, 0xb7, 0x5b, 0xf0, 0x16, 0xb6, 0x89, 0xd1, 0x76, 0xf3, 0xae, 0x6d,
	0xbc, 0x3e, 0x5e, 0x5e, 0x0f, 0x5d, 0x89, 0xb6, 0x73, 0x44, 0xbb, 0x3a, 0x33, 0x8d, 0x8e, 0xde,
	0xa0, 0x55, 0xcc, 0xda, 0x9b, 0x1b, 0xec, 0xc8, 0xc6, 0xb4, 0xb2, 0xcd, 0x9d, 0x34, 0xd7, 0x37,
	0x10, 0x75, 0x34, 0x2c, 0xea, 0x07, 0x30, 0x46, 0x3b, 0x84, 0xcd, 0x8f, 0x09, 0xe4, 0xab, 0xaf,
	0x8f, 0x97, 0xcb, 0x83, 0x20, 0xef, 0x77, 0x78, 0xe9, 0xe3, 0x9e, 0xea, 0xae, 0x3c, 0x68, 0xe1,
	0x8c, 0xa4, 0x4c, 0x95, 0xc8, 0x91, 0x28, 0x25, 0xbf, 0x2e, 0xcf, 0x45, 0xaa, 0xf3, 0x5d, 0x58,
	0xa8, 0xf1, 0x6b, 0xf3, 0xc3, 0xe0, 0x72, 0x0d, 0xc0, 0xae, 0x45, 0xc0, 0x16, 0x13, 0x60, 0x21,
	0x27, 0x09, 0x77, 0x0f, 0x90, 0x80, 0xe3, 0x25, 0xd6, 0x7f, 0x11, 0x68, 0x0d, 0xc6, 0x4e, 0xae,
	0xcb, 0x62, 0x5b, 0x7d, 0x0c, 0x67, 0x7d, 0xe7, 0x81, 0xdf, 0x7b, 0x32, 0x9c, 0xa4, 0xf2, 0x4b,
	0x05, 0xce, 0x89, 0xcd, 0x87, 0x58, 0x6f, 0xe2, 0xa0, 0x5e, 0x78, 0xf2, 0x2b, 0x6f, 0x2a, 0x3f,
	0xda, 0x84, 0x09, 0x5b, 0x17, 0xf5, 0xf0, 0xe4, 0xfb, 0x17, 0x5c, 0x2b, 0x71, 0xdd, 0x7c, 0x02,
	0xd3, 0x51, 0x32, 0x32, 0xbd, 0x3b, 0x11, 0x89, 0xd7, 0xd2, 0xd3, 0x73, 0x9d, 0xe2, 0x09, 0xae,
	0x43, 0xd1, 0x4d, 0x3e, 0x38, 0xcd, 0xa2, 0x03, 0x0a, 0x9d, 0x66, 0xb1, 0xde, 0x6d, 0xaa, 0x7b,
	0x11, 0x29, 0x52, 0x82, 0x2b, 0xc3, 0x06, 0xff, 0x4a, 0x89, 0x24, 0x34, 0xec, 0xbb, 0x46, 0x8b,
	0x50, 0x30, 0x74, 0x8b, 0x58, 0xa6, 0xa1, 0x77, 0x84, 0x82, 0xa7, 0xb5, 0xe0, 0x01, 0xda, 0x82,
	0x53, 0x6d, 0x81, 0x2b, 0x6f, 0x89, 0x2b, 0x49, 0x6a, 0xa2, 0xaf, 0x4b, 0x25, 0x28, 0x5d, 0xf9,
	0x01, 0x28, 0x65, 0x9b, 0xa1, 0xfb, 0x30, 0xde, 0xc5, 0x94, 0xea, 0x2d, 0xaf, 0x17, 0x53, 0xf3,
	0x83, 0x68, 0x9e, 0x0b, 0xaa, 0x42, 0x81, 0x9a, 0x2d, 0x4b, 0x67, 0x3d, 0x07, 0xa7, 0x9f, 0x80,
	0x3b, 0xb7, 0x78, 0xbf, 0xe1, 0xd9, 0xa8, 0x8f, 0xe0, 0x6d, 0xf9, 0xb6, 0x06, 0x15, 0x3f, 0x08,
	0x1e, 0x17, 0xff, 0x25, 0x4c, 0xa7, 0xed, 0xa2, 0x5b, 0xf1, 0x94, 0x16, 0x4f, 0x42, 0xfd, 0x3f,
	0x92, 0xf9, 0x8b, 0x02, 0x73, 0xe1, 0x8a, 0xb1, 0x47, 0x48, 0xe7, 0xdb, 0xfb, 0xbe, 0xea, 0x30,
	0x69, 0x78, 0x65, 0xaa, 0xee, 0x16, 0x50, 0xb7, 0x0a, 0xdf, 0x7a, 0x7d, 0xbc, 0xbc, 0x39, 0x08,
	0x98, 0x5f, 0xe5, 0x76, 0xb9, 0xb7, 0x76, 0xc6, 0x88, 0xac, 0x79, 0xd1, 0xdb, 0xef, 0x35, 0xba,
	0x26, 0x8b, 0x56, 0x3d, 0x97, 0xff, 0xf0, 0x45, 0xef, 0x31, 0xcc, 0x27, 0xc5, 0x78, 0xe3, 0x12,
	0xfa, 0x04, 0x2e, 0xb8, 0x0f, 0xb1, 0xb3, 0xdf, 0xd1, 0x69, 0xdb, 0xb4, 0x5a, 0x51, 0xc8, 0xbc,
	0x5b, 0x3f, 0xee, 0x2d, 0x71, 0x3f, 0x85, 0xc5, 0x3d, 0x87, 0xd8, 0x84, 0x06, 0x3b, 0x43, 0xc1,
	0xc6, 0x9d, 0x7d, 0xba, 0xa5, 0x27, 0xa4, 0xd3, 0xb3, 0x98, 0xee, 0x1c, 0x6d, 0x7f, 0x66, 0xb2,
	0x28, 0xd7, 0xf7, 0x23, 0xa0, 0x97, 0x92, 0x1d, 0xb0, 0xd9, 0xb2, 0x70, 0x33, 0x02, 0x20, 0x71,
	0x3f, 0x84, 0x69, 0xde, 0x6d, 0xef, 0x1b, 0x6d, 0xdc, 0xec, 0x75, 0x70, 0x4a, 0x8b, 0x3e, 0x9a,
	0xd7, 0xa2, 0xff, 0x4c, 0x81, 0xe2, 0xbe, 0x8d, 0x0d, 0xdf, 0xf7, 0x5e, 0xc4, 0xf7, 0x72, 0x92,
	0x4d, 0xc8, 0xb8, 0xf2, 0x91, 0xce, 0xf4, 0x6d, 0x8b, 0x39, 0x47, 0xb2, 0xdd, 0xbe, 0x0d, 0x05,
	0xff, 0x11, 0x9a, 0x82, 0xd1, 0x43, 0x7c, 0x24, 0xce, 0x78, 0x41, 0xe3, 0x3f, 0xf9, 0x5d, 0xdf,
	0xd7, 0x3b, 0x3d, 0xf7, 0xfb, 0x29, 0x68, 0xee, 0xe2, 0xee, 0xc8, 0xfb, 0x8a, 0xfa, 0x3d, 0x98,
	0xfb, 0x08, 0xdb, 0x84, 0x9a, 0xe2, 0x8a, 0x72, 0x74, 0x23, 0xb8, 0xdc, 0xde, 0x8b, 0xd4, 0x80,
	0x95, 0x04, 0xa1, 0xb8, 0x9f, 0x9b, 0xd7, 0xc7, 0x30, 0x19, 0xdb, 0xe0, 0xb5, 0xdf, 0x1d, 0xeb,
	0x65, 0xed, 0x1f, 0xd3, 0xc6, 0xc5, 0x7a, 0xb7, 0xc9, 0x7b, 0x38, 0xbd, 0xd9, 0x74, 0x30, 0xa5,
	0x92, 0x9a, 0xb7, 0xdc, 0xfc, 0x6f, 0x09, 0x26, 0xdc, 0x7a, 0xb0, 0xc5, 0x6d, 0xd1, 0x01, 0xc0,
	0x0e, 0x66, 0xde, 0xc0, 0x3a, 0x9b, 0x18, 0x4d, 0xb7, 0xf9, 0xd4, 0x5e, 0x5a, 0xc9, 0x1b, 0x82,
	0xd5, 0xa5, 0x2f, 0xfe, 0xfe, 0xaf, 0x2f, 0x47, 0xe6, 0xd1, 0x6c, 0x35, 0x32, 0x84, 0x57, 0xe5,
	0x1c, 0x89, 0x3e, 0x57, 0xa0, 0xb8, 0x83, 0x59, 0x30, 0xbd, 0x5d, 0xc8, 0x18, 0xff, 0xdc, 0x2f,
	0xb2, 0xa4, 0xe6, 0x4f, 0x87, 0xea, 0x86, 0x88, 0x79, 0x19, 0xad, 0xc5, 0x62, 0x8a, 0x7e, 0x8e,
	0x56, 0x9f, 0x7b, 0x7d, 0xde, 0x8b, 0xaa, 0xb8, 0x7e, 0xc2, 0x14, 0xf8, 0x89, 0x79, 0x43, 0x0a,
	0xe1, 0xe1, 0x71, 0x08, 0x0a, 0x7c, 0xec, 0x46, 0x7f, 0x50, 0x60, 0x76, 0x07, 0xb3, 0xe4, 0xf0,
	0x46, 0xf3, 0xc8, 0x5c, 0x1b, 0x76, 0x90, 0x54, 0x1f, 0x08, 0x6a, 0xb7, 0xd1, 0xcd, 0x7c, 0x6a,
	0x12, 0xa4, 0x6e, 0x84, 0xf8, 0xfc, 0xde, 0x55, 0xcb, 0x6f, 0xb1, 0xd1, 0x3b, 0xe9, 0x0c, 0xe2,
	0xc3, 0x40, 0xe9, 0x72, 0xae, 0x9d, 0x24, 0x58, 0x13, 0x04, 0xef, 0xa3, 0xbb, 0xb9, 0x04, 0x83,
	0x7f, 0x3f, 0xaa, 0xcf, 0xc3, 0xd3, 0xc4, 0x0b, 0xf4, 0x5b, 0x05, 0xce, 0x3c, 0x36, 0x69, 0x40,
	0x93, 0xa2, 0xbc, 0xf8, 0x5e, 0xd1, 0x2f, 0x95, 0xf3, 0x0d, 0x25, 0xd3, 0x1b, 0x82, 0xe9, 0x06,
	0xba, 0x32, 0x04, 0x53, 0xf4, 0x67, 0x05, 0x66, 0x22, 0xd4, 0xbc, 0x51, 0x0e, 0xad, 0xe7, 0x0e,
	0x6d, 0x3e, 0xc7, 0x77, 0x07, 0x31, 0x95, 0x2c, 0xef, 0x09, 0x96, 0x37, 0xd1, 0x8d, 0xc1, 0x59,
	0xd6, 0x1b, 0x1e, 0xa7, 0xaf, 0xa4, 0x90, 0xc1, 0x78, 0x91, 0x25, 0x64, 0x62, 0xa4, 0xca, 0x12,
	0x32, 0x39, 0xa9, 0x0c, 0x41, 0xd1, 0xbf, 0xbd, 0x69, 0xf5, 0xb9, 0x18, 0xac, 0x5e, 0xf0, 0xef,
	0xf7, 0xcc, 0x0e, 0x66, 0xa1, 0xd6, 0x2c, 0xe5, 0xa3, 0x09, 0x77, 0xc7, 0xa5, 0x4b, 0x27, 0x75,
	0xb7, 0x3e, 0xa9, 0x75, 0x41, 0xea, 0x22, 0x5a, 0x8d, 0x91, 0x72, 0x5b, 0x4a, 0x5a, 0x7d, 0xee,
	0x75, 0xd8, 0x2f, 0xd0, 0x4b, 0x98, 0xe2, 0x22, 0x85, 0xbb, 0x7a, 0x74, 0x62, 0x10, 0x5f, 0xa3,
	0xb5, 0x1c, 0xab, 0x9c, 0x32, 0x2a, 0xb9, 0xa0, 0x43, 0x98, 0x70, 0xbb, 0x18, 0xe1, 0x8d, 0x06,
	0xeb, 0x20, 0x4b, 0x19, 0x65, 0x5d, 0xbd, 0x20, 0xa2, 0xcd, 0xa9, 0x33, 0xb1, 0x68, 0x22, 0x61,
	0x8a, 0x28, 0x9c, 0xf6, 0xf4, 0xce, 0x53, 0x7a, 0x29, 0x6b, 0x5b, 0xe6, 0x55, 0x16, 0x91, 0x54,
	0xb4, 0x92, 0x1a, 0x29, 0x2c, 0xb1, 0xac, 0xd2, 0xfe, 0x88, 0x97, 0x17, 0x59, 0xcd, 0x9e, 0x0e,
	0x73, 0xab, 0x74, 0x22, 0xba, 0x7b, 0x51, 0xfc, 0x4e, 0x7e, 0xb9, 0x89, 0x21, 0x39, 0x8f, 0xcb,
	0xbb, 0xe9, 0xdb, 0x69, 0x73, 0xb6, 0x7a, 0x53, 0x70, 0xaa, 0xa2, 0x8d, 0x5c, 0x4e, 0x7a, 0x98,
	0xc1, 0x6f, 0x14, 0x98, 0xe6, 0xdc, 0x78, 0xc7, 0x15, 0xa1, 0x56, 0x3e, 0xa9, 0xcd, 0x0c, 0x37,
	0xeb, 0xa5, 0xf5, 0x01, 0x2c, 0x73, 0x5e, 0x9b, 0x4d, 0x48, 0x27, 0xca, 0xeb, 0x0b, 0x05, 0x50,
	0xb2, 0xbf, 0x46, 0x49, 0x45, 0x32, 0x9b, 0xf0, 0xcc, 0x53, 0x2a, 0x49, 0xa8, 0xf9, 0x24, 0xbe,
	0x54, 0x60, 0x21, 0x2a, 0x4e, 0xa8, 0x9f, 0xce, 0x6c, 0x6e, 0x2a, 0xb9, 0xdd, 0x74, 0x54, 0x94,
	0x8a, 0xe0, 0x53, 0x46, 0xef, 0x64, 0xf3, 0xc1, 0x4e, 0x9d, 0xfa, 0x71, 0x7f, 0xaa, 0xc0, 0x6c,
	0x38, 0xeb, 0x00, 0x17, 0xe5, 0x37, 0xf2, 0x99, 0xaa, 0x48, 0x16, 0xea, 0xa0, 0x2c, 0x7e, 0x15,
	0xd2, 0x26, 0xde, 0xd6, 0x67, 0x6b, 0xb3, 0x91, 0x3b, 0x12, 0x0c, 0x2e, 0x8d, 0x2d, 0x3d, 0x53,
	0xa5, 0x89, 0xc3, 0xa2, 0xfc, 0x61, 0xe4, 0xcd, 0xa4, 0x49, 0x61, 0xf1, 0x0b, 0x05, 0x66, 0x3d,
	0x69, 0xa2, 0x73, 0x4d, 0xa6, 0x2e, 0xc9, 0x3f, 0x27, 0xb2, 0x07, 0x22, 0xf5, 0x8a, 0xe0, 0xb3,
	0x86, 0x2e, 0xa6, 0xf1, 0xe9, 0x7b, 0x7e, 0x75, 0x2c, 0x22, 0x7e, 0xae, 0xc0, 0x39, 0x57, 0x92,
	0x08, 0x22, 0x1a, 0x68, 0x8e, 0xca, 0x94, 0x44, 0x52, 0x50, 0x07, 0xa2, 0xd0, 0x87, 0x49, 0xde,
	0xa4, 0x86, 0x26, 0xb1, 0x4c, 0x1d, 0xd6, 0x52, 0x67, 0xb1, 0xf8, 0x00, 0xa7, 0x5e, 0x12, 0xe1,
	0x97, 0xd0, 0xa2, 0x17, 0xde, 0x20, 0xd6, 0x81, 0xd9, 0x12, 0x4d, 0x71, 0x9d, 0x7a, 0x41, 0x7e,
	0x04, 0xe3, 0xbc, 0x3f, 0xb7, 0xb1, 0x91, 0x19, 0xef, 0xc2, 0x89, 0xf3, 0x9b, 0x7a, 0x5e, 0xc4,
	0x99, 0x41, 0xe7, 0x62, 0x71, 0x28, 0xc7, 0x7c, 0x09, 0x68, 0x07, 0xb3, 0xf8, 0x14, 0x95, 0x15,
	0xa9, 0x9c, 0x3b, 0x98, 0x79, 0x41, 0x2f, 0x8b, 0xa0, 0xab, 0x68, 0x39, 0x16, 0xb4, 0xe9, 0xda,
	0xd7, 0x0d, 0xe9, 0x50, 0xfb, 0xb9, 0xf2, 0xd7, 0x57, 0x4b, 0xca, 0xd7, 0xaf, 0x96, 0x94, 0x7f,
	0xbe, 0x5a, 0x52, 0xe0, 0x1c, 0x71, 0x5a, 0xf1, 0x20, 0xb5, 0xa9, 0xd0, 0x70, 0xb6, 0xc7, 0x19,
	0xed, 0x29, 0x3f, 0xb8, 0x7a, 0xd2, 0xdf, 0x1f, 0xc2, 0x5b, 0xb7, 0x4d, 0x2a, 0xa3, 0xff, 0x69,
	0x64, 0x72, 0xdb, 0xc3, 0xdc, 0x16, 0x98, 0x7f, 0x0b, 0x9e, 0x3c, 0xdd, 0x66, 0xed, 0xa7, 0xfd,
	0xeb, 0x8d, 0x53, 0x22, 0xd9, 0x1b, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x74, 0x06, 0x3a, 0x78,
	0x26, 0x1e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BeaconChainClient is the client API for BeaconChain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BeaconChainClient interface {
	GetGenesis(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*GenesisResponse, error)
	GetStateRoot(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateRootResponse, error)
	GetStateFork(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateForkResponse, error)
	GetFinalityCheckpoints(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateFinalityCheckpointResponse, error)
	GetValidator(ctx context.Context, in *StateValidatorRequest, opts ...grpc.CallOption) (*StateValidatorResponse, error)
	ListValidators(ctx context.Context, in *StateValidatorsRequest, opts ...grpc.CallOption) (*StateValidatorsResponse, error)
	ListValidatorBalances(ctx context.Context, in *ValidatorBalancesRequest, opts ...grpc.CallOption) (*ValidatorBalancesResponse, error)
	ListCommittees(ctx context.Context, in *StateCommitteesRequest, opts ...grpc.CallOption) (*StateCommitteesResponse, error)
	GetBlockHeader(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockHeaderResponse, error)
	ListBlockHeaders(ctx context.Context, in *BlockHeadersRequest, opts ...grpc.CallOption) (*BlockHeadersResponse, error)
	SubmitBlock(ctx context.Context, in *BeaconBlockContainer, opts ...grpc.CallOption) (*types.Empty, error)
	GetBlock(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	GetBlockRoot(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockRootResponse, error)
	ListBlockAttestations(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockAttestationsResponse, error)
	ListPoolAttestations(ctx context.Context, in *AttestationsPoolRequest, opts ...grpc.CallOption) (*AttestationsPoolResponse, error)
	SubmitAttestations(ctx context.Context, in *SubmitAttestationsRequest, opts ...grpc.CallOption) (*types.Empty, error)
	ListPoolAttesterSlashings(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*AttesterSlashingsPoolResponse, error)
	SubmitAttesterSlashing(ctx context.Context, in *AttesterSlashing, opts ...grpc.CallOption) (*types.Empty, error)
	ListPoolProposerSlashings(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ProposerSlashingPoolResponse, error)
	SubmitProposerSlashing(ctx context.Context, in *ProposerSlashing, opts ...grpc.CallOption) (*types.Empty, error)
	ListPoolVoluntaryExits(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*VoluntaryExitsPoolResponse, error)
	SubmitVoluntaryExit(ctx context.Context, in *SignedVoluntaryExit, opts ...grpc.CallOption) (*types.Empty, error)
	GetForkSchedule(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ForkScheduleResponse, error)
	GetSpec(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*SpecResponse, error)
	GetDepositContract(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*DepositContractResponse, error)
}

type beaconChainClient struct {
	cc *grpc.ClientConn
}

func NewBeaconChainClient(cc *grpc.ClientConn) BeaconChainClient {
	return &beaconChainClient{cc}
}

func (c *beaconChainClient) GetGenesis(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*GenesisResponse, error) {
	out := new(GenesisResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/GetGenesis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) GetStateRoot(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateRootResponse, error) {
	out := new(StateRootResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/GetStateRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) GetStateFork(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateForkResponse, error) {
	out := new(StateForkResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/GetStateFork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) GetFinalityCheckpoints(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateFinalityCheckpointResponse, error) {
	out := new(StateFinalityCheckpointResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/GetFinalityCheckpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) GetValidator(ctx context.Context, in *StateValidatorRequest, opts ...grpc.CallOption) (*StateValidatorResponse, error) {
	out := new(StateValidatorResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/GetValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) ListValidators(ctx context.Context, in *StateValidatorsRequest, opts ...grpc.CallOption) (*StateValidatorsResponse, error) {
	out := new(StateValidatorsResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/ListValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) ListValidatorBalances(ctx context.Context, in *ValidatorBalancesRequest, opts ...grpc.CallOption) (*ValidatorBalancesResponse, error) {
	out := new(ValidatorBalancesResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/ListValidatorBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) ListCommittees(ctx context.Context, in *StateCommitteesRequest, opts ...grpc.CallOption) (*StateCommitteesResponse, error) {
	out := new(StateCommitteesResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/ListCommittees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) GetBlockHeader(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockHeaderResponse, error) {
	out := new(BlockHeaderResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/GetBlockHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) ListBlockHeaders(ctx context.Context, in *BlockHeadersRequest, opts ...grpc.CallOption) (*BlockHeadersResponse, error) {
	out := new(BlockHeadersResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/ListBlockHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) SubmitBlock(ctx context.Context, in *BeaconBlockContainer, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/SubmitBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) GetBlock(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) GetBlockRoot(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockRootResponse, error) {
	out := new(BlockRootResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/GetBlockRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) ListBlockAttestations(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockAttestationsResponse, error) {
	out := new(BlockAttestationsResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/ListBlockAttestations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) ListPoolAttestations(ctx context.Context, in *AttestationsPoolRequest, opts ...grpc.CallOption) (*AttestationsPoolResponse, error) {
	out := new(AttestationsPoolResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/ListPoolAttestations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) SubmitAttestations(ctx context.Context, in *SubmitAttestationsRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/SubmitAttestations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) ListPoolAttesterSlashings(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*AttesterSlashingsPoolResponse, error) {
	out := new(AttesterSlashingsPoolResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/ListPoolAttesterSlashings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) SubmitAttesterSlashing(ctx context.Context, in *AttesterSlashing, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/SubmitAttesterSlashing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) ListPoolProposerSlashings(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ProposerSlashingPoolResponse, error) {
	out := new(ProposerSlashingPoolResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/ListPoolProposerSlashings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) SubmitProposerSlashing(ctx context.Context, in *ProposerSlashing, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/SubmitProposerSlashing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) ListPoolVoluntaryExits(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*VoluntaryExitsPoolResponse, error) {
	out := new(VoluntaryExitsPoolResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/ListPoolVoluntaryExits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) SubmitVoluntaryExit(ctx context.Context, in *SignedVoluntaryExit, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/SubmitVoluntaryExit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) GetForkSchedule(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*ForkScheduleResponse, error) {
	out := new(ForkScheduleResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/GetForkSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) GetSpec(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*SpecResponse, error) {
	out := new(SpecResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/GetSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconChainClient) GetDepositContract(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*DepositContractResponse, error) {
	out := new(DepositContractResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconChain/GetDepositContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeaconChainServer is the server API for BeaconChain service.
type BeaconChainServer interface {
	GetGenesis(context.Context, *types.Empty) (*GenesisResponse, error)
	GetStateRoot(context.Context, *StateRequest) (*StateRootResponse, error)
	GetStateFork(context.Context, *StateRequest) (*StateForkResponse, error)
	GetFinalityCheckpoints(context.Context, *StateRequest) (*StateFinalityCheckpointResponse, error)
	GetValidator(context.Context, *StateValidatorRequest) (*StateValidatorResponse, error)
	ListValidators(context.Context, *StateValidatorsRequest) (*StateValidatorsResponse, error)
	ListValidatorBalances(context.Context, *ValidatorBalancesRequest) (*ValidatorBalancesResponse, error)
	ListCommittees(context.Context, *StateCommitteesRequest) (*StateCommitteesResponse, error)
	GetBlockHeader(context.Context, *BlockRequest) (*BlockHeaderResponse, error)
	ListBlockHeaders(context.Context, *BlockHeadersRequest) (*BlockHeadersResponse, error)
	SubmitBlock(context.Context, *BeaconBlockContainer) (*types.Empty, error)
	GetBlock(context.Context, *BlockRequest) (*BlockResponse, error)
	GetBlockRoot(context.Context, *BlockRequest) (*BlockRootResponse, error)
	ListBlockAttestations(context.Context, *BlockRequest) (*BlockAttestationsResponse, error)
	ListPoolAttestations(context.Context, *AttestationsPoolRequest) (*AttestationsPoolResponse, error)
	SubmitAttestations(context.Context, *SubmitAttestationsRequest) (*types.Empty, error)
	ListPoolAttesterSlashings(context.Context, *types.Empty) (*AttesterSlashingsPoolResponse, error)
	SubmitAttesterSlashing(context.Context, *AttesterSlashing) (*types.Empty, error)
	ListPoolProposerSlashings(context.Context, *types.Empty) (*ProposerSlashingPoolResponse, error)
	SubmitProposerSlashing(context.Context, *ProposerSlashing) (*types.Empty, error)
	ListPoolVoluntaryExits(context.Context, *types.Empty) (*VoluntaryExitsPoolResponse, error)
	SubmitVoluntaryExit(context.Context, *SignedVoluntaryExit) (*types.Empty, error)
	GetForkSchedule(context.Context, *types.Empty) (*ForkScheduleResponse, error)
	GetSpec(context.Context, *types.Empty) (*SpecResponse, error)
	GetDepositContract(context.Context, *types.Empty) (*DepositContractResponse, error)
}

// UnimplementedBeaconChainServer can be embedded to have forward compatible implementations.
type UnimplementedBeaconChainServer struct {
}

func (*UnimplementedBeaconChainServer) GetGenesis(ctx context.Context, req *types.Empty) (*GenesisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenesis not implemented")
}
func (*UnimplementedBeaconChainServer) GetStateRoot(ctx context.Context, req *StateRequest) (*StateRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStateRoot not implemented")
}
func (*UnimplementedBeaconChainServer) GetStateFork(ctx context.Context, req *StateRequest) (*StateForkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStateFork not implemented")
}
func (*UnimplementedBeaconChainServer) GetFinalityCheckpoints(ctx context.Context, req *StateRequest) (*StateFinalityCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinalityCheckpoints not implemented")
}
func (*UnimplementedBeaconChainServer) GetValidator(ctx context.Context, req *StateValidatorRequest) (*StateValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidator not implemented")
}
func (*UnimplementedBeaconChainServer) ListValidators(ctx context.Context, req *StateValidatorsRequest) (*StateValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListValidators not implemented")
}
func (*UnimplementedBeaconChainServer) ListValidatorBalances(ctx context.Context, req *ValidatorBalancesRequest) (*ValidatorBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListValidatorBalances not implemented")
}
func (*UnimplementedBeaconChainServer) ListCommittees(ctx context.Context, req *StateCommitteesRequest) (*StateCommitteesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommittees not implemented")
}
func (*UnimplementedBeaconChainServer) GetBlockHeader(ctx context.Context, req *BlockRequest) (*BlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeader not implemented")
}
func (*UnimplementedBeaconChainServer) ListBlockHeaders(ctx context.Context, req *BlockHeadersRequest) (*BlockHeadersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlockHeaders not implemented")
}
func (*UnimplementedBeaconChainServer) SubmitBlock(ctx context.Context, req *BeaconBlockContainer) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBlock not implemented")
}
func (*UnimplementedBeaconChainServer) GetBlock(ctx context.Context, req *BlockRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedBeaconChainServer) GetBlockRoot(ctx context.Context, req *BlockRequest) (*BlockRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockRoot not implemented")
}
func (*UnimplementedBeaconChainServer) ListBlockAttestations(ctx context.Context, req *BlockRequest) (*BlockAttestationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlockAttestations not implemented")
}
func (*UnimplementedBeaconChainServer) ListPoolAttestations(ctx context.Context, req *AttestationsPoolRequest) (*AttestationsPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPoolAttestations not implemented")
}
func (*UnimplementedBeaconChainServer) SubmitAttestations(ctx context.Context, req *SubmitAttestationsRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAttestations not implemented")
}
func (*UnimplementedBeaconChainServer) ListPoolAttesterSlashings(ctx context.Context, req *types.Empty) (*AttesterSlashingsPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPoolAttesterSlashings not implemented")
}
func (*UnimplementedBeaconChainServer) SubmitAttesterSlashing(ctx context.Context, req *AttesterSlashing) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAttesterSlashing not implemented")
}
func (*UnimplementedBeaconChainServer) ListPoolProposerSlashings(ctx context.Context, req *types.Empty) (*ProposerSlashingPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPoolProposerSlashings not implemented")
}
func (*UnimplementedBeaconChainServer) SubmitProposerSlashing(ctx context.Context, req *ProposerSlashing) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitProposerSlashing not implemented")
}
func (*UnimplementedBeaconChainServer) ListPoolVoluntaryExits(ctx context.Context, req *types.Empty) (*VoluntaryExitsPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPoolVoluntaryExits not implemented")
}
func (*UnimplementedBeaconChainServer) SubmitVoluntaryExit(ctx context.Context, req *SignedVoluntaryExit) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitVoluntaryExit not implemented")
}
func (*UnimplementedBeaconChainServer) GetForkSchedule(ctx context.Context, req *types.Empty) (*ForkScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForkSchedule not implemented")
}
func (*UnimplementedBeaconChainServer) GetSpec(ctx context.Context, req *types.Empty) (*SpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpec not implemented")
}
func (*UnimplementedBeaconChainServer) GetDepositContract(ctx context.Context, req *types.Empty) (*DepositContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepositContract not implemented")
}

func RegisterBeaconChainServer(s *grpc.Server, srv BeaconChainServer) {
	s.RegisterService(&_BeaconChain_serviceDesc, srv)
}

func _BeaconChain_GetGenesis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).GetGenesis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/GetGenesis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).GetGenesis(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_GetStateRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).GetStateRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/GetStateRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).GetStateRoot(ctx, req.(*StateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_GetStateFork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).GetStateFork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/GetStateFork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).GetStateFork(ctx, req.(*StateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_GetFinalityCheckpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).GetFinalityCheckpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/GetFinalityCheckpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).GetFinalityCheckpoints(ctx, req.(*StateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_GetValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).GetValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/GetValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).GetValidator(ctx, req.(*StateValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_ListValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).ListValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/ListValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).ListValidators(ctx, req.(*StateValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_ListValidatorBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatorBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).ListValidatorBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/ListValidatorBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).ListValidatorBalances(ctx, req.(*ValidatorBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_ListCommittees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateCommitteesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).ListCommittees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/ListCommittees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).ListCommittees(ctx, req.(*StateCommitteesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_GetBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).GetBlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/GetBlockHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).GetBlockHeader(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_ListBlockHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).ListBlockHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/ListBlockHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).ListBlockHeaders(ctx, req.(*BlockHeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_SubmitBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeaconBlockContainer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).SubmitBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/SubmitBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).SubmitBlock(ctx, req.(*BeaconBlockContainer))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).GetBlock(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_GetBlockRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).GetBlockRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/GetBlockRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).GetBlockRoot(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_ListBlockAttestations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).ListBlockAttestations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/ListBlockAttestations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).ListBlockAttestations(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_ListPoolAttestations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttestationsPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).ListPoolAttestations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/ListPoolAttestations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).ListPoolAttestations(ctx, req.(*AttestationsPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_SubmitAttestations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitAttestationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).SubmitAttestations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/SubmitAttestations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).SubmitAttestations(ctx, req.(*SubmitAttestationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_ListPoolAttesterSlashings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).ListPoolAttesterSlashings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/ListPoolAttesterSlashings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).ListPoolAttesterSlashings(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_SubmitAttesterSlashing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttesterSlashing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).SubmitAttesterSlashing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/SubmitAttesterSlashing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).SubmitAttesterSlashing(ctx, req.(*AttesterSlashing))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_ListPoolProposerSlashings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).ListPoolProposerSlashings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/ListPoolProposerSlashings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).ListPoolProposerSlashings(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_SubmitProposerSlashing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposerSlashing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).SubmitProposerSlashing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/SubmitProposerSlashing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).SubmitProposerSlashing(ctx, req.(*ProposerSlashing))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_ListPoolVoluntaryExits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).ListPoolVoluntaryExits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/ListPoolVoluntaryExits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).ListPoolVoluntaryExits(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_SubmitVoluntaryExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedVoluntaryExit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).SubmitVoluntaryExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/SubmitVoluntaryExit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).SubmitVoluntaryExit(ctx, req.(*SignedVoluntaryExit))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_GetForkSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).GetForkSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/GetForkSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).GetForkSchedule(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_GetSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).GetSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/GetSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).GetSpec(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconChain_GetDepositContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconChainServer).GetDepositContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconChain/GetDepositContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconChainServer).GetDepositContract(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _BeaconChain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ethereum.eth.v1.BeaconChain",
	HandlerType: (*BeaconChainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGenesis",
			Handler:    _BeaconChain_GetGenesis_Handler,
		},
		{
			MethodName: "GetStateRoot",
			Handler:    _BeaconChain_GetStateRoot_Handler,
		},
		{
			MethodName: "GetStateFork",
			Handler:    _BeaconChain_GetStateFork_Handler,
		},
		{
			MethodName: "GetFinalityCheckpoints",
			Handler:    _BeaconChain_GetFinalityCheckpoints_Handler,
		},
		{
			MethodName: "GetValidator",
			Handler:    _BeaconChain_GetValidator_Handler,
		},
		{
			MethodName: "ListValidators",
			Handler:    _BeaconChain_ListValidators_Handler,
		},
		{
			MethodName: "ListValidatorBalances",
			Handler:    _BeaconChain_ListValidatorBalances_Handler,
		},
		{
			MethodName: "ListCommittees",
			Handler:    _BeaconChain_ListCommittees_Handler,
		},
		{
			MethodName: "GetBlockHeader",
			Handler:    _BeaconChain_GetBlockHeader_Handler,
		},
		{
			MethodName: "ListBlockHeaders",
			Handler:    _BeaconChain_ListBlockHeaders_Handler,
		},
		{
			MethodName: "SubmitBlock",
			Handler:    _BeaconChain_SubmitBlock_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _BeaconChain_GetBlock_Handler,
		},
		{
			MethodName: "GetBlockRoot",
			Handler:    _BeaconChain_GetBlockRoot_Handler,
		},
		{
			MethodName: "ListBlockAttestations",
			Handler:    _BeaconChain_ListBlockAttestations_Handler,
		},
		{
			MethodName: "ListPoolAttestations",
			Handler:    _BeaconChain_ListPoolAttestations_Handler,
		},
		{
			MethodName: "SubmitAttestations",
			Handler:    _BeaconChain_SubmitAttestations_Handler,
		},
		{
			MethodName: "ListPoolAttesterSlashings",
			Handler:    _BeaconChain_ListPoolAttesterSlashings_Handler,
		},
		{
			MethodName: "SubmitAttesterSlashing",
			Handler:    _BeaconChain_SubmitAttesterSlashing_Handler,
		},
		{
			MethodName: "ListPoolProposerSlashings",
			Handler:    _BeaconChain_ListPoolProposerSlashings_Handler,
		},
		{
			MethodName: "SubmitProposerSlashing",
			Handler:    _BeaconChain_SubmitProposerSlashing_Handler,
		},
		{
			MethodName: "ListPoolVoluntaryExits",
			Handler:    _BeaconChain_ListPoolVoluntaryExits_Handler,
		},
		{
			MethodName: "SubmitVoluntaryExit",
			Handler:    _BeaconChain_SubmitVoluntaryExit_Handler,
		},
		{
			MethodName: "GetForkSchedule",
			Handler:    _BeaconChain_GetForkSchedule_Handler,
		},
		{
			MethodName: "GetSpec",
			Handler:    _BeaconChain_GetSpec_Handler,
		},
		{
			MethodName: "GetDepositContract",
			Handler:    _BeaconChain_GetDepositContract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eth/v1/beacon_chain_service.proto",
}

func (m *GenesisResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisResponse_Genesis) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisResponse_Genesis) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisResponse_Genesis) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GenesisForkVersion) > 0 {
		i -= len(m.GenesisForkVersion)
		copy(dAtA[i:], m.GenesisForkVersion)
		i = encodeVarintBeaconChainService(dAtA, i, uint64(len(m.GenesisForkVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GenesisValidatorsRoot) > 0 {
		i -= len(m.GenesisValidatorsRoot)
		copy(dAtA[i:], m.GenesisValidatorsRoot)
		i = encodeVarintBeaconChainService(dAtA, i, uint64(len(m.GenesisValidatorsRoot)))
		i--
		dAtA[i] = 0x12
	}
	if m.GenesisTime != nil {
		{
			size, err := m.GenesisTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StateId) > 0 {
		i -= len(m.StateId)
		copy(dAtA[i:], m.StateId)
		i = encodeVarintBeaconChainService(dAtA, i, uint64(len(m.StateId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StateRootResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateRootResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateRootResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StateRootResponse_StateRoot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateRootResponse_StateRoot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateRootResponse_StateRoot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StateRoot) > 0 {
		i -= len(m.StateRoot)
		copy(dAtA[i:], m.StateRoot)
		i = encodeVarintBeaconChainService(dAtA, i, uint64(len(m.StateRoot)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StateForkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateForkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateForkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StateFinalityCheckpointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateFinalityCheckpointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateFinalityCheckpointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StateFinalityCheckpointResponse_StateFinalityCheckpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateFinalityCheckpointResponse_StateFinalityCheckpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateFinalityCheckpointResponse_StateFinalityCheckpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Finalized != nil {
		{
			size, err := m.Finalized.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CurrentJustified != nil {
		{
			size, err := m.CurrentJustified.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PreviousJustified != nil {
		{
			size, err := m.PreviousJustified.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StateValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateValidatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintBeaconChainService(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Id[iNdEx])
			copy(dAtA[i:], m.Id[iNdEx])
			i = encodeVarintBeaconChainService(dAtA, i, uint64(len(m.Id[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.StateId) > 0 {
		i -= len(m.StateId)
		copy(dAtA[i:], m.StateId)
		i = encodeVarintBeaconChainService(dAtA, i, uint64(len(m.StateId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorBalancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorBalancesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorBalancesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Id[iNdEx])
			copy(dAtA[i:], m.Id[iNdEx])
			i = encodeVarintBeaconChainService(dAtA, i, uint64(len(m.Id[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.StateId) > 0 {
		i -= len(m.StateId)
		copy(dAtA[i:], m.StateId)
		i = encodeVarintBeaconChainService(dAtA, i, uint64(len(m.StateId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StateValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorBalancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorBalancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorBalancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Balance != 0 {
		i = encodeVarintBeaconChainService(dAtA, i, uint64(m.Balance))
		i--
		dAtA[i] = 0x10
	}
	if m.Index != 0 {
		i = encodeVarintBeaconChainService(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StateValidatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateValidatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateValidatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ValidatorId) > 0 {
		i -= len(m.ValidatorId)
		copy(dAtA[i:], m.ValidatorId)
		i = encodeVarintBeaconChainService(dAtA, i, uint64(len(m.ValidatorId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StateId) > 0 {
		i -= len(m.StateId)
		copy(dAtA[i:], m.StateId)
		i = encodeVarintBeaconChainService(dAtA, i, uint64(len(m.StateId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StateValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StateCommitteesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateCommitteesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateCommitteesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Slot != 0 {
		i = encodeVarintBeaconChainService(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x20
	}
	if m.Index != 0 {
		i = encodeVarintBeaconChainService(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if m.Epoch != 0 {
		i = encodeVarintBeaconChainService(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StateId) > 0 {
		i -= len(m.StateId)
		copy(dAtA[i:], m.StateId)
		i = encodeVarintBeaconChainService(dAtA, i, uint64(len(m.StateId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StateCommitteesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateCommitteesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateCommitteesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlockAttestationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockAttestationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockAttestationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlockRootContainer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockRootContainer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockRootContainer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Root) > 0 {
		i -= len(m.Root)
		copy(dAtA[i:], m.Root)
		i = encodeVarintBeaconChainService(dAtA, i, uint64(len(m.Root)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockRootResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockRootResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockRootResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockHeadersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeadersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHeadersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ParentRoot) > 0 {
		i -= len(m.ParentRoot)
		copy(dAtA[i:], m.ParentRoot)
		i = encodeVarintBeaconChainService(dAtA, i, uint64(len(m.ParentRoot)))
		i--
		dAtA[i] = 0x12
	}
	if m.Slot != 0 {
		i = encodeVarintBeaconChainService(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockHeadersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeadersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHeadersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BlockId) > 0 {
		i -= len(m.BlockId)
		copy(dAtA[i:], m.BlockId)
		i = encodeVarintBeaconChainService(dAtA, i, uint64(len(m.BlockId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockHeaderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeaderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHeaderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockHeaderContainer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeaderContainer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHeaderContainer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Canonical {
		i--
		if m.Canonical {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Root) > 0 {
		i -= len(m.Root)
		copy(dAtA[i:], m.Root)
		i = encodeVarintBeaconChainService(dAtA, i, uint64(len(m.Root)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BeaconBlockHeaderContainer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeaconBlockHeaderContainer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeaconBlockHeaderContainer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintBeaconChainService(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BeaconBlockContainer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeaconBlockContainer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeaconBlockContainer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintBeaconChainService(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AttestationsPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestationsPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttestationsPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommitteeIndex != 0 {
		i = encodeVarintBeaconChainService(dAtA, i, uint64(m.CommitteeIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.Slot != 0 {
		i = encodeVarintBeaconChainService(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubmitAttestationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitAttestationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitAttestationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AttestationsPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestationsPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttestationsPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AttesterSlashingsPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttesterSlashingsPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttesterSlashingsPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProposerSlashingPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposerSlashingPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposerSlashingPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VoluntaryExitsPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoluntaryExitsPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoluntaryExitsPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ForkScheduleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForkScheduleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForkScheduleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SpecResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBeaconChainService(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBeaconChainService(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBeaconChainService(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DepositContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconChainService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DepositContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintBeaconChainService(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintBeaconChainService(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBeaconChainService(dAtA []byte, offset int, v uint64) int {
	offset -= sovBeaconChainService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisResponse_Genesis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GenesisTime != nil {
		l = m.GenesisTime.Size()
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	l = len(m.GenesisValidatorsRoot)
	if l > 0 {
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	l = len(m.GenesisForkVersion)
	if l > 0 {
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StateId)
	if l > 0 {
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateRootResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateRootResponse_StateRoot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StateRoot)
	if l > 0 {
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateForkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateFinalityCheckpointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateFinalityCheckpointResponse_StateFinalityCheckpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PreviousJustified != nil {
		l = m.PreviousJustified.Size()
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.CurrentJustified != nil {
		l = m.CurrentJustified.Size()
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.Finalized != nil {
		l = m.Finalized.Size()
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StateId)
	if l > 0 {
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			l = len(b)
			n += 1 + l + sovBeaconChainService(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidatorBalancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StateId)
	if l > 0 {
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if len(m.Id) > 0 {
		for _, s := range m.Id {
			l = len(s)
			n += 1 + l + sovBeaconChainService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovBeaconChainService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidatorBalancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovBeaconChainService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidatorBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovBeaconChainService(uint64(m.Index))
	}
	if m.Balance != 0 {
		n += 1 + sovBeaconChainService(uint64(m.Balance))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateValidatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StateId)
	if l > 0 {
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	l = len(m.ValidatorId)
	if l > 0 {
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateCommitteesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StateId)
	if l > 0 {
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovBeaconChainService(uint64(m.Epoch))
	}
	if m.Index != 0 {
		n += 1 + sovBeaconChainService(uint64(m.Index))
	}
	if m.Slot != 0 {
		n += 1 + sovBeaconChainService(uint64(m.Slot))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateCommitteesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovBeaconChainService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockAttestationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovBeaconChainService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockRootContainer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockRootResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockHeadersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovBeaconChainService(uint64(m.Slot))
	}
	l = len(m.ParentRoot)
	if l > 0 {
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockHeadersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovBeaconChainService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockId)
	if l > 0 {
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockHeaderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockHeaderContainer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.Canonical {
		n += 2
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BeaconBlockHeaderContainer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BeaconBlockContainer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttestationsPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovBeaconChainService(uint64(m.Slot))
	}
	if m.CommitteeIndex != 0 {
		n += 1 + sovBeaconChainService(uint64(m.CommitteeIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubmitAttestationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovBeaconChainService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttestationsPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovBeaconChainService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttesterSlashingsPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovBeaconChainService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProposerSlashingPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovBeaconChainService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoluntaryExitsPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovBeaconChainService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForkScheduleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovBeaconChainService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpecResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBeaconChainService(uint64(len(k))) + 1 + len(v) + sovBeaconChainService(uint64(len(v)))
			n += mapEntrySize + 1 + sovBeaconChainService(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DepositContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DepositContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovBeaconChainService(uint64(m.ChainId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovBeaconChainService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBeaconChainService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBeaconChainService(x uint64) (n int) {
	return sovBeaconChainService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &GenesisResponse_Genesis{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisResponse_Genesis) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Genesis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Genesis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GenesisTime == nil {
				m.GenesisTime = &types.Timestamp{}
			}
			if err := m.GenesisTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisValidatorsRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisValidatorsRoot = append(m.GenesisValidatorsRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.GenesisValidatorsRoot == nil {
				m.GenesisValidatorsRoot = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisForkVersion", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisForkVersion = append(m.GenesisForkVersion[:0], dAtA[iNdEx:postIndex]...)
			if m.GenesisForkVersion == nil {
				m.GenesisForkVersion = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateId = append(m.StateId[:0], dAtA[iNdEx:postIndex]...)
			if m.StateId == nil {
				m.StateId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateRootResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateRootResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateRootResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &StateRootResponse_StateRoot{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateRootResponse_StateRoot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateRoot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateRoot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoot = append(m.StateRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.StateRoot == nil {
				m.StateRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateForkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateForkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateForkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Fork{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateFinalityCheckpointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateFinalityCheckpointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateFinalityCheckpointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &StateFinalityCheckpointResponse_StateFinalityCheckpoint{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateFinalityCheckpointResponse_StateFinalityCheckpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateFinalityCheckpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateFinalityCheckpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousJustified", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousJustified == nil {
				m.PreviousJustified = &Checkpoint{}
			}
			if err := m.PreviousJustified.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentJustified", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentJustified == nil {
				m.CurrentJustified = &Checkpoint{}
			}
			if err := m.CurrentJustified.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finalized", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Finalized == nil {
				m.Finalized = &Checkpoint{}
			}
			if err := m.Finalized.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateId = append(m.StateId[:0], dAtA[iNdEx:postIndex]...)
			if m.StateId == nil {
				m.StateId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, make([]byte, postIndex-iNdEx))
			copy(m.Id[len(m.Id)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorBalancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorBalancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorBalancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateId = append(m.StateId[:0], dAtA[iNdEx:postIndex]...)
			if m.StateId == nil {
				m.StateId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &ValidatorContainer{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorBalancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorBalancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorBalancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &ValidatorBalance{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateValidatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateValidatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateValidatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateId = append(m.StateId[:0], dAtA[iNdEx:postIndex]...)
			if m.StateId == nil {
				m.StateId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorId = append(m.ValidatorId[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidatorId == nil {
				m.ValidatorId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ValidatorContainer{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateCommitteesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateCommitteesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateCommitteesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateId = append(m.StateId[:0], dAtA[iNdEx:postIndex]...)
			if m.StateId == nil {
				m.StateId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= github_com_prysmaticlabs_eth2_types.Epoch(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= github_com_prysmaticlabs_eth2_types.Slot(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateCommitteesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateCommitteesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateCommitteesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Committee{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockAttestationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockAttestationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockAttestationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Attestation{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockRootContainer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockRootContainer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockRootContainer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = append(m.Root[:0], dAtA[iNdEx:postIndex]...)
			if m.Root == nil {
				m.Root = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockRootResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockRootResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockRootResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &BlockRootContainer{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHeadersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeadersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeadersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= github_com_prysmaticlabs_eth2_types.Slot(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentRoot = append(m.ParentRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentRoot == nil {
				m.ParentRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHeadersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeadersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeadersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &BlockHeaderContainer{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockId = append(m.BlockId[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockId == nil {
				m.BlockId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHeaderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeaderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeaderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &BlockHeaderContainer{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHeaderContainer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeaderContainer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeaderContainer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = append(m.Root[:0], dAtA[iNdEx:postIndex]...)
			if m.Root == nil {
				m.Root = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Canonical", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Canonical = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &BeaconBlockHeaderContainer{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeaconBlockHeaderContainer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeaconBlockHeaderContainer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeaconBlockHeaderContainer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &BeaconBlockHeader{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &BeaconBlockContainer{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeaconBlockContainer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeaconBlockContainer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeaconBlockContainer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &BeaconBlock{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttestationsPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestationsPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestationsPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= github_com_prysmaticlabs_eth2_types.Slot(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitteeIndex", wireType)
			}
			m.CommitteeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitteeIndex |= github_com_prysmaticlabs_eth2_types.CommitteeIndex(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitAttestationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitAttestationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitAttestationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Attestation{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttestationsPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestationsPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestationsPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Attestation{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttesterSlashingsPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttesterSlashingsPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttesterSlashingsPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &AttesterSlashing{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposerSlashingPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposerSlashingPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposerSlashingPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &ProposerSlashing{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoluntaryExitsPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoluntaryExitsPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoluntaryExitsPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &SignedVoluntaryExit{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForkScheduleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForkScheduleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForkScheduleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Fork{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBeaconChainService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBeaconChainService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBeaconChainService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBeaconChainService
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBeaconChainService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBeaconChainService
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBeaconChainService
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBeaconChainService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBeaconChainService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DepositContract{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconChainService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconChainService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBeaconChainService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBeaconChainService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBeaconChainService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBeaconChainService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBeaconChainService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBeaconChainService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBeaconChainService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBeaconChainService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBeaconChainService = fmt.Errorf("proto: unexpected end of group")
)
