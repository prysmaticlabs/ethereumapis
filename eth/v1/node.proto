// Copyright 2020 Prysmatic Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package ethereum.eth.v1;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

option csharp_namespace = "Ethereum.Eth.v1";
option go_package = "github.com/prysmaticlabs/ethereumapis/eth/v1";
option java_multiple_files = true;
option java_outer_classname = "BeaconNodeProto";
option java_package = "org.ethereum.eth.v1";
option php_namespace = "Ethereum\\Eth\\v1";

// Beacon chain node API
//
// The beacon chain node API is a set of endpoints to query node information.
service BeaconNode {
  // GetIdentity retrieves data about the node's network presence.
  rpc GetIdentity(google.protobuf.Empty) returns (IdentityResponse) {
    option (google.api.http) = {get: "/eth/v1/node/identity"};
  }

  // GetPeer retrieves data about the given peer.
  rpc GetPeer(PeerRequest) returns (PeerResponse) {
    option (google.api.http) = {get: "/eth/v1/node/peers/{peer_id}"};
  }

  // ListPeers retrieves data about the node's network peers.
  rpc ListPeers(google.protobuf.Empty) returns (PeersResponse) {
    option (google.api.http) = {get: "/eth/v1/node/peers"};
  }

  // GetVersion requests that the beacon node identify information about its implementation in a
  // format similar to a HTTP User-Agent field.
  rpc GetVersion(google.protobuf.Empty) returns (VersionResponse) {
    option (google.api.http) = {get: "/eth/v1/node/version"};
  }

  // GetSyncStatus requests the beacon node to describe if it's currently syncing or not, and
  // if it is, what block it is up to.
  rpc GetSyncStatus(google.protobuf.Empty) returns (SyncingResponse) {
    option (google.api.http) = {get: "/eth/v1/node/syncing"};
  }

  // GetHealth returns node health status in http status codes. Useful for load balancers.
  // Response Usage:
  //    "200":
  //      description: Node is ready
  //    "206":
  //      description: Node is syncing but can serve incomplete data
  //    "503":
  //      description: Node not initialized or having issues
  rpc GetHealth(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {get: "/eth/v1/node/health"};
  }
}

message IdentityResponse {
  Identity data = 1;
}

message Identity {
  // The peer id of the node.
  string peer_id = 1;
  // The latest ENR of the node.
  string enr = 2;
  // All the p2p multiaddresses of the peer, specified as a full multiaddr.
  repeated string p2p_addresses = 3;
  // All the discv5 multiaddresses of the peer, specified as a full multiaddr.
  repeated string discovery_addresses = 4;
  // Additional metadata that the node would like to provide. Includes extra networking information.
  Metadata metadata = 5;
}

message Metadata {
  // Sequence number starts at 0 used to version the node's metadata. If any other field in the local MetaData changes,
  // the node MUST increment seq_number by 1.
  uint64 seq_number = 1;
  // Attnets is a bitvector representing the node's persistent attestation subnet subscriptions.
  bytes attnets = 2 [(gogoproto.moretags) = "ssz-size:\"8\"", (gogoproto.casttype) = "github.com/prysmaticlabs/go-bitfield.Bitvector64"];
}

message PeerRequest {
  // Peer id of the peer requested.
  string peer_id = 1;
}

message PeerResponse {
  Peer data = 1;
}

message PeersResponse {
  repeated Peer data = 1;
}

// Peer provides details of a peer on the network.
message Peer {
  // The peer id of the peer.
  string peer_id = 1;
  // The latest ENR of the peer that's in the record.
  string enr = 2;
  // The address of the peer, as a full multiaddr, for example:
  // /ip4/37.221.192.134/tcp/13000/p2p/16Uiu2HAm8maLMjag1TAUM52zPfmLbVMGFdwUAWgoHu1HDQLR6e17
  string address = 3;
  // The connection state of the peer at the moment of the request. (e.g. Connecting)
  ConnectionState state = 4;
  // The direction of the connection (inbound/outbound).
  PeerDirection direction = 5;
}

// PeerDirection states the direction of the connection to a peer.
enum PeerDirection {
  UNKNOWN = 0;
  INBOUND = 1;
  OUTBOUND = 2;
}

// ConnectionState states the current status of the peer.
enum ConnectionState {
  DISCONNECTED = 0;
  DISCONNECTING = 1;
  CONNECTED = 2;
  CONNECTING = 3;
}

message VersionResponse {
  Version data = 1;
}

// Information about the node version.
message Version {
  // A string that uniquely identifies the node and its version.
  string version = 1;
}

message SyncingResponse {
  SyncInfo data = 1;
}

message SyncInfo {
  // A uint64 states the latest head slot of the current node.
  uint64 head_slot = 1;
  // A uint64 indicating how many slots are left for the beacon node sync to complete.
  uint64 sync_distance = 2;
}
