// Copyright 2020 Prysmatic Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package ethereum.eth.v1;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "eth/v1/attestation.proto";
import "eth/v1/beacon_block.proto";

option csharp_namespace = "Ethereum.Eth.v1";
option go_package = "github.com/prysmaticlabs/ethereumapis/eth/v1";
option java_multiple_files = true;
option java_outer_classname = "BeaconBlocksProto";
option java_package = "org.ethereum.eth.v1";
option php_namespace = "Ethereum\\Eth\\v1";

// Beacon chain API
//
// The beacon chain API can be used to access data relevant to the Ethereum 2.0
// phase 0 beacon chain. 
// 
// This service is defined in the upstream eth2.0-apis repository (eth2.0-APIs/apis/beacon/blocks/).
service BeaconBlocks {
  // Headers retrieves block headers matching given query. By default it will fetch current head slot blocks.
  rpc Headers(BlockHeadersRequest) returns (BlockHeadersResponse) {
    option (google.api.http) = { get: "/eth/v1/beacon/headers" };
  }

  // Header retrieves block header for given block id.
  rpc Header(BlockRequest) returns (BlockHeaderResponse) {
    option (google.api.http) = { get: "/eth/v1/beacon/headers/{block_id}" };
  }

  // Blocks instructs the beacon node to broadcast a newly signed beacon block to the beacon network, to be
  // included in the beacon chain. The beacon node is not required to validate the signed BeaconBlock, and a successful
  // response (20X) only indicates that the broadcast has been successful. The beacon node is expected to integrate the
  // new block into its state, and therefore validate the block internally, however blocks which fail the validation are
  // still broadcast but a different status code is returned (202).
  rpc Blocks(BlockContainer) returns (google.protobuf.Empty) {
    option (google.api.http) = { post: "/eth/v1/beacon/blocks" };
  }

  // Block retrieves block details for given block id.
  rpc Block(BlockRequest) returns (BlockResponse) {
    option (google.api.http) = { get: "/eth/v1/beacon/blocks/{block_id}" };
  }

  // Block retrieves hashTreeRoot of BeaconBlock/BeaconBlockHeader.
  rpc BlockRoot(BlockRequest) returns (BlockRootResponse) {
    option (google.api.http) = { get: "/eth/v1/beacon/blocks/{block_id}/root" };
  }

  // Block retrieves attestation included in requested block.
  rpc BlockAttestations(BlockRequest) returns (BlockAttestationsResponse) {
    option (google.api.http) = { get: "/eth/v1/beacon/blocks/{block_id}/attestations" };
  }
}

message BlockAttestationsResponse {
  repeated Attestation data = 1;
}

message BlockRootContainer {
  bytes root = 1 [(gogoproto.moretags) = "ssz-size:\"32\""];
}
  
message BlockRootResponse {
  BlockRootContainer data = 1;
}

message BlockHeadersRequest {
  uint64 slot = 1;
  bytes parent_root = 2 [(gogoproto.moretags) = "ssz-size:\"32\""];
}

message BlockHeadersResponse {
  repeated BlockHeaderContainer data = 1;
}

message BlockRequest {
  // The block identifier. Can be one of: "head" (canonical head in node's view), "genesis",
  // "finalized", <slot>, <hex encoded blockRoot with 0x prefix>.
  bytes block_id = 1;
}

message BlockHeaderResponse {
  BlockHeaderContainer data = 1;
}

message BlockHeaderContainer {
  bytes root = 1 [(gogoproto.moretags) = "ssz-size:\"32\""];
  bool canonical = 2;
  BlockHeaderMessage header = 3;
}

message BlockHeader {
  BlockHeaderMessage message = 1;
  bytes signature = 2 [(gogoproto.moretags) = "ssz-size:\"96\""];
}

message BlockHeaderMessage {
  uint64 slot = 1;
  uint64 proposer_index = 2;
  bytes parent_root = 3 [(gogoproto.moretags) = "ssz-size:\"32\""];
  bytes state_root = 4 [(gogoproto.moretags) = "ssz-size:\"32\""];
  bytes body_root = 5 [(gogoproto.moretags) = "ssz-size:\"32\""];
}

message BlockResponse {
  BlockContainer data = 1;
}

message BlockContainer {
  BeaconBlock message = 1;
  bytes signature = 2 [(gogoproto.moretags) = "ssz-size:\"96\""];
}
