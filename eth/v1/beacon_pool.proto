// Copyright 2020 Prysmatic Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package ethereum.eth.v1;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "eth/v1/attestation.proto";
import "eth/v1/beacon_block.proto";

option csharp_namespace = "Ethereum.Eth.v1";
option go_package = "github.com/prysmaticlabs/ethereumapis/eth/v1";
option java_multiple_files = true;
option java_outer_classname = "BeaconPoolsProto";
option java_package = "org.ethereum.eth.v1";
option php_namespace = "Ethereum\\Eth\\v1";


// Beacon chain pools API
//
// The beacon chain pools API can be used to access pool data for objects kept in mempools by the requested node.
//
// This service is defined in the upstream eth2.0-apis repository (eth2.0-APIs/apis/beacon/pool/).
service BeaconPools {
  // AttestationsPool retrieves attestations known by the node but
  // not necessarily incorporated into any block
  rpc AttestationsPool(AttestationsPoolRequest) returns (AttestationsPoolResponse) {
    option (google.api.http) = {get: "/eth/v1/beacon/pool/attestations"};
  }

  // PostAttestationsPool submits Attestation object to node. If attestation passes all validation
  // constraints, node MUST publish attestation on appropriate subnet.
  rpc PostAttestationsPool(Attestation) returns (google.protobuf.Empty) {
    option (google.api.http) = {post: "/eth/v1/beacon/pool/attestations"};
  }

  // AttesterSlashingsPool retrieves attester slashings known by the node but
  // not necessarily incorporated into any block
  rpc AttesterSlashingsPool(google.protobuf.Empty) returns (AttesterSlashingsPoolResponse) {
    option (google.api.http) = {get: "/eth/v1/beacon/pool/attester_slashings"};
  }

  // PostAttesterSlashingsPool submits AttesterSlashing object to node's pool and
  // if passes validation node MUST broadcast it to network.
  rpc PostAttesterSlashingsPool(AttesterSlashing) returns (google.protobuf.Empty) {
    option (google.api.http) = {post: "/eth/v1/beacon/pool/attester_slashings"};
  }

  // ProposerSlashingsPool retrieves proposer slashings known by the node
  // but not necessarily incorporated into any block
  rpc ProposerSlashingsPool(google.protobuf.Empty) returns (ProposerSlashingPoolResponse) {
    option (google.api.http) = {get: "/eth/v1/beacon/pool/proposer_slashings"};
  }

  // PostProposerSlashingsPool submits AttesterSlashing object to node's pool and if
  // passes validation node MUST broadcast it to network.
  rpc PostProposerSlashingsPool(ProposerSlashing) returns (google.protobuf.Empty) {
    option (google.api.http) = {post: "/eth/v1/beacon/pool/proposer_slashings"};
  }

  // VoluntaryExitsPool retrieves voluntary exits known by the node but
  // not necessarily incorporated into any block
  rpc VoluntaryExitsPool(google.protobuf.Empty) returns (VoluntaryExitsPoolResponse) {
    option (google.api.http) = {get: "/eth/v1/beacon/pool/voluntary_exits"};
  }

  // PostVoluntaryExitsPool submits SignedVoluntaryExit object to node's pool
  // and if passes validation node MUST broadcast it to network.
  rpc PostVoluntaryExitsPool(SignedVoluntaryExit) returns (google.protobuf.Empty) {
    option (google.api.http) = {post: "/eth/v1/beacon/pool/voluntary_exits"};
  }
}

message AttestationsPoolRequest {
  uint64 slot = 1;
  uint64 committee_index = 2;
}

message AttestationsPoolResponse {
  repeated Attestation data = 1;
}

message AttesterSlashingsPoolResponse {
  repeated AttesterSlashing data = 1;
}

message ProposerSlashingPoolResponse {
  repeated ProposerSlashing data = 1;
}

message VoluntaryExitsPoolResponse {
  repeated SignedVoluntaryExit data = 1;
}