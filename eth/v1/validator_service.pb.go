// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eth/v1/validator_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	github_com_prysmaticlabs_eth2_types "github.com/prysmaticlabs/eth2-types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AttesterDutiesRequest struct {
	Epoch                github_com_prysmaticlabs_eth2_types.Epoch            `protobuf:"varint,1,opt,name=epoch,proto3,casttype=github.com/prysmaticlabs/eth2-types.Epoch" json:"epoch,omitempty"`
	Index                []github_com_prysmaticlabs_eth2_types.ValidatorIndex `protobuf:"varint,2,rep,packed,name=index,proto3,casttype=github.com/prysmaticlabs/eth2-types.ValidatorIndex" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_unrecognized     []byte                                               `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *AttesterDutiesRequest) Reset()         { *m = AttesterDutiesRequest{} }
func (m *AttesterDutiesRequest) String() string { return proto.CompactTextString(m) }
func (*AttesterDutiesRequest) ProtoMessage()    {}
func (*AttesterDutiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8497bbdb5ef97537, []int{0}
}
func (m *AttesterDutiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttesterDutiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttesterDutiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttesterDutiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttesterDutiesRequest.Merge(m, src)
}
func (m *AttesterDutiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *AttesterDutiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AttesterDutiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AttesterDutiesRequest proto.InternalMessageInfo

func (m *AttesterDutiesRequest) GetEpoch() github_com_prysmaticlabs_eth2_types.Epoch {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *AttesterDutiesRequest) GetIndex() []github_com_prysmaticlabs_eth2_types.ValidatorIndex {
	if m != nil {
		return m.Index
	}
	return nil
}

type AttesterDutiesResponse struct {
	Data                 []*AttesterDuty `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AttesterDutiesResponse) Reset()         { *m = AttesterDutiesResponse{} }
func (m *AttesterDutiesResponse) String() string { return proto.CompactTextString(m) }
func (*AttesterDutiesResponse) ProtoMessage()    {}
func (*AttesterDutiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8497bbdb5ef97537, []int{1}
}
func (m *AttesterDutiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttesterDutiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttesterDutiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttesterDutiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttesterDutiesResponse.Merge(m, src)
}
func (m *AttesterDutiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *AttesterDutiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AttesterDutiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AttesterDutiesResponse proto.InternalMessageInfo

func (m *AttesterDutiesResponse) GetData() []*AttesterDuty {
	if m != nil {
		return m.Data
	}
	return nil
}

type AttesterDuty struct {
	Pubkey                  []byte                                             `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty" ssz-size:"48"`
	ValidatorIndex          github_com_prysmaticlabs_eth2_types.ValidatorIndex `protobuf:"varint,2,opt,name=validator_index,json=validatorIndex,proto3,casttype=github.com/prysmaticlabs/eth2-types.ValidatorIndex" json:"validator_index,omitempty"`
	CommitteeIndex          github_com_prysmaticlabs_eth2_types.CommitteeIndex `protobuf:"varint,3,opt,name=committee_index,json=committeeIndex,proto3,casttype=github.com/prysmaticlabs/eth2-types.CommitteeIndex" json:"committee_index,omitempty"`
	CommitteeLength         uint64                                             `protobuf:"varint,4,opt,name=committee_length,json=committeeLength,proto3" json:"committee_length,omitempty"`
	CommitteesAtSlot        uint64                                             `protobuf:"varint,5,opt,name=committees_at_slot,json=committeesAtSlot,proto3" json:"committees_at_slot,omitempty"`
	ValidatorCommitteeIndex github_com_prysmaticlabs_eth2_types.CommitteeIndex `protobuf:"varint,6,opt,name=validator_committee_index,json=validatorCommitteeIndex,proto3,casttype=github.com/prysmaticlabs/eth2-types.CommitteeIndex" json:"validator_committee_index,omitempty"`
	Slot                    github_com_prysmaticlabs_eth2_types.Slot           `protobuf:"varint,7,opt,name=slot,proto3,casttype=github.com/prysmaticlabs/eth2-types.Slot" json:"slot,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                                           `json:"-"`
	XXX_unrecognized        []byte                                             `json:"-"`
	XXX_sizecache           int32                                              `json:"-"`
}

func (m *AttesterDuty) Reset()         { *m = AttesterDuty{} }
func (m *AttesterDuty) String() string { return proto.CompactTextString(m) }
func (*AttesterDuty) ProtoMessage()    {}
func (*AttesterDuty) Descriptor() ([]byte, []int) {
	return fileDescriptor_8497bbdb5ef97537, []int{2}
}
func (m *AttesterDuty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttesterDuty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttesterDuty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttesterDuty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttesterDuty.Merge(m, src)
}
func (m *AttesterDuty) XXX_Size() int {
	return m.Size()
}
func (m *AttesterDuty) XXX_DiscardUnknown() {
	xxx_messageInfo_AttesterDuty.DiscardUnknown(m)
}

var xxx_messageInfo_AttesterDuty proto.InternalMessageInfo

func (m *AttesterDuty) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *AttesterDuty) GetValidatorIndex() github_com_prysmaticlabs_eth2_types.ValidatorIndex {
	if m != nil {
		return m.ValidatorIndex
	}
	return 0
}

func (m *AttesterDuty) GetCommitteeIndex() github_com_prysmaticlabs_eth2_types.CommitteeIndex {
	if m != nil {
		return m.CommitteeIndex
	}
	return 0
}

func (m *AttesterDuty) GetCommitteeLength() uint64 {
	if m != nil {
		return m.CommitteeLength
	}
	return 0
}

func (m *AttesterDuty) GetCommitteesAtSlot() uint64 {
	if m != nil {
		return m.CommitteesAtSlot
	}
	return 0
}

func (m *AttesterDuty) GetValidatorCommitteeIndex() github_com_prysmaticlabs_eth2_types.CommitteeIndex {
	if m != nil {
		return m.ValidatorCommitteeIndex
	}
	return 0
}

func (m *AttesterDuty) GetSlot() github_com_prysmaticlabs_eth2_types.Slot {
	if m != nil {
		return m.Slot
	}
	return 0
}

type ProposerDutiesRequest struct {
	Epoch                github_com_prysmaticlabs_eth2_types.Epoch `protobuf:"varint,1,opt,name=epoch,proto3,casttype=github.com/prysmaticlabs/eth2-types.Epoch" json:"epoch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *ProposerDutiesRequest) Reset()         { *m = ProposerDutiesRequest{} }
func (m *ProposerDutiesRequest) String() string { return proto.CompactTextString(m) }
func (*ProposerDutiesRequest) ProtoMessage()    {}
func (*ProposerDutiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8497bbdb5ef97537, []int{3}
}
func (m *ProposerDutiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposerDutiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposerDutiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposerDutiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposerDutiesRequest.Merge(m, src)
}
func (m *ProposerDutiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProposerDutiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposerDutiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProposerDutiesRequest proto.InternalMessageInfo

func (m *ProposerDutiesRequest) GetEpoch() github_com_prysmaticlabs_eth2_types.Epoch {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type ProposerDutiesResponse struct {
	Data                 []*ProposerDuty `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ProposerDutiesResponse) Reset()         { *m = ProposerDutiesResponse{} }
func (m *ProposerDutiesResponse) String() string { return proto.CompactTextString(m) }
func (*ProposerDutiesResponse) ProtoMessage()    {}
func (*ProposerDutiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8497bbdb5ef97537, []int{4}
}
func (m *ProposerDutiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposerDutiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposerDutiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposerDutiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposerDutiesResponse.Merge(m, src)
}
func (m *ProposerDutiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProposerDutiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposerDutiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProposerDutiesResponse proto.InternalMessageInfo

func (m *ProposerDutiesResponse) GetData() []*ProposerDuty {
	if m != nil {
		return m.Data
	}
	return nil
}

type ProposerDuty struct {
	Pubkey               []byte                                             `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty" ssz-size:"48"`
	ValidatorIndex       github_com_prysmaticlabs_eth2_types.ValidatorIndex `protobuf:"varint,2,opt,name=validator_index,json=validatorIndex,proto3,casttype=github.com/prysmaticlabs/eth2-types.ValidatorIndex" json:"validator_index,omitempty"`
	Slot                 github_com_prysmaticlabs_eth2_types.Slot           `protobuf:"varint,3,opt,name=slot,proto3,casttype=github.com/prysmaticlabs/eth2-types.Slot" json:"slot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *ProposerDuty) Reset()         { *m = ProposerDuty{} }
func (m *ProposerDuty) String() string { return proto.CompactTextString(m) }
func (*ProposerDuty) ProtoMessage()    {}
func (*ProposerDuty) Descriptor() ([]byte, []int) {
	return fileDescriptor_8497bbdb5ef97537, []int{5}
}
func (m *ProposerDuty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposerDuty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposerDuty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposerDuty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposerDuty.Merge(m, src)
}
func (m *ProposerDuty) XXX_Size() int {
	return m.Size()
}
func (m *ProposerDuty) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposerDuty.DiscardUnknown(m)
}

var xxx_messageInfo_ProposerDuty proto.InternalMessageInfo

func (m *ProposerDuty) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *ProposerDuty) GetValidatorIndex() github_com_prysmaticlabs_eth2_types.ValidatorIndex {
	if m != nil {
		return m.ValidatorIndex
	}
	return 0
}

func (m *ProposerDuty) GetSlot() github_com_prysmaticlabs_eth2_types.Slot {
	if m != nil {
		return m.Slot
	}
	return 0
}

type ProposerBlockRequest struct {
	Slot                 github_com_prysmaticlabs_eth2_types.Slot `protobuf:"varint,1,opt,name=slot,proto3,casttype=github.com/prysmaticlabs/eth2-types.Slot" json:"slot,omitempty"`
	RandaoReveal         []byte                                   `protobuf:"bytes,2,opt,name=randao_reveal,json=randaoReveal,proto3" json:"randao_reveal,omitempty" ssz-size:"96"`
	Graffiti             []byte                                   `protobuf:"bytes,3,opt,name=graffiti,proto3" json:"graffiti,omitempty" ssz-size:"32"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *ProposerBlockRequest) Reset()         { *m = ProposerBlockRequest{} }
func (m *ProposerBlockRequest) String() string { return proto.CompactTextString(m) }
func (*ProposerBlockRequest) ProtoMessage()    {}
func (*ProposerBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8497bbdb5ef97537, []int{6}
}
func (m *ProposerBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposerBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposerBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposerBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposerBlockRequest.Merge(m, src)
}
func (m *ProposerBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProposerBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposerBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProposerBlockRequest proto.InternalMessageInfo

func (m *ProposerBlockRequest) GetSlot() github_com_prysmaticlabs_eth2_types.Slot {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *ProposerBlockRequest) GetRandaoReveal() []byte {
	if m != nil {
		return m.RandaoReveal
	}
	return nil
}

func (m *ProposerBlockRequest) GetGraffiti() []byte {
	if m != nil {
		return m.Graffiti
	}
	return nil
}

type ProposerBlockResponse struct {
	Data                 *BeaconBlock `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ProposerBlockResponse) Reset()         { *m = ProposerBlockResponse{} }
func (m *ProposerBlockResponse) String() string { return proto.CompactTextString(m) }
func (*ProposerBlockResponse) ProtoMessage()    {}
func (*ProposerBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8497bbdb5ef97537, []int{7}
}
func (m *ProposerBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposerBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposerBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposerBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposerBlockResponse.Merge(m, src)
}
func (m *ProposerBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProposerBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposerBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProposerBlockResponse proto.InternalMessageInfo

func (m *ProposerBlockResponse) GetData() *BeaconBlock {
	if m != nil {
		return m.Data
	}
	return nil
}

type AttestationDataRequest struct {
	Slot                 github_com_prysmaticlabs_eth2_types.Slot           `protobuf:"varint,1,opt,name=slot,proto3,casttype=github.com/prysmaticlabs/eth2-types.Slot" json:"slot,omitempty"`
	CommitteeIndex       github_com_prysmaticlabs_eth2_types.CommitteeIndex `protobuf:"varint,2,opt,name=committee_index,json=committeeIndex,proto3,casttype=github.com/prysmaticlabs/eth2-types.CommitteeIndex" json:"committee_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *AttestationDataRequest) Reset()         { *m = AttestationDataRequest{} }
func (m *AttestationDataRequest) String() string { return proto.CompactTextString(m) }
func (*AttestationDataRequest) ProtoMessage()    {}
func (*AttestationDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8497bbdb5ef97537, []int{8}
}
func (m *AttestationDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestationDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestationDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttestationDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestationDataRequest.Merge(m, src)
}
func (m *AttestationDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *AttestationDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestationDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AttestationDataRequest proto.InternalMessageInfo

func (m *AttestationDataRequest) GetSlot() github_com_prysmaticlabs_eth2_types.Slot {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *AttestationDataRequest) GetCommitteeIndex() github_com_prysmaticlabs_eth2_types.CommitteeIndex {
	if m != nil {
		return m.CommitteeIndex
	}
	return 0
}

type AttestationDataResponse struct {
	Data                 *AttestationData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AttestationDataResponse) Reset()         { *m = AttestationDataResponse{} }
func (m *AttestationDataResponse) String() string { return proto.CompactTextString(m) }
func (*AttestationDataResponse) ProtoMessage()    {}
func (*AttestationDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8497bbdb5ef97537, []int{9}
}
func (m *AttestationDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestationDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestationDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttestationDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestationDataResponse.Merge(m, src)
}
func (m *AttestationDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *AttestationDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestationDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AttestationDataResponse proto.InternalMessageInfo

func (m *AttestationDataResponse) GetData() *AttestationData {
	if m != nil {
		return m.Data
	}
	return nil
}

type AggregateAttestationRequest struct {
	AttestationDataRoot  []byte                                   `protobuf:"bytes,1,opt,name=attestation_data_root,json=attestationDataRoot,proto3" json:"attestation_data_root,omitempty" ssz-size:"32"`
	Slot                 github_com_prysmaticlabs_eth2_types.Slot `protobuf:"varint,2,opt,name=slot,proto3,casttype=github.com/prysmaticlabs/eth2-types.Slot" json:"slot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *AggregateAttestationRequest) Reset()         { *m = AggregateAttestationRequest{} }
func (m *AggregateAttestationRequest) String() string { return proto.CompactTextString(m) }
func (*AggregateAttestationRequest) ProtoMessage()    {}
func (*AggregateAttestationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8497bbdb5ef97537, []int{10}
}
func (m *AggregateAttestationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregateAttestationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggregateAttestationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggregateAttestationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregateAttestationRequest.Merge(m, src)
}
func (m *AggregateAttestationRequest) XXX_Size() int {
	return m.Size()
}
func (m *AggregateAttestationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregateAttestationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AggregateAttestationRequest proto.InternalMessageInfo

func (m *AggregateAttestationRequest) GetAttestationDataRoot() []byte {
	if m != nil {
		return m.AttestationDataRoot
	}
	return nil
}

func (m *AggregateAttestationRequest) GetSlot() github_com_prysmaticlabs_eth2_types.Slot {
	if m != nil {
		return m.Slot
	}
	return 0
}

type AttestationResponse struct {
	Data                 *Attestation `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AttestationResponse) Reset()         { *m = AttestationResponse{} }
func (m *AttestationResponse) String() string { return proto.CompactTextString(m) }
func (*AttestationResponse) ProtoMessage()    {}
func (*AttestationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8497bbdb5ef97537, []int{11}
}
func (m *AttestationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttestationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttestationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttestationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestationResponse.Merge(m, src)
}
func (m *AttestationResponse) XXX_Size() int {
	return m.Size()
}
func (m *AttestationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AttestationResponse proto.InternalMessageInfo

func (m *AttestationResponse) GetData() *Attestation {
	if m != nil {
		return m.Data
	}
	return nil
}

type AggregateAndProofsSubmit struct {
	Data                 []*AggregateAttestationAndProof `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *AggregateAndProofsSubmit) Reset()         { *m = AggregateAndProofsSubmit{} }
func (m *AggregateAndProofsSubmit) String() string { return proto.CompactTextString(m) }
func (*AggregateAndProofsSubmit) ProtoMessage()    {}
func (*AggregateAndProofsSubmit) Descriptor() ([]byte, []int) {
	return fileDescriptor_8497bbdb5ef97537, []int{12}
}
func (m *AggregateAndProofsSubmit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AggregateAndProofsSubmit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AggregateAndProofsSubmit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AggregateAndProofsSubmit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregateAndProofsSubmit.Merge(m, src)
}
func (m *AggregateAndProofsSubmit) XXX_Size() int {
	return m.Size()
}
func (m *AggregateAndProofsSubmit) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregateAndProofsSubmit.DiscardUnknown(m)
}

var xxx_messageInfo_AggregateAndProofsSubmit proto.InternalMessageInfo

func (m *AggregateAndProofsSubmit) GetData() []*AggregateAttestationAndProof {
	if m != nil {
		return m.Data
	}
	return nil
}

type BeaconCommitteeSubscribeSubmit struct {
	Data                 []*BeaconCommitteeSubscribe `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *BeaconCommitteeSubscribeSubmit) Reset()         { *m = BeaconCommitteeSubscribeSubmit{} }
func (m *BeaconCommitteeSubscribeSubmit) String() string { return proto.CompactTextString(m) }
func (*BeaconCommitteeSubscribeSubmit) ProtoMessage()    {}
func (*BeaconCommitteeSubscribeSubmit) Descriptor() ([]byte, []int) {
	return fileDescriptor_8497bbdb5ef97537, []int{13}
}
func (m *BeaconCommitteeSubscribeSubmit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeaconCommitteeSubscribeSubmit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeaconCommitteeSubscribeSubmit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeaconCommitteeSubscribeSubmit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconCommitteeSubscribeSubmit.Merge(m, src)
}
func (m *BeaconCommitteeSubscribeSubmit) XXX_Size() int {
	return m.Size()
}
func (m *BeaconCommitteeSubscribeSubmit) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconCommitteeSubscribeSubmit.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconCommitteeSubscribeSubmit proto.InternalMessageInfo

func (m *BeaconCommitteeSubscribeSubmit) GetData() []*BeaconCommitteeSubscribe {
	if m != nil {
		return m.Data
	}
	return nil
}

type BeaconCommitteeSubscribe struct {
	CommitteeIndex       github_com_prysmaticlabs_eth2_types.CommitteeIndex `protobuf:"varint,1,opt,name=committee_index,json=committeeIndex,proto3,casttype=github.com/prysmaticlabs/eth2-types.CommitteeIndex" json:"committee_index,omitempty"`
	CommitteesAtSlot     uint64                                             `protobuf:"varint,2,opt,name=committees_at_slot,json=committeesAtSlot,proto3" json:"committees_at_slot,omitempty"`
	Slot                 github_com_prysmaticlabs_eth2_types.Slot           `protobuf:"varint,3,opt,name=slot,proto3,casttype=github.com/prysmaticlabs/eth2-types.Slot" json:"slot,omitempty"`
	IsAggregator         bool                                               `protobuf:"varint,4,opt,name=is_aggregator,json=isAggregator,proto3" json:"is_aggregator,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *BeaconCommitteeSubscribe) Reset()         { *m = BeaconCommitteeSubscribe{} }
func (m *BeaconCommitteeSubscribe) String() string { return proto.CompactTextString(m) }
func (*BeaconCommitteeSubscribe) ProtoMessage()    {}
func (*BeaconCommitteeSubscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_8497bbdb5ef97537, []int{14}
}
func (m *BeaconCommitteeSubscribe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeaconCommitteeSubscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeaconCommitteeSubscribe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeaconCommitteeSubscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconCommitteeSubscribe.Merge(m, src)
}
func (m *BeaconCommitteeSubscribe) XXX_Size() int {
	return m.Size()
}
func (m *BeaconCommitteeSubscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconCommitteeSubscribe.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconCommitteeSubscribe proto.InternalMessageInfo

func (m *BeaconCommitteeSubscribe) GetCommitteeIndex() github_com_prysmaticlabs_eth2_types.CommitteeIndex {
	if m != nil {
		return m.CommitteeIndex
	}
	return 0
}

func (m *BeaconCommitteeSubscribe) GetCommitteesAtSlot() uint64 {
	if m != nil {
		return m.CommitteesAtSlot
	}
	return 0
}

func (m *BeaconCommitteeSubscribe) GetSlot() github_com_prysmaticlabs_eth2_types.Slot {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *BeaconCommitteeSubscribe) GetIsAggregator() bool {
	if m != nil {
		return m.IsAggregator
	}
	return false
}

func init() {
	proto.RegisterType((*AttesterDutiesRequest)(nil), "ethereum.eth.v1.AttesterDutiesRequest")
	proto.RegisterType((*AttesterDutiesResponse)(nil), "ethereum.eth.v1.AttesterDutiesResponse")
	proto.RegisterType((*AttesterDuty)(nil), "ethereum.eth.v1.AttesterDuty")
	proto.RegisterType((*ProposerDutiesRequest)(nil), "ethereum.eth.v1.ProposerDutiesRequest")
	proto.RegisterType((*ProposerDutiesResponse)(nil), "ethereum.eth.v1.ProposerDutiesResponse")
	proto.RegisterType((*ProposerDuty)(nil), "ethereum.eth.v1.ProposerDuty")
	proto.RegisterType((*ProposerBlockRequest)(nil), "ethereum.eth.v1.ProposerBlockRequest")
	proto.RegisterType((*ProposerBlockResponse)(nil), "ethereum.eth.v1.ProposerBlockResponse")
	proto.RegisterType((*AttestationDataRequest)(nil), "ethereum.eth.v1.AttestationDataRequest")
	proto.RegisterType((*AttestationDataResponse)(nil), "ethereum.eth.v1.AttestationDataResponse")
	proto.RegisterType((*AggregateAttestationRequest)(nil), "ethereum.eth.v1.AggregateAttestationRequest")
	proto.RegisterType((*AttestationResponse)(nil), "ethereum.eth.v1.AttestationResponse")
	proto.RegisterType((*AggregateAndProofsSubmit)(nil), "ethereum.eth.v1.AggregateAndProofsSubmit")
	proto.RegisterType((*BeaconCommitteeSubscribeSubmit)(nil), "ethereum.eth.v1.BeaconCommitteeSubscribeSubmit")
	proto.RegisterType((*BeaconCommitteeSubscribe)(nil), "ethereum.eth.v1.BeaconCommitteeSubscribe")
}

func init() { proto.RegisterFile("eth/v1/validator_service.proto", fileDescriptor_8497bbdb5ef97537) }

var fileDescriptor_8497bbdb5ef97537 = []byte{
	// 1134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xd7, 0x38, 0x4e, 0x88, 0xa6, 0x09, 0xa1, 0x13, 0xd2, 0xb8, 0x69, 0x49, 0xd2, 0xa5, 0x24,
	0x36, 0xc4, 0xbb, 0x8d, 0x1b, 0x45, 0xa5, 0x12, 0x88, 0xb8, 0xb5, 0xa2, 0x8a, 0x4a, 0x44, 0x1b,
	0x89, 0x03, 0x0a, 0x5a, 0xcd, 0xda, 0x93, 0xf5, 0xaa, 0xf6, 0xce, 0xb2, 0x33, 0xb6, 0x70, 0xab,
	0x5e, 0x7a, 0x44, 0x1c, 0x90, 0x7a, 0xe0, 0xc6, 0x91, 0x43, 0xc5, 0x7f, 0xc0, 0x81, 0x1b, 0x42,
	0x9c, 0x90, 0xb8, 0xa2, 0x08, 0x45, 0xfc, 0x05, 0x1c, 0x73, 0x42, 0x3b, 0x3b, 0xfb, 0x65, 0xaf,
	0x3f, 0x48, 0x82, 0xc4, 0xcd, 0x3b, 0xf3, 0xde, 0xef, 0xfd, 0xde, 0x87, 0x7f, 0x6f, 0x17, 0xae,
	0x12, 0xde, 0xd4, 0xba, 0xdb, 0x5a, 0x17, 0xb7, 0xec, 0x06, 0xe6, 0xd4, 0x33, 0x18, 0xf1, 0xba,
	0x76, 0x9d, 0xa8, 0xae, 0x47, 0x39, 0x45, 0x0b, 0x84, 0x37, 0x89, 0x47, 0x3a, 0x6d, 0x95, 0xf0,
	0xa6, 0xda, 0xdd, 0x5e, 0x29, 0x5b, 0x36, 0x6f, 0x76, 0x4c, 0xb5, 0x4e, 0xdb, 0x9a, 0x45, 0x2d,
	0xaa, 0x09, 0x3b, 0xb3, 0x73, 0x2c, 0x9e, 0xc4, 0x83, 0xf8, 0x15, 0xf8, 0xaf, 0xdc, 0xb4, 0x28,
	0xb5, 0x5a, 0x44, 0xc3, 0xae, 0xad, 0x61, 0xc7, 0xa1, 0x1c, 0x73, 0x9b, 0x3a, 0x4c, 0xde, 0xde,
	0x90, 0xb7, 0x11, 0x06, 0x69, 0xbb, 0xbc, 0x27, 0x2f, 0x0b, 0x92, 0x1a, 0xe6, 0x9c, 0xb0, 0xc0,
	0x4f, 0xde, 0x5c, 0x97, 0x37, 0x26, 0xc1, 0x75, 0xea, 0x18, 0x66, 0x8b, 0xd6, 0x9f, 0x04, 0x57,
	0xca, 0x2b, 0x00, 0x97, 0xf6, 0x84, 0x03, 0xf1, 0x1e, 0x76, 0xb8, 0x4d, 0x98, 0x4e, 0xbe, 0xe8,
	0x10, 0xc6, 0xd1, 0x03, 0x38, 0x4d, 0x5c, 0x5a, 0x6f, 0x16, 0xc0, 0x3a, 0x28, 0xe6, 0xab, 0xe5,
	0xb3, 0x93, 0xb5, 0x52, 0x22, 0x17, 0xd7, 0xeb, 0xb1, 0x36, 0xe6, 0x76, 0xbd, 0x85, 0x4d, 0xa6,
	0x11, 0xde, 0xac, 0x94, 0x79, 0xcf, 0x25, 0x4c, 0xad, 0xf9, 0x4e, 0x7a, 0xe0, 0x8b, 0x1e, 0xc3,
	0x69, 0xdb, 0x69, 0x90, 0x2f, 0x0b, 0xb9, 0xf5, 0xa9, 0x62, 0xbe, 0xba, 0x7b, 0x76, 0xb2, 0x56,
	0x99, 0x04, 0xe4, 0xd3, 0xb0, 0xbc, 0x8f, 0x7c, 0x6f, 0x3d, 0x00, 0x51, 0x3e, 0x86, 0xd7, 0xfa,
	0xb9, 0x32, 0x97, 0x3a, 0x8c, 0xa0, 0x6d, 0x98, 0x6f, 0x60, 0x8e, 0x0b, 0x60, 0x7d, 0xaa, 0x78,
	0xa5, 0xf2, 0x96, 0xda, 0xd7, 0x05, 0x35, 0xe1, 0xd6, 0xd3, 0x85, 0xa9, 0xf2, 0x55, 0x1e, 0xce,
	0x25, 0x8f, 0x51, 0x09, 0xce, 0xb8, 0x1d, 0xf3, 0x09, 0xe9, 0x89, 0x8c, 0xe7, 0xaa, 0x57, 0xff,
	0x3e, 0x59, 0x9b, 0x67, 0xec, 0x69, 0x99, 0xd9, 0x4f, 0xc9, 0x7d, 0x65, 0xe7, 0x9e, 0xa2, 0x4b,
	0x03, 0x64, 0xc0, 0x85, 0x78, 0x00, 0xc2, 0x04, 0xc1, 0x05, 0x12, 0x7c, 0xbd, 0x9b, 0x7a, 0xf6,
	0x03, 0xd4, 0x69, 0xbb, 0x6d, 0x73, 0x4e, 0x88, 0x0c, 0x30, 0xf5, 0xef, 0x02, 0x3c, 0x08, 0xdd,
	0x65, 0x80, 0x7a, 0xea, 0x19, 0x95, 0xe0, 0x1b, 0x71, 0x80, 0x16, 0x71, 0x2c, 0xde, 0x2c, 0xe4,
	0xfd, 0x08, 0x7a, 0x1c, 0xf8, 0xb1, 0x38, 0x46, 0x5b, 0x10, 0x45, 0x47, 0xcc, 0xc0, 0xdc, 0x60,
	0x2d, 0xca, 0x0b, 0xd3, 0xc2, 0x38, 0x06, 0x61, 0x7b, 0xfc, 0xb0, 0x45, 0x39, 0xf2, 0xe0, 0xf5,
	0xb8, 0x34, 0xfd, 0x39, 0xcc, 0x5c, 0x28, 0x87, 0xe5, 0x08, 0x38, 0x7d, 0x81, 0x3e, 0x82, 0x79,
	0xc1, 0xe9, 0x35, 0x01, 0xbf, 0x75, 0x76, 0xb2, 0x56, 0x9c, 0x04, 0xde, 0xe7, 0xab, 0x0b, 0x4f,
	0xe5, 0x08, 0x2e, 0x1d, 0x78, 0xd4, 0xa5, 0xec, 0xbf, 0xf8, 0x17, 0xf8, 0x73, 0xdb, 0x8f, 0x3e,
	0xe1, 0xdc, 0x26, 0xdc, 0xc2, 0xb9, 0xfd, 0x03, 0xc0, 0xb9, 0xe4, 0xf1, 0xff, 0x6a, 0x6e, 0xc3,
	0x4e, 0x4c, 0x9d, 0xbb, 0x13, 0x3f, 0x01, 0xf8, 0x66, 0x98, 0x5e, 0xd5, 0x17, 0xaa, 0xb0, 0x13,
	0x21, 0x34, 0x38, 0x2f, 0x34, 0xda, 0x85, 0xf3, 0x1e, 0x76, 0x1a, 0x98, 0x1a, 0x1e, 0xe9, 0x12,
	0xdc, 0x12, 0xb9, 0x0f, 0xd4, 0xeb, 0xfd, 0x5d, 0x45, 0x9f, 0x0b, 0xec, 0x74, 0x61, 0x86, 0xca,
	0x70, 0xd6, 0xf2, 0xf0, 0xf1, 0xb1, 0xcd, 0x6d, 0x91, 0xd8, 0x80, 0xcb, 0xdd, 0x8a, 0xa2, 0x47,
	0x26, 0xca, 0xa3, 0x78, 0x96, 0x64, 0x02, 0xb2, 0xd9, 0x77, 0xa2, 0x66, 0x83, 0xe2, 0x95, 0xca,
	0xcd, 0x81, 0x66, 0x57, 0x85, 0x3c, 0x07, 0x3e, 0x41, 0xaf, 0x7f, 0x04, 0xa1, 0xe2, 0x09, 0x39,
	0x7f, 0x88, 0x39, 0xbe, 0xbc, 0x72, 0x64, 0x68, 0x4c, 0xee, 0x32, 0x35, 0x46, 0xf9, 0x04, 0x2e,
	0x0f, 0x90, 0x97, 0xa5, 0xd8, 0x49, 0x95, 0x62, 0x7d, 0x88, 0x5e, 0xc7, 0x7e, 0x41, 0x39, 0xbe,
	0x07, 0xf0, 0xc6, 0x9e, 0x65, 0x79, 0xc4, 0xc2, 0x9c, 0x24, 0x4c, 0xc2, 0x9a, 0xd4, 0xe0, 0x52,
	0x62, 0xf9, 0x19, 0xbe, 0x8f, 0xe1, 0x51, 0x59, 0xa4, 0xcc, 0xae, 0x2d, 0xe2, 0xbe, 0x40, 0x94,
	0xc6, 0xa5, 0xcd, 0x9d, 0x7b, 0x88, 0xf7, 0xe1, 0x62, 0x8a, 0xde, 0x84, 0x03, 0x90, 0xf4, 0x09,
	0x32, 0xfe, 0x1c, 0x16, 0xe2, 0x84, 0x9d, 0xc6, 0x81, 0x47, 0xe9, 0x31, 0x3b, 0xec, 0x98, 0x6d,
	0x9b, 0xa3, 0xbd, 0x94, 0x76, 0x94, 0x07, 0xd1, 0x32, 0x2a, 0x15, 0x62, 0x48, 0x78, 0x03, 0xae,
	0x06, 0x43, 0x17, 0x75, 0xf2, 0xb0, 0x63, 0xb2, 0xba, 0x67, 0x9b, 0x44, 0x06, 0xf9, 0x20, 0x15,
	0xa4, 0x34, 0x64, 0x66, 0x07, 0xdd, 0x65, 0x80, 0x6f, 0x72, 0xb0, 0x30, 0xcc, 0x24, 0x6b, 0x00,
	0xc1, 0xa5, 0x2e, 0xb9, 0xec, 0xcd, 0x95, 0x1b, 0xb2, 0xb9, 0x2e, 0xac, 0x5d, 0xe8, 0x6d, 0x38,
	0x6f, 0x33, 0x03, 0xcb, 0xba, 0x53, 0x4f, 0x6c, 0xd4, 0x59, 0x7d, 0xce, 0x66, 0x7b, 0xd1, 0x59,
	0xe5, 0xe7, 0x59, 0xb8, 0x10, 0x94, 0x24, 0xd2, 0x52, 0xf4, 0x2d, 0x80, 0x57, 0xf7, 0x09, 0x4f,
	0xbf, 0xdc, 0xa0, 0x8d, 0x51, 0xaf, 0x31, 0xf1, 0x8e, 0x5a, 0xd9, 0x1c, 0x6b, 0x17, 0xcc, 0x9f,
	0xb2, 0xfd, 0xe2, 0xf7, 0xbf, 0x5e, 0xe6, 0xde, 0x43, 0x25, 0xad, 0xff, 0x2d, 0x56, 0x6b, 0x08,
	0x4b, 0xf9, 0xee, 0x48, 0x3c, 0xed, 0x99, 0xd8, 0x5c, 0xcf, 0x43, 0x66, 0xe9, 0xf5, 0x95, 0xc1,
	0x2c, 0x73, 0x7b, 0x66, 0x30, 0xcb, 0xde, 0x83, 0x13, 0x30, 0x73, 0xa5, 0x63, 0xc4, 0xec, 0x05,
	0x80, 0xb3, 0xfb, 0x84, 0x0b, 0xb9, 0x44, 0xef, 0x0c, 0x0d, 0x94, 0xdc, 0x21, 0x2b, 0x1b, 0xe3,
	0xcc, 0x24, 0x9d, 0x4d, 0x41, 0xe7, 0x16, 0x5a, 0x1b, 0xa4, 0x23, 0x5e, 0x9e, 0x99, 0xf6, 0xcc,
	0x6f, 0xf8, 0x73, 0xf4, 0x12, 0x40, 0x14, 0x35, 0x2e, 0x52, 0x11, 0xb4, 0x39, 0x56, 0xd0, 0x24,
	0xa1, 0xe2, 0x78, 0x43, 0x49, 0xe9, 0x5d, 0x41, 0xe9, 0x36, 0x52, 0x06, 0x29, 0xf5, 0x6b, 0x1e,
	0xfa, 0x0e, 0xc0, 0x65, 0x9f, 0x55, 0x86, 0x00, 0xa0, 0xad, 0x89, 0x74, 0x22, 0xe4, 0x77, 0x7b,
	0xa4, 0x46, 0x85, 0xdc, 0x34, 0xc1, 0xad, 0x84, 0x36, 0x33, 0xb8, 0x85, 0xe0, 0x46, 0x82, 0xa5,
	0x5f, 0xb6, 0x42, 0x20, 0x30, 0x83, 0xea, 0x86, 0x4a, 0x23, 0x18, 0xa6, 0x25, 0x70, 0xe5, 0x9a,
	0x1a, 0x7c, 0x10, 0xa9, 0xe1, 0x07, 0x91, 0x5a, 0xf3, 0x3f, 0x88, 0x94, 0x1d, 0x41, 0x48, 0x55,
	0x36, 0x46, 0x12, 0x72, 0x1a, 0x86, 0x2b, 0xd0, 0xee, 0x0b, 0xb1, 0x42, 0x3f, 0x00, 0x78, 0x2b,
	0x00, 0xce, 0x96, 0x2c, 0x57, 0x70, 0xd7, 0x26, 0xd6, 0xc0, 0x31, 0x24, 0x3f, 0x14, 0x24, 0xef,
	0x29, 0x77, 0x32, 0x86, 0x2c, 0xf8, 0x50, 0x8b, 0xd5, 0x91, 0x25, 0x18, 0x48, 0xba, 0xd5, 0xaf,
	0xc1, 0x2f, 0xa7, 0xab, 0xe0, 0xb7, 0xd3, 0x55, 0xf0, 0xe7, 0xe9, 0x2a, 0x80, 0x8b, 0xd4, 0xb3,
	0xfa, 0xa9, 0x55, 0x97, 0x22, 0x8d, 0x39, 0x0c, 0x3e, 0x53, 0x0f, 0x7c, 0x0e, 0x07, 0xe0, 0xb3,
	0xad, 0x51, 0xd2, 0x26, 0x20, 0xb0, 0x6b, 0x33, 0xc9, 0xec, 0x55, 0x6e, 0xa1, 0x16, 0x02, 0xd7,
	0x04, 0xf0, 0xaf, 0xf1, 0xc9, 0x51, 0x8d, 0x37, 0x8f, 0xba, 0xdb, 0xe6, 0x8c, 0x48, 0xef, 0xee,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x59, 0x38, 0xe1, 0x2d, 0x22, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BeaconValidatorClient is the client API for BeaconValidator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BeaconValidatorClient interface {
	GetAttesterDuties(ctx context.Context, in *AttesterDutiesRequest, opts ...grpc.CallOption) (*AttesterDutiesResponse, error)
	GetProposerDuties(ctx context.Context, in *ProposerDutiesRequest, opts ...grpc.CallOption) (*ProposerDutiesResponse, error)
	GetBlock(ctx context.Context, in *ProposerBlockRequest, opts ...grpc.CallOption) (*ProposerBlockResponse, error)
	GetAttestationData(ctx context.Context, in *AttestationDataRequest, opts ...grpc.CallOption) (*AttestationDataResponse, error)
	GetAggregateAttestation(ctx context.Context, in *AggregateAttestationRequest, opts ...grpc.CallOption) (*AttestationResponse, error)
	SubmitAggregateAndProofs(ctx context.Context, in *AggregateAndProofsSubmit, opts ...grpc.CallOption) (*types.Empty, error)
	SubmitBeaconCommitteeSubscription(ctx context.Context, in *BeaconCommitteeSubscribeSubmit, opts ...grpc.CallOption) (*types.Empty, error)
}

type beaconValidatorClient struct {
	cc *grpc.ClientConn
}

func NewBeaconValidatorClient(cc *grpc.ClientConn) BeaconValidatorClient {
	return &beaconValidatorClient{cc}
}

func (c *beaconValidatorClient) GetAttesterDuties(ctx context.Context, in *AttesterDutiesRequest, opts ...grpc.CallOption) (*AttesterDutiesResponse, error) {
	out := new(AttesterDutiesResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconValidator/GetAttesterDuties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconValidatorClient) GetProposerDuties(ctx context.Context, in *ProposerDutiesRequest, opts ...grpc.CallOption) (*ProposerDutiesResponse, error) {
	out := new(ProposerDutiesResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconValidator/GetProposerDuties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconValidatorClient) GetBlock(ctx context.Context, in *ProposerBlockRequest, opts ...grpc.CallOption) (*ProposerBlockResponse, error) {
	out := new(ProposerBlockResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconValidator/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconValidatorClient) GetAttestationData(ctx context.Context, in *AttestationDataRequest, opts ...grpc.CallOption) (*AttestationDataResponse, error) {
	out := new(AttestationDataResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconValidator/GetAttestationData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconValidatorClient) GetAggregateAttestation(ctx context.Context, in *AggregateAttestationRequest, opts ...grpc.CallOption) (*AttestationResponse, error) {
	out := new(AttestationResponse)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconValidator/GetAggregateAttestation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconValidatorClient) SubmitAggregateAndProofs(ctx context.Context, in *AggregateAndProofsSubmit, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconValidator/SubmitAggregateAndProofs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconValidatorClient) SubmitBeaconCommitteeSubscription(ctx context.Context, in *BeaconCommitteeSubscribeSubmit, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ethereum.eth.v1.BeaconValidator/SubmitBeaconCommitteeSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeaconValidatorServer is the server API for BeaconValidator service.
type BeaconValidatorServer interface {
	GetAttesterDuties(context.Context, *AttesterDutiesRequest) (*AttesterDutiesResponse, error)
	GetProposerDuties(context.Context, *ProposerDutiesRequest) (*ProposerDutiesResponse, error)
	GetBlock(context.Context, *ProposerBlockRequest) (*ProposerBlockResponse, error)
	GetAttestationData(context.Context, *AttestationDataRequest) (*AttestationDataResponse, error)
	GetAggregateAttestation(context.Context, *AggregateAttestationRequest) (*AttestationResponse, error)
	SubmitAggregateAndProofs(context.Context, *AggregateAndProofsSubmit) (*types.Empty, error)
	SubmitBeaconCommitteeSubscription(context.Context, *BeaconCommitteeSubscribeSubmit) (*types.Empty, error)
}

// UnimplementedBeaconValidatorServer can be embedded to have forward compatible implementations.
type UnimplementedBeaconValidatorServer struct {
}

func (*UnimplementedBeaconValidatorServer) GetAttesterDuties(ctx context.Context, req *AttesterDutiesRequest) (*AttesterDutiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttesterDuties not implemented")
}
func (*UnimplementedBeaconValidatorServer) GetProposerDuties(ctx context.Context, req *ProposerDutiesRequest) (*ProposerDutiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProposerDuties not implemented")
}
func (*UnimplementedBeaconValidatorServer) GetBlock(ctx context.Context, req *ProposerBlockRequest) (*ProposerBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedBeaconValidatorServer) GetAttestationData(ctx context.Context, req *AttestationDataRequest) (*AttestationDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttestationData not implemented")
}
func (*UnimplementedBeaconValidatorServer) GetAggregateAttestation(ctx context.Context, req *AggregateAttestationRequest) (*AttestationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregateAttestation not implemented")
}
func (*UnimplementedBeaconValidatorServer) SubmitAggregateAndProofs(ctx context.Context, req *AggregateAndProofsSubmit) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAggregateAndProofs not implemented")
}
func (*UnimplementedBeaconValidatorServer) SubmitBeaconCommitteeSubscription(ctx context.Context, req *BeaconCommitteeSubscribeSubmit) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBeaconCommitteeSubscription not implemented")
}

func RegisterBeaconValidatorServer(s *grpc.Server, srv BeaconValidatorServer) {
	s.RegisterService(&_BeaconValidator_serviceDesc, srv)
}

func _BeaconValidator_GetAttesterDuties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttesterDutiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconValidatorServer).GetAttesterDuties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconValidator/GetAttesterDuties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconValidatorServer).GetAttesterDuties(ctx, req.(*AttesterDutiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconValidator_GetProposerDuties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposerDutiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconValidatorServer).GetProposerDuties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconValidator/GetProposerDuties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconValidatorServer).GetProposerDuties(ctx, req.(*ProposerDutiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconValidator_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposerBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconValidatorServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconValidator/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconValidatorServer).GetBlock(ctx, req.(*ProposerBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconValidator_GetAttestationData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttestationDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconValidatorServer).GetAttestationData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconValidator/GetAttestationData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconValidatorServer).GetAttestationData(ctx, req.(*AttestationDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconValidator_GetAggregateAttestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregateAttestationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconValidatorServer).GetAggregateAttestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconValidator/GetAggregateAttestation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconValidatorServer).GetAggregateAttestation(ctx, req.(*AggregateAttestationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconValidator_SubmitAggregateAndProofs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregateAndProofsSubmit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconValidatorServer).SubmitAggregateAndProofs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconValidator/SubmitAggregateAndProofs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconValidatorServer).SubmitAggregateAndProofs(ctx, req.(*AggregateAndProofsSubmit))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconValidator_SubmitBeaconCommitteeSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeaconCommitteeSubscribeSubmit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconValidatorServer).SubmitBeaconCommitteeSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereum.eth.v1.BeaconValidator/SubmitBeaconCommitteeSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconValidatorServer).SubmitBeaconCommitteeSubscription(ctx, req.(*BeaconCommitteeSubscribeSubmit))
	}
	return interceptor(ctx, in, info, handler)
}

var _BeaconValidator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ethereum.eth.v1.BeaconValidator",
	HandlerType: (*BeaconValidatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAttesterDuties",
			Handler:    _BeaconValidator_GetAttesterDuties_Handler,
		},
		{
			MethodName: "GetProposerDuties",
			Handler:    _BeaconValidator_GetProposerDuties_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _BeaconValidator_GetBlock_Handler,
		},
		{
			MethodName: "GetAttestationData",
			Handler:    _BeaconValidator_GetAttestationData_Handler,
		},
		{
			MethodName: "GetAggregateAttestation",
			Handler:    _BeaconValidator_GetAggregateAttestation_Handler,
		},
		{
			MethodName: "SubmitAggregateAndProofs",
			Handler:    _BeaconValidator_SubmitAggregateAndProofs_Handler,
		},
		{
			MethodName: "SubmitBeaconCommitteeSubscription",
			Handler:    _BeaconValidator_SubmitBeaconCommitteeSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eth/v1/validator_service.proto",
}

func (m *AttesterDutiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttesterDutiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttesterDutiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Index) > 0 {
		dAtA2 := make([]byte, len(m.Index)*10)
		var j1 int
		for _, num := range m.Index {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintValidatorService(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintValidatorService(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AttesterDutiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttesterDutiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttesterDutiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValidatorService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AttesterDuty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttesterDuty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttesterDuty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Slot != 0 {
		i = encodeVarintValidatorService(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x38
	}
	if m.ValidatorCommitteeIndex != 0 {
		i = encodeVarintValidatorService(dAtA, i, uint64(m.ValidatorCommitteeIndex))
		i--
		dAtA[i] = 0x30
	}
	if m.CommitteesAtSlot != 0 {
		i = encodeVarintValidatorService(dAtA, i, uint64(m.CommitteesAtSlot))
		i--
		dAtA[i] = 0x28
	}
	if m.CommitteeLength != 0 {
		i = encodeVarintValidatorService(dAtA, i, uint64(m.CommitteeLength))
		i--
		dAtA[i] = 0x20
	}
	if m.CommitteeIndex != 0 {
		i = encodeVarintValidatorService(dAtA, i, uint64(m.CommitteeIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.ValidatorIndex != 0 {
		i = encodeVarintValidatorService(dAtA, i, uint64(m.ValidatorIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintValidatorService(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposerDutiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposerDutiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposerDutiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Epoch != 0 {
		i = encodeVarintValidatorService(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProposerDutiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposerDutiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposerDutiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValidatorService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProposerDuty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposerDuty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposerDuty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Slot != 0 {
		i = encodeVarintValidatorService(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x18
	}
	if m.ValidatorIndex != 0 {
		i = encodeVarintValidatorService(dAtA, i, uint64(m.ValidatorIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintValidatorService(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposerBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposerBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposerBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Graffiti) > 0 {
		i -= len(m.Graffiti)
		copy(dAtA[i:], m.Graffiti)
		i = encodeVarintValidatorService(dAtA, i, uint64(len(m.Graffiti)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RandaoReveal) > 0 {
		i -= len(m.RandaoReveal)
		copy(dAtA[i:], m.RandaoReveal)
		i = encodeVarintValidatorService(dAtA, i, uint64(len(m.RandaoReveal)))
		i--
		dAtA[i] = 0x12
	}
	if m.Slot != 0 {
		i = encodeVarintValidatorService(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProposerBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposerBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposerBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidatorService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AttestationDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestationDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttestationDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommitteeIndex != 0 {
		i = encodeVarintValidatorService(dAtA, i, uint64(m.CommitteeIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.Slot != 0 {
		i = encodeVarintValidatorService(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AttestationDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestationDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttestationDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidatorService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AggregateAttestationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregateAttestationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregateAttestationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Slot != 0 {
		i = encodeVarintValidatorService(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AttestationDataRoot) > 0 {
		i -= len(m.AttestationDataRoot)
		copy(dAtA[i:], m.AttestationDataRoot)
		i = encodeVarintValidatorService(dAtA, i, uint64(len(m.AttestationDataRoot)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AttestationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttestationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttestationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidatorService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AggregateAndProofsSubmit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregateAndProofsSubmit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AggregateAndProofsSubmit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValidatorService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BeaconCommitteeSubscribeSubmit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeaconCommitteeSubscribeSubmit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeaconCommitteeSubscribeSubmit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValidatorService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BeaconCommitteeSubscribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeaconCommitteeSubscribe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeaconCommitteeSubscribe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsAggregator {
		i--
		if m.IsAggregator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Slot != 0 {
		i = encodeVarintValidatorService(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x18
	}
	if m.CommitteesAtSlot != 0 {
		i = encodeVarintValidatorService(dAtA, i, uint64(m.CommitteesAtSlot))
		i--
		dAtA[i] = 0x10
	}
	if m.CommitteeIndex != 0 {
		i = encodeVarintValidatorService(dAtA, i, uint64(m.CommitteeIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintValidatorService(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidatorService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AttesterDutiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovValidatorService(uint64(m.Epoch))
	}
	if len(m.Index) > 0 {
		l = 0
		for _, e := range m.Index {
			l += sovValidatorService(uint64(e))
		}
		n += 1 + sovValidatorService(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttesterDutiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovValidatorService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttesterDuty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovValidatorService(uint64(l))
	}
	if m.ValidatorIndex != 0 {
		n += 1 + sovValidatorService(uint64(m.ValidatorIndex))
	}
	if m.CommitteeIndex != 0 {
		n += 1 + sovValidatorService(uint64(m.CommitteeIndex))
	}
	if m.CommitteeLength != 0 {
		n += 1 + sovValidatorService(uint64(m.CommitteeLength))
	}
	if m.CommitteesAtSlot != 0 {
		n += 1 + sovValidatorService(uint64(m.CommitteesAtSlot))
	}
	if m.ValidatorCommitteeIndex != 0 {
		n += 1 + sovValidatorService(uint64(m.ValidatorCommitteeIndex))
	}
	if m.Slot != 0 {
		n += 1 + sovValidatorService(uint64(m.Slot))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProposerDutiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovValidatorService(uint64(m.Epoch))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProposerDutiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovValidatorService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProposerDuty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovValidatorService(uint64(l))
	}
	if m.ValidatorIndex != 0 {
		n += 1 + sovValidatorService(uint64(m.ValidatorIndex))
	}
	if m.Slot != 0 {
		n += 1 + sovValidatorService(uint64(m.Slot))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProposerBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovValidatorService(uint64(m.Slot))
	}
	l = len(m.RandaoReveal)
	if l > 0 {
		n += 1 + l + sovValidatorService(uint64(l))
	}
	l = len(m.Graffiti)
	if l > 0 {
		n += 1 + l + sovValidatorService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProposerBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovValidatorService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttestationDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovValidatorService(uint64(m.Slot))
	}
	if m.CommitteeIndex != 0 {
		n += 1 + sovValidatorService(uint64(m.CommitteeIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttestationDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovValidatorService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AggregateAttestationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationDataRoot)
	if l > 0 {
		n += 1 + l + sovValidatorService(uint64(l))
	}
	if m.Slot != 0 {
		n += 1 + sovValidatorService(uint64(m.Slot))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttestationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovValidatorService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AggregateAndProofsSubmit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovValidatorService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BeaconCommitteeSubscribeSubmit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovValidatorService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BeaconCommitteeSubscribe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommitteeIndex != 0 {
		n += 1 + sovValidatorService(uint64(m.CommitteeIndex))
	}
	if m.CommitteesAtSlot != 0 {
		n += 1 + sovValidatorService(uint64(m.CommitteesAtSlot))
	}
	if m.Slot != 0 {
		n += 1 + sovValidatorService(uint64(m.Slot))
	}
	if m.IsAggregator {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovValidatorService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidatorService(x uint64) (n int) {
	return sovValidatorService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AttesterDutiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidatorService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttesterDutiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttesterDutiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= github_com_prysmaticlabs_eth2_types.Epoch(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v github_com_prysmaticlabs_eth2_types.ValidatorIndex
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidatorService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_prysmaticlabs_eth2_types.ValidatorIndex(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Index = append(m.Index, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowValidatorService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthValidatorService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthValidatorService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Index) == 0 {
					m.Index = make([]github_com_prysmaticlabs_eth2_types.ValidatorIndex, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_prysmaticlabs_eth2_types.ValidatorIndex
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowValidatorService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_prysmaticlabs_eth2_types.ValidatorIndex(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Index = append(m.Index, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidatorService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttesterDutiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidatorService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttesterDutiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttesterDutiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidatorService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &AttesterDuty{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidatorService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttesterDuty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidatorService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttesterDuty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttesterDuty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidatorService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorIndex", wireType)
			}
			m.ValidatorIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorIndex |= github_com_prysmaticlabs_eth2_types.ValidatorIndex(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitteeIndex", wireType)
			}
			m.CommitteeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitteeIndex |= github_com_prysmaticlabs_eth2_types.CommitteeIndex(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitteeLength", wireType)
			}
			m.CommitteeLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitteeLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitteesAtSlot", wireType)
			}
			m.CommitteesAtSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitteesAtSlot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorCommitteeIndex", wireType)
			}
			m.ValidatorCommitteeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorCommitteeIndex |= github_com_prysmaticlabs_eth2_types.CommitteeIndex(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= github_com_prysmaticlabs_eth2_types.Slot(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidatorService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposerDutiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidatorService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposerDutiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposerDutiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= github_com_prysmaticlabs_eth2_types.Epoch(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidatorService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposerDutiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidatorService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposerDutiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposerDutiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidatorService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &ProposerDuty{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidatorService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposerDuty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidatorService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposerDuty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposerDuty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidatorService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorIndex", wireType)
			}
			m.ValidatorIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorIndex |= github_com_prysmaticlabs_eth2_types.ValidatorIndex(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= github_com_prysmaticlabs_eth2_types.Slot(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidatorService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposerBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidatorService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposerBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposerBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= github_com_prysmaticlabs_eth2_types.Slot(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandaoReveal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidatorService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandaoReveal = append(m.RandaoReveal[:0], dAtA[iNdEx:postIndex]...)
			if m.RandaoReveal == nil {
				m.RandaoReveal = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Graffiti", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidatorService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Graffiti = append(m.Graffiti[:0], dAtA[iNdEx:postIndex]...)
			if m.Graffiti == nil {
				m.Graffiti = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidatorService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposerBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidatorService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposerBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposerBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidatorService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &BeaconBlock{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidatorService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttestationDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidatorService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestationDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestationDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= github_com_prysmaticlabs_eth2_types.Slot(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitteeIndex", wireType)
			}
			m.CommitteeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitteeIndex |= github_com_prysmaticlabs_eth2_types.CommitteeIndex(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidatorService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttestationDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidatorService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestationDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestationDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidatorService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &AttestationData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidatorService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregateAttestationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidatorService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregateAttestationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregateAttestationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationDataRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidatorService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationDataRoot = append(m.AttestationDataRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationDataRoot == nil {
				m.AttestationDataRoot = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= github_com_prysmaticlabs_eth2_types.Slot(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidatorService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttestationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidatorService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttestationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttestationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidatorService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Attestation{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidatorService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregateAndProofsSubmit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidatorService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregateAndProofsSubmit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregateAndProofsSubmit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidatorService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &AggregateAttestationAndProof{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidatorService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeaconCommitteeSubscribeSubmit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidatorService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeaconCommitteeSubscribeSubmit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeaconCommitteeSubscribeSubmit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidatorService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &BeaconCommitteeSubscribe{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidatorService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeaconCommitteeSubscribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidatorService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeaconCommitteeSubscribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeaconCommitteeSubscribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitteeIndex", wireType)
			}
			m.CommitteeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitteeIndex |= github_com_prysmaticlabs_eth2_types.CommitteeIndex(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitteesAtSlot", wireType)
			}
			m.CommitteesAtSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitteesAtSlot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= github_com_prysmaticlabs_eth2_types.Slot(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAggregator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAggregator = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipValidatorService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidatorService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidatorService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidatorService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidatorService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidatorService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValidatorService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValidatorService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValidatorService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidatorService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValidatorService = fmt.Errorf("proto: unexpected end of group")
)
