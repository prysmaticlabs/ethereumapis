// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eth/v1/beacon_state.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_prysmaticlabs_go_bitfield "github.com/prysmaticlabs/go-bitfield"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BeaconState struct {
	GenesisTime                 uint64                                          `protobuf:"varint,1,opt,name=genesis_time,json=genesisTime,proto3" json:"genesis_time,omitempty"`
	GenesisValidatorsRoot       []byte                                          `protobuf:"bytes,2,opt,name=genesis_validators_root,json=genesisValidatorsRoot,proto3" json:"genesis_validators_root,omitempty" ssz-size:"32"`
	Slot                        uint64                                          `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`
	Fork                        *Fork                                           `protobuf:"bytes,4,opt,name=fork,proto3" json:"fork,omitempty"`
	LatestBlockHeader           *BeaconBlockHeader                              `protobuf:"bytes,5,opt,name=latest_block_header,json=latestBlockHeader,proto3" json:"latest_block_header,omitempty"`
	BlockRoots                  [][]byte                                        `protobuf:"bytes,6,rep,name=block_roots,json=blockRoots,proto3" json:"block_roots,omitempty" ssz-size:"8192"`
	StateRoots                  [][]byte                                        `protobuf:"bytes,7,rep,name=state_roots,json=stateRoots,proto3" json:"state_roots,omitempty" ssz-size:"8192"`
	HistoricalRoots             [][]byte                                        `protobuf:"bytes,8,rep,name=historical_roots,json=historicalRoots,proto3" json:"historical_roots,omitempty" ssz-size:"?,32" ssz-max:"16777216"`
	Eth1Data                    *Eth1Data                                       `protobuf:"bytes,9,opt,name=eth1_data,json=eth1Data,proto3" json:"eth1_data,omitempty"`
	Eth1DataVotes               []*Eth1Data                                     `protobuf:"bytes,10,rep,name=eth1_data_votes,json=eth1DataVotes,proto3" json:"eth1_data_votes,omitempty" ssz-max:"1024"`
	Eth1DepositIndex            uint64                                          `protobuf:"varint,11,opt,name=eth1_deposit_index,json=eth1DepositIndex,proto3" json:"eth1_deposit_index,omitempty"`
	Validators                  []*Validator                                    `protobuf:"bytes,12,rep,name=validators,proto3" json:"validators,omitempty" ssz-max:"1099511627776"`
	Balances                    []uint64                                        `protobuf:"varint,13,rep,packed,name=balances,proto3" json:"balances,omitempty" ssz-max:"1099511627776"`
	RandaoMixes                 [][]byte                                        `protobuf:"bytes,14,rep,name=randao_mixes,json=randaoMixes,proto3" json:"randao_mixes,omitempty" ssz-size:"65536"`
	Slashings                   []uint64                                        `protobuf:"varint,15,rep,packed,name=slashings,proto3" json:"slashings,omitempty" ssz-size:"65536"`
	PreviousEpochAttestations   []*PendingAttestation                           `protobuf:"bytes,16,rep,name=previous_epoch_attestations,json=previousEpochAttestations,proto3" json:"previous_epoch_attestations,omitempty" ssz-max:"4096"`
	CurrentEpochAttestations    []*PendingAttestation                           `protobuf:"bytes,17,rep,name=current_epoch_attestations,json=currentEpochAttestations,proto3" json:"current_epoch_attestations,omitempty" ssz-max:"4096"`
	JustificationBits           github_com_prysmaticlabs_go_bitfield.Bitvector4 `protobuf:"bytes,18,opt,name=justification_bits,json=justificationBits,proto3,casttype=github.com/prysmaticlabs/go-bitfield.Bitvector4" json:"justification_bits,omitempty" ssz-size:"1"`
	PreviousJustifiedCheckpoint *Checkpoint                                     `protobuf:"bytes,19,opt,name=previous_justified_checkpoint,json=previousJustifiedCheckpoint,proto3" json:"previous_justified_checkpoint,omitempty"`
	CurrentJustifiedCheckpoint  *Checkpoint                                     `protobuf:"bytes,20,opt,name=current_justified_checkpoint,json=currentJustifiedCheckpoint,proto3" json:"current_justified_checkpoint,omitempty"`
	FinalizedCheckpoint         *Checkpoint                                     `protobuf:"bytes,21,opt,name=finalized_checkpoint,json=finalizedCheckpoint,proto3" json:"finalized_checkpoint,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}                                        `json:"-"`
	XXX_unrecognized            []byte                                          `json:"-"`
	XXX_sizecache               int32                                           `json:"-"`
}

func (m *BeaconState) Reset()         { *m = BeaconState{} }
func (m *BeaconState) String() string { return proto.CompactTextString(m) }
func (*BeaconState) ProtoMessage()    {}
func (*BeaconState) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea3734aa07d7cd6a, []int{0}
}
func (m *BeaconState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeaconState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeaconState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeaconState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconState.Merge(m, src)
}
func (m *BeaconState) XXX_Size() int {
	return m.Size()
}
func (m *BeaconState) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconState.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconState proto.InternalMessageInfo

func (m *BeaconState) GetGenesisTime() uint64 {
	if m != nil {
		return m.GenesisTime
	}
	return 0
}

func (m *BeaconState) GetGenesisValidatorsRoot() []byte {
	if m != nil {
		return m.GenesisValidatorsRoot
	}
	return nil
}

func (m *BeaconState) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *BeaconState) GetFork() *Fork {
	if m != nil {
		return m.Fork
	}
	return nil
}

func (m *BeaconState) GetLatestBlockHeader() *BeaconBlockHeader {
	if m != nil {
		return m.LatestBlockHeader
	}
	return nil
}

func (m *BeaconState) GetBlockRoots() [][]byte {
	if m != nil {
		return m.BlockRoots
	}
	return nil
}

func (m *BeaconState) GetStateRoots() [][]byte {
	if m != nil {
		return m.StateRoots
	}
	return nil
}

func (m *BeaconState) GetHistoricalRoots() [][]byte {
	if m != nil {
		return m.HistoricalRoots
	}
	return nil
}

func (m *BeaconState) GetEth1Data() *Eth1Data {
	if m != nil {
		return m.Eth1Data
	}
	return nil
}

func (m *BeaconState) GetEth1DataVotes() []*Eth1Data {
	if m != nil {
		return m.Eth1DataVotes
	}
	return nil
}

func (m *BeaconState) GetEth1DepositIndex() uint64 {
	if m != nil {
		return m.Eth1DepositIndex
	}
	return 0
}

func (m *BeaconState) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *BeaconState) GetBalances() []uint64 {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *BeaconState) GetRandaoMixes() [][]byte {
	if m != nil {
		return m.RandaoMixes
	}
	return nil
}

func (m *BeaconState) GetSlashings() []uint64 {
	if m != nil {
		return m.Slashings
	}
	return nil
}

func (m *BeaconState) GetPreviousEpochAttestations() []*PendingAttestation {
	if m != nil {
		return m.PreviousEpochAttestations
	}
	return nil
}

func (m *BeaconState) GetCurrentEpochAttestations() []*PendingAttestation {
	if m != nil {
		return m.CurrentEpochAttestations
	}
	return nil
}

func (m *BeaconState) GetJustificationBits() github_com_prysmaticlabs_go_bitfield.Bitvector4 {
	if m != nil {
		return m.JustificationBits
	}
	return nil
}

func (m *BeaconState) GetPreviousJustifiedCheckpoint() *Checkpoint {
	if m != nil {
		return m.PreviousJustifiedCheckpoint
	}
	return nil
}

func (m *BeaconState) GetCurrentJustifiedCheckpoint() *Checkpoint {
	if m != nil {
		return m.CurrentJustifiedCheckpoint
	}
	return nil
}

func (m *BeaconState) GetFinalizedCheckpoint() *Checkpoint {
	if m != nil {
		return m.FinalizedCheckpoint
	}
	return nil
}

type PendingAttestation struct {
	AggregationBits      github_com_prysmaticlabs_go_bitfield.Bitlist `protobuf:"bytes,1,opt,name=aggregation_bits,json=aggregationBits,proto3,casttype=github.com/prysmaticlabs/go-bitfield.Bitlist" json:"aggregation_bits,omitempty" ssz-max:"2048"`
	Data                 *AttestationData                             `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	InclusionDelay       uint64                                       `protobuf:"varint,3,opt,name=inclusion_delay,json=inclusionDelay,proto3" json:"inclusion_delay,omitempty"`
	ProposerIndex        uint64                                       `protobuf:"varint,4,opt,name=proposer_index,json=proposerIndex,proto3" json:"proposer_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *PendingAttestation) Reset()         { *m = PendingAttestation{} }
func (m *PendingAttestation) String() string { return proto.CompactTextString(m) }
func (*PendingAttestation) ProtoMessage()    {}
func (*PendingAttestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea3734aa07d7cd6a, []int{1}
}
func (m *PendingAttestation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingAttestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingAttestation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingAttestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingAttestation.Merge(m, src)
}
func (m *PendingAttestation) XXX_Size() int {
	return m.Size()
}
func (m *PendingAttestation) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingAttestation.DiscardUnknown(m)
}

var xxx_messageInfo_PendingAttestation proto.InternalMessageInfo

func (m *PendingAttestation) GetAggregationBits() github_com_prysmaticlabs_go_bitfield.Bitlist {
	if m != nil {
		return m.AggregationBits
	}
	return nil
}

func (m *PendingAttestation) GetData() *AttestationData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PendingAttestation) GetInclusionDelay() uint64 {
	if m != nil {
		return m.InclusionDelay
	}
	return 0
}

func (m *PendingAttestation) GetProposerIndex() uint64 {
	if m != nil {
		return m.ProposerIndex
	}
	return 0
}

type Committee struct {
	Index                uint64   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Slot                 uint64   `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Validators           []uint64 `protobuf:"varint,3,rep,packed,name=validators,proto3" json:"validators,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Committee) Reset()         { *m = Committee{} }
func (m *Committee) String() string { return proto.CompactTextString(m) }
func (*Committee) ProtoMessage()    {}
func (*Committee) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea3734aa07d7cd6a, []int{2}
}
func (m *Committee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Committee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Committee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Committee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Committee.Merge(m, src)
}
func (m *Committee) XXX_Size() int {
	return m.Size()
}
func (m *Committee) XXX_DiscardUnknown() {
	xxx_messageInfo_Committee.DiscardUnknown(m)
}

var xxx_messageInfo_Committee proto.InternalMessageInfo

func (m *Committee) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Committee) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *Committee) GetValidators() []uint64 {
	if m != nil {
		return m.Validators
	}
	return nil
}

type Fork struct {
	PreviousVersion      []byte   `protobuf:"bytes,1,opt,name=previous_version,json=previousVersion,proto3" json:"previous_version,omitempty" ssz-size:"4"`
	CurrentVersion       []byte   `protobuf:"bytes,2,opt,name=current_version,json=currentVersion,proto3" json:"current_version,omitempty" ssz-size:"4"`
	Epoch                uint64   `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Fork) Reset()         { *m = Fork{} }
func (m *Fork) String() string { return proto.CompactTextString(m) }
func (*Fork) ProtoMessage()    {}
func (*Fork) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea3734aa07d7cd6a, []int{3}
}
func (m *Fork) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fork.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fork.Merge(m, src)
}
func (m *Fork) XXX_Size() int {
	return m.Size()
}
func (m *Fork) XXX_DiscardUnknown() {
	xxx_messageInfo_Fork.DiscardUnknown(m)
}

var xxx_messageInfo_Fork proto.InternalMessageInfo

func (m *Fork) GetPreviousVersion() []byte {
	if m != nil {
		return m.PreviousVersion
	}
	return nil
}

func (m *Fork) GetCurrentVersion() []byte {
	if m != nil {
		return m.CurrentVersion
	}
	return nil
}

func (m *Fork) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func init() {
	proto.RegisterType((*BeaconState)(nil), "ethereum.eth.v1.BeaconState")
	proto.RegisterType((*PendingAttestation)(nil), "ethereum.eth.v1.PendingAttestation")
	proto.RegisterType((*Committee)(nil), "ethereum.eth.v1.Committee")
	proto.RegisterType((*Fork)(nil), "ethereum.eth.v1.Fork")
}

func init() { proto.RegisterFile("eth/v1/beacon_state.proto", fileDescriptor_ea3734aa07d7cd6a) }

var fileDescriptor_ea3734aa07d7cd6a = []byte{
	// 1056 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdf, 0x6e, 0xe3, 0xc4,
	0x17, 0x96, 0xd3, 0x74, 0x7f, 0xed, 0x24, 0xad, 0xd3, 0x69, 0xfb, 0x5b, 0xb7, 0x85, 0x26, 0x18,
	0x01, 0x45, 0x6a, 0x93, 0x3a, 0x4d, 0x93, 0xed, 0x72, 0x81, 0x70, 0xb7, 0x88, 0x45, 0x02, 0x15,
	0xc3, 0x16, 0x09, 0x2d, 0xb2, 0x26, 0xce, 0xd4, 0x1e, 0x6a, 0x7b, 0xa2, 0x99, 0x49, 0xe8, 0xf6,
	0x05, 0x10, 0xf7, 0x3c, 0x05, 0x4f, 0x82, 0xb8, 0xe2, 0x09, 0x22, 0xd4, 0x47, 0xc8, 0x25, 0x12,
	0x12, 0xf2, 0xf8, 0x6f, 0x9a, 0x6e, 0x17, 0x89, 0x3b, 0xcf, 0x99, 0xef, 0xfb, 0x66, 0xce, 0xf9,
	0x66, 0xce, 0x18, 0x6c, 0x61, 0xe1, 0xb5, 0xc6, 0x46, 0xab, 0x8f, 0x91, 0x43, 0x43, 0x9b, 0x0b,
	0x24, 0x70, 0x73, 0xc8, 0xa8, 0xa0, 0x50, 0xc5, 0xc2, 0xc3, 0x0c, 0x8f, 0x82, 0x26, 0x16, 0x5e,
	0x73, 0x6c, 0x6c, 0x1f, 0xb8, 0x44, 0x78, 0xa3, 0x7e, 0xd3, 0xa1, 0x41, 0xcb, 0xa5, 0x2e, 0x6d,
	0x49, 0x5c, 0x7f, 0x74, 0x29, 0x47, 0x72, 0x20, 0xbf, 0x62, 0xfe, 0xb6, 0x96, 0x48, 0x23, 0x21,
	0x70, 0xa4, 0x4b, 0x68, 0x98, 0xcc, 0xdc, 0x59, 0xb4, 0xef, 0x53, 0xe7, 0x2a, 0x99, 0xfa, 0x7f,
	0x32, 0x35, 0x46, 0x3e, 0x19, 0x20, 0x41, 0x59, 0x1c, 0xd7, 0xff, 0xae, 0x80, 0x8a, 0x29, 0xe1,
	0x5f, 0x47, 0x5b, 0x84, 0xef, 0x80, 0xaa, 0x8b, 0x43, 0xcc, 0x09, 0xb7, 0x05, 0x09, 0xb0, 0xa6,
	0x34, 0x94, 0xbd, 0xb2, 0x55, 0x49, 0x62, 0xdf, 0x90, 0x00, 0xc3, 0xe7, 0xe0, 0x71, 0x0a, 0xc9,
	0xd4, 0xb8, 0xcd, 0x28, 0x15, 0x5a, 0xa9, 0xa1, 0xec, 0x55, 0xcd, 0xb5, 0xe9, 0xa4, 0xbe, 0xc2,
	0xf9, 0xcd, 0x01, 0x27, 0x37, 0xf8, 0xa9, 0x7e, 0xd4, 0xd6, 0xad, 0xcd, 0x84, 0x71, 0x91, 0x11,
	0x2c, 0x4a, 0x05, 0x84, 0xa0, 0xcc, 0x7d, 0x2a, 0xb4, 0x05, 0xb9, 0x8a, 0xfc, 0x86, 0x1f, 0x82,
	0xf2, 0x25, 0x65, 0x57, 0x5a, 0xb9, 0xa1, 0xec, 0x55, 0xda, 0x9b, 0xcd, 0x3b, 0xd5, 0x6a, 0x7e,
	0x4a, 0xd9, 0x95, 0x25, 0x21, 0xd0, 0x02, 0xeb, 0x3e, 0x8a, 0x8a, 0x10, 0xa7, 0x6a, 0x7b, 0x18,
	0x0d, 0x30, 0xd3, 0x16, 0x25, 0x53, 0x9f, 0x63, 0xc6, 0x79, 0x9a, 0x11, 0xf4, 0x33, 0x89, 0xb4,
	0xd6, 0x62, 0x7a, 0x21, 0x04, 0x3b, 0xa0, 0x12, 0x8b, 0x45, 0x09, 0x71, 0xed, 0x51, 0x63, 0x61,
	0xaf, 0x6a, 0xae, 0x4f, 0x27, 0x75, 0x35, 0xcf, 0xe8, 0x89, 0x71, 0xd2, 0xd6, 0x2d, 0x20, 0x71,
	0x51, 0x1e, 0x3c, 0x62, 0x49, 0x8b, 0x13, 0xd6, 0xff, 0x1e, 0x60, 0x49, 0x5c, 0xcc, 0xfa, 0x0a,
	0xd4, 0x3c, 0xc2, 0x05, 0x65, 0xc4, 0x41, 0x7e, 0x42, 0x5d, 0x92, 0xd4, 0xf7, 0xa7, 0x93, 0xba,
	0x9e, 0x53, 0x3f, 0xde, 0x3f, 0x6a, 0xeb, 0x8d, 0x68, 0x1c, 0xa0, 0xeb, 0xa7, 0xba, 0xd1, 0xed,
	0xf5, 0x7a, 0x6d, 0xa3, 0xab, 0x5b, 0x6a, 0xce, 0x8f, 0x25, 0xbb, 0x60, 0x19, 0x0b, 0xcf, 0xb0,
	0x07, 0x48, 0x20, 0x6d, 0x59, 0x16, 0x62, 0x6b, 0xae, 0x10, 0x67, 0xc2, 0x33, 0x9e, 0x21, 0x81,
	0xac, 0x25, 0x9c, 0x7c, 0xc1, 0x17, 0x40, 0xcd, 0x78, 0xf6, 0x98, 0x0a, 0xcc, 0x35, 0xd0, 0x58,
	0x78, 0x90, 0x6d, 0xc2, 0xe9, 0xa4, 0xbe, 0x9a, 0x6f, 0xea, 0xb0, 0xdd, 0xd1, 0xad, 0x95, 0x54,
	0xf1, 0x22, 0xd2, 0x80, 0xfb, 0x00, 0xc6, 0xb2, 0x78, 0x48, 0x39, 0x11, 0x36, 0x09, 0x07, 0xf8,
	0x5a, 0xab, 0x48, 0xbb, 0x6b, 0x12, 0x1a, 0x4f, 0x3c, 0x8f, 0xe2, 0xf0, 0x5b, 0x00, 0xf2, 0x13,
	0xa5, 0x55, 0xe5, 0xfa, 0xdb, 0x73, 0xeb, 0x67, 0x67, 0xc8, 0xdc, 0x99, 0x4e, 0xea, 0x8f, 0x0b,
	0x1b, 0x38, 0x39, 0x39, 0x36, 0x8c, 0x6e, 0xbb, 0xd7, 0xeb, 0x75, 0x75, 0xab, 0x20, 0x05, 0x7b,
	0x60, 0xa9, 0x8f, 0x7c, 0x14, 0x3a, 0x98, 0x6b, 0x2b, 0x8d, 0x85, 0xbd, 0xf2, 0xc3, 0xd4, 0x0c,
	0x0c, 0x7b, 0xa0, 0xca, 0x50, 0x38, 0x40, 0xd4, 0x0e, 0xc8, 0x35, 0xe6, 0xda, 0xaa, 0x74, 0x67,
	0x63, 0x3a, 0xa9, 0xd7, 0x72, 0x77, 0xba, 0xc7, 0xc7, 0x47, 0x5d, 0xdd, 0xaa, 0xc4, 0xc8, 0x2f,
	0x22, 0x20, 0x6c, 0x83, 0x65, 0xee, 0x23, 0xee, 0x91, 0xd0, 0xe5, 0x9a, 0x2a, 0x97, 0xbc, 0x9f,
	0x95, 0xc3, 0xe0, 0x8f, 0x60, 0x67, 0xc8, 0xf0, 0x98, 0xd0, 0x11, 0xb7, 0xf1, 0x90, 0x3a, 0x9e,
	0x5d, 0xb8, 0xe2, 0x5c, 0xab, 0xc9, 0x7a, 0xbc, 0x3b, 0x57, 0x8f, 0x73, 0x1c, 0x0e, 0x48, 0xe8,
	0x7e, 0x92, 0x63, 0xef, 0x38, 0xd3, 0x39, 0x3c, 0xe9, 0xea, 0xd6, 0x56, 0xaa, 0x7d, 0x16, 0x49,
	0x17, 0xd0, 0x1c, 0x8e, 0xc0, 0xb6, 0x33, 0x62, 0x0c, 0x87, 0xe2, 0xbe, 0x75, 0xd7, 0xfe, 0xdb,
	0xba, 0x5a, 0x22, 0x3d, 0xbf, 0x2c, 0x03, 0xf0, 0x87, 0x11, 0x17, 0xe4, 0x92, 0x38, 0x32, 0x62,
	0xf7, 0x89, 0xe0, 0x1a, 0x94, 0x3d, 0xe4, 0x74, 0x3a, 0xa9, 0x57, 0xf3, 0x62, 0x19, 0xfa, 0x5f,
	0x93, 0x7a, 0xab, 0xd0, 0x27, 0x87, 0xec, 0x15, 0x0f, 0x90, 0x20, 0x8e, 0x8f, 0xfa, 0xbc, 0xe5,
	0xd2, 0x83, 0x3e, 0x11, 0x97, 0x04, 0xfb, 0x83, 0xa6, 0x49, 0xc4, 0x18, 0x3b, 0x82, 0xb2, 0x8e,
	0xb5, 0x36, 0x23, 0x6f, 0x12, 0xc1, 0xa1, 0x0d, 0xde, 0xce, 0x6a, 0x9c, 0xcc, 0xe2, 0x81, 0xed,
	0x78, 0xd8, 0xb9, 0x1a, 0x52, 0x12, 0x0a, 0x6d, 0x5d, 0xde, 0x99, 0x9d, 0xb9, 0x6c, 0x4f, 0x33,
	0x88, 0x95, 0xb9, 0xf4, 0x79, 0x2a, 0x90, 0x4f, 0xc2, 0xef, 0xc1, 0x5b, 0x69, 0x2d, 0xef, 0xd5,
	0xdf, 0x78, 0xb3, 0x7e, 0x6a, 0xc6, 0x7d, 0xf2, 0x5f, 0x82, 0x8d, 0x4b, 0x12, 0x22, 0x9f, 0xdc,
	0xcc, 0xca, 0x6e, 0xbe, 0x59, 0x76, 0x3d, 0x23, 0xe6, 0x41, 0xfd, 0xe7, 0x12, 0x80, 0xf3, 0x46,
	0xc2, 0x00, 0xd4, 0x90, 0xeb, 0x32, 0xec, 0x16, 0x8c, 0x51, 0xa4, 0x31, 0xe6, 0x8c, 0xc5, 0xed,
	0xc3, 0xce, 0x93, 0xc8, 0x9a, 0xfd, 0x7f, 0x6b, 0x8d, 0x4f, 0xb8, 0xb0, 0xd4, 0x82, 0xb6, 0x74,
	0xa5, 0x03, 0xca, 0xb2, 0x61, 0x95, 0x64, 0x16, 0x8d, 0xb9, 0x2c, 0x0a, 0x5b, 0x93, 0x7d, 0x4b,
	0xa2, 0xe1, 0x07, 0x40, 0x25, 0xa1, 0xe3, 0x8f, 0x78, 0xb4, 0xc5, 0x01, 0xf6, 0xd1, 0xab, 0xe4,
	0x21, 0x59, 0xcd, 0xc2, 0xcf, 0xa2, 0x28, 0x7c, 0x0f, 0xac, 0x0e, 0x19, 0x1d, 0x52, 0x8e, 0x59,
	0xd2, 0x81, 0xca, 0x12, 0xb7, 0x92, 0x46, 0x65, 0xfb, 0xd1, 0x5f, 0x80, 0xe5, 0x53, 0x1a, 0x04,
	0x44, 0x08, 0x8c, 0xe1, 0x06, 0x58, 0x8c, 0xa1, 0xf1, 0x0b, 0x18, 0x0f, 0xb2, 0x07, 0xab, 0x54,
	0x78, 0xb0, 0x76, 0x67, 0xba, 0xd6, 0x42, 0x74, 0xd7, 0x8b, 0xcd, 0x47, 0xff, 0x45, 0x01, 0xe5,
	0xe8, 0xd1, 0x82, 0x1f, 0x81, 0x5a, 0x76, 0xf6, 0xc6, 0x98, 0x45, 0xfb, 0x4b, 0x8a, 0x5a, 0x9b,
	0x3d, 0xed, 0x1d, 0xdd, 0x52, 0x53, 0xe4, 0x45, 0x0c, 0x84, 0x27, 0x40, 0x4d, 0xcf, 0x55, 0xca,
	0x2d, 0xbd, 0x86, 0xbb, 0x9a, 0x00, 0x53, 0xea, 0x06, 0x58, 0x94, 0xd7, 0x3a, 0xa9, 0x4e, 0x3c,
	0x30, 0x7f, 0x52, 0x7e, 0xbb, 0xdd, 0x55, 0xfe, 0xb8, 0xdd, 0x55, 0xfe, 0xbc, 0xdd, 0x55, 0xc0,
	0x3a, 0x65, 0xee, 0xdd, 0xba, 0x9b, 0xb5, 0xc2, 0xaf, 0xc1, 0x79, 0xf4, 0xbf, 0x70, 0xae, 0x7c,
	0xf7, 0x7a, 0xab, 0x53, 0x36, 0x1a, 0x12, 0x39, 0x68, 0x8d, 0x8d, 0x5f, 0x4b, 0xea, 0x59, 0xaa,
	0x79, 0x26, 0x35, 0x7f, 0xcf, 0x23, 0x2f, 0xcf, 0x84, 0xf7, 0x72, 0x6c, 0xf4, 0x1f, 0xc9, 0x5f,
	0x91, 0xa3, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x2d, 0x70, 0x17, 0x34, 0x09, 0x00, 0x00,
}

func (m *BeaconState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeaconState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeaconState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FinalizedCheckpoint != nil {
		{
			size, err := m.FinalizedCheckpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconState(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.CurrentJustifiedCheckpoint != nil {
		{
			size, err := m.CurrentJustifiedCheckpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconState(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.PreviousJustifiedCheckpoint != nil {
		{
			size, err := m.PreviousJustifiedCheckpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconState(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.JustificationBits) > 0 {
		i -= len(m.JustificationBits)
		copy(dAtA[i:], m.JustificationBits)
		i = encodeVarintBeaconState(dAtA, i, uint64(len(m.JustificationBits)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.CurrentEpochAttestations) > 0 {
		for iNdEx := len(m.CurrentEpochAttestations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrentEpochAttestations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeaconState(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.PreviousEpochAttestations) > 0 {
		for iNdEx := len(m.PreviousEpochAttestations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PreviousEpochAttestations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeaconState(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.Slashings) > 0 {
		dAtA5 := make([]byte, len(m.Slashings)*10)
		var j4 int
		for _, num := range m.Slashings {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintBeaconState(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.RandaoMixes) > 0 {
		for iNdEx := len(m.RandaoMixes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RandaoMixes[iNdEx])
			copy(dAtA[i:], m.RandaoMixes[iNdEx])
			i = encodeVarintBeaconState(dAtA, i, uint64(len(m.RandaoMixes[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.Balances) > 0 {
		dAtA7 := make([]byte, len(m.Balances)*10)
		var j6 int
		for _, num := range m.Balances {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintBeaconState(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeaconState(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.Eth1DepositIndex != 0 {
		i = encodeVarintBeaconState(dAtA, i, uint64(m.Eth1DepositIndex))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Eth1DataVotes) > 0 {
		for iNdEx := len(m.Eth1DataVotes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Eth1DataVotes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBeaconState(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Eth1Data != nil {
		{
			size, err := m.Eth1Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconState(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.HistoricalRoots) > 0 {
		for iNdEx := len(m.HistoricalRoots) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.HistoricalRoots[iNdEx])
			copy(dAtA[i:], m.HistoricalRoots[iNdEx])
			i = encodeVarintBeaconState(dAtA, i, uint64(len(m.HistoricalRoots[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.StateRoots) > 0 {
		for iNdEx := len(m.StateRoots) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StateRoots[iNdEx])
			copy(dAtA[i:], m.StateRoots[iNdEx])
			i = encodeVarintBeaconState(dAtA, i, uint64(len(m.StateRoots[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.BlockRoots) > 0 {
		for iNdEx := len(m.BlockRoots) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BlockRoots[iNdEx])
			copy(dAtA[i:], m.BlockRoots[iNdEx])
			i = encodeVarintBeaconState(dAtA, i, uint64(len(m.BlockRoots[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.LatestBlockHeader != nil {
		{
			size, err := m.LatestBlockHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconState(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Fork != nil {
		{
			size, err := m.Fork.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconState(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Slot != 0 {
		i = encodeVarintBeaconState(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GenesisValidatorsRoot) > 0 {
		i -= len(m.GenesisValidatorsRoot)
		copy(dAtA[i:], m.GenesisValidatorsRoot)
		i = encodeVarintBeaconState(dAtA, i, uint64(len(m.GenesisValidatorsRoot)))
		i--
		dAtA[i] = 0x12
	}
	if m.GenesisTime != 0 {
		i = encodeVarintBeaconState(dAtA, i, uint64(m.GenesisTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PendingAttestation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingAttestation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingAttestation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ProposerIndex != 0 {
		i = encodeVarintBeaconState(dAtA, i, uint64(m.ProposerIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.InclusionDelay != 0 {
		i = encodeVarintBeaconState(dAtA, i, uint64(m.InclusionDelay))
		i--
		dAtA[i] = 0x18
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBeaconState(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AggregationBits) > 0 {
		i -= len(m.AggregationBits)
		copy(dAtA[i:], m.AggregationBits)
		i = encodeVarintBeaconState(dAtA, i, uint64(len(m.AggregationBits)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Committee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Committee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Committee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Validators) > 0 {
		dAtA13 := make([]byte, len(m.Validators)*10)
		var j12 int
		for _, num := range m.Validators {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		i -= j12
		copy(dAtA[i:], dAtA13[:j12])
		i = encodeVarintBeaconState(dAtA, i, uint64(j12))
		i--
		dAtA[i] = 0x1a
	}
	if m.Slot != 0 {
		i = encodeVarintBeaconState(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x10
	}
	if m.Index != 0 {
		i = encodeVarintBeaconState(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Fork) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fork) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fork) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Epoch != 0 {
		i = encodeVarintBeaconState(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CurrentVersion) > 0 {
		i -= len(m.CurrentVersion)
		copy(dAtA[i:], m.CurrentVersion)
		i = encodeVarintBeaconState(dAtA, i, uint64(len(m.CurrentVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PreviousVersion) > 0 {
		i -= len(m.PreviousVersion)
		copy(dAtA[i:], m.PreviousVersion)
		i = encodeVarintBeaconState(dAtA, i, uint64(len(m.PreviousVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBeaconState(dAtA []byte, offset int, v uint64) int {
	offset -= sovBeaconState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BeaconState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GenesisTime != 0 {
		n += 1 + sovBeaconState(uint64(m.GenesisTime))
	}
	l = len(m.GenesisValidatorsRoot)
	if l > 0 {
		n += 1 + l + sovBeaconState(uint64(l))
	}
	if m.Slot != 0 {
		n += 1 + sovBeaconState(uint64(m.Slot))
	}
	if m.Fork != nil {
		l = m.Fork.Size()
		n += 1 + l + sovBeaconState(uint64(l))
	}
	if m.LatestBlockHeader != nil {
		l = m.LatestBlockHeader.Size()
		n += 1 + l + sovBeaconState(uint64(l))
	}
	if len(m.BlockRoots) > 0 {
		for _, b := range m.BlockRoots {
			l = len(b)
			n += 1 + l + sovBeaconState(uint64(l))
		}
	}
	if len(m.StateRoots) > 0 {
		for _, b := range m.StateRoots {
			l = len(b)
			n += 1 + l + sovBeaconState(uint64(l))
		}
	}
	if len(m.HistoricalRoots) > 0 {
		for _, b := range m.HistoricalRoots {
			l = len(b)
			n += 1 + l + sovBeaconState(uint64(l))
		}
	}
	if m.Eth1Data != nil {
		l = m.Eth1Data.Size()
		n += 1 + l + sovBeaconState(uint64(l))
	}
	if len(m.Eth1DataVotes) > 0 {
		for _, e := range m.Eth1DataVotes {
			l = e.Size()
			n += 1 + l + sovBeaconState(uint64(l))
		}
	}
	if m.Eth1DepositIndex != 0 {
		n += 1 + sovBeaconState(uint64(m.Eth1DepositIndex))
	}
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovBeaconState(uint64(l))
		}
	}
	if len(m.Balances) > 0 {
		l = 0
		for _, e := range m.Balances {
			l += sovBeaconState(uint64(e))
		}
		n += 1 + sovBeaconState(uint64(l)) + l
	}
	if len(m.RandaoMixes) > 0 {
		for _, b := range m.RandaoMixes {
			l = len(b)
			n += 1 + l + sovBeaconState(uint64(l))
		}
	}
	if len(m.Slashings) > 0 {
		l = 0
		for _, e := range m.Slashings {
			l += sovBeaconState(uint64(e))
		}
		n += 1 + sovBeaconState(uint64(l)) + l
	}
	if len(m.PreviousEpochAttestations) > 0 {
		for _, e := range m.PreviousEpochAttestations {
			l = e.Size()
			n += 2 + l + sovBeaconState(uint64(l))
		}
	}
	if len(m.CurrentEpochAttestations) > 0 {
		for _, e := range m.CurrentEpochAttestations {
			l = e.Size()
			n += 2 + l + sovBeaconState(uint64(l))
		}
	}
	l = len(m.JustificationBits)
	if l > 0 {
		n += 2 + l + sovBeaconState(uint64(l))
	}
	if m.PreviousJustifiedCheckpoint != nil {
		l = m.PreviousJustifiedCheckpoint.Size()
		n += 2 + l + sovBeaconState(uint64(l))
	}
	if m.CurrentJustifiedCheckpoint != nil {
		l = m.CurrentJustifiedCheckpoint.Size()
		n += 2 + l + sovBeaconState(uint64(l))
	}
	if m.FinalizedCheckpoint != nil {
		l = m.FinalizedCheckpoint.Size()
		n += 2 + l + sovBeaconState(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PendingAttestation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AggregationBits)
	if l > 0 {
		n += 1 + l + sovBeaconState(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBeaconState(uint64(l))
	}
	if m.InclusionDelay != 0 {
		n += 1 + sovBeaconState(uint64(m.InclusionDelay))
	}
	if m.ProposerIndex != 0 {
		n += 1 + sovBeaconState(uint64(m.ProposerIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Committee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovBeaconState(uint64(m.Index))
	}
	if m.Slot != 0 {
		n += 1 + sovBeaconState(uint64(m.Slot))
	}
	if len(m.Validators) > 0 {
		l = 0
		for _, e := range m.Validators {
			l += sovBeaconState(uint64(e))
		}
		n += 1 + sovBeaconState(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Fork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PreviousVersion)
	if l > 0 {
		n += 1 + l + sovBeaconState(uint64(l))
	}
	l = len(m.CurrentVersion)
	if l > 0 {
		n += 1 + l + sovBeaconState(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovBeaconState(uint64(m.Epoch))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBeaconState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBeaconState(x uint64) (n int) {
	return sovBeaconState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BeaconState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeaconState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeaconState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisTime", wireType)
			}
			m.GenesisTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GenesisTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisValidatorsRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisValidatorsRoot = append(m.GenesisValidatorsRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.GenesisValidatorsRoot == nil {
				m.GenesisValidatorsRoot = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fork", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fork == nil {
				m.Fork = &Fork{}
			}
			if err := m.Fork.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlockHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestBlockHeader == nil {
				m.LatestBlockHeader = &BeaconBlockHeader{}
			}
			if err := m.LatestBlockHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockRoots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockRoots = append(m.BlockRoots, make([]byte, postIndex-iNdEx))
			copy(m.BlockRoots[len(m.BlockRoots)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoots = append(m.StateRoots, make([]byte, postIndex-iNdEx))
			copy(m.StateRoots[len(m.StateRoots)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoricalRoots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistoricalRoots = append(m.HistoricalRoots, make([]byte, postIndex-iNdEx))
			copy(m.HistoricalRoots[len(m.HistoricalRoots)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eth1Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Eth1Data == nil {
				m.Eth1Data = &Eth1Data{}
			}
			if err := m.Eth1Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eth1DataVotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Eth1DataVotes = append(m.Eth1DataVotes, &Eth1Data{})
			if err := m.Eth1DataVotes[len(m.Eth1DataVotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eth1DepositIndex", wireType)
			}
			m.Eth1DepositIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Eth1DepositIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, &Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBeaconState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Balances = append(m.Balances, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBeaconState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBeaconState
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBeaconState
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Balances) == 0 {
					m.Balances = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBeaconState
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Balances = append(m.Balances, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandaoMixes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandaoMixes = append(m.RandaoMixes, make([]byte, postIndex-iNdEx))
			copy(m.RandaoMixes[len(m.RandaoMixes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBeaconState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Slashings = append(m.Slashings, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBeaconState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBeaconState
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBeaconState
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Slashings) == 0 {
					m.Slashings = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBeaconState
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Slashings = append(m.Slashings, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Slashings", wireType)
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousEpochAttestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousEpochAttestations = append(m.PreviousEpochAttestations, &PendingAttestation{})
			if err := m.PreviousEpochAttestations[len(m.PreviousEpochAttestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpochAttestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentEpochAttestations = append(m.CurrentEpochAttestations, &PendingAttestation{})
			if err := m.CurrentEpochAttestations[len(m.CurrentEpochAttestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JustificationBits", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JustificationBits = append(m.JustificationBits[:0], dAtA[iNdEx:postIndex]...)
			if m.JustificationBits == nil {
				m.JustificationBits = []byte{}
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousJustifiedCheckpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousJustifiedCheckpoint == nil {
				m.PreviousJustifiedCheckpoint = &Checkpoint{}
			}
			if err := m.PreviousJustifiedCheckpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentJustifiedCheckpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentJustifiedCheckpoint == nil {
				m.CurrentJustifiedCheckpoint = &Checkpoint{}
			}
			if err := m.CurrentJustifiedCheckpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedCheckpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FinalizedCheckpoint == nil {
				m.FinalizedCheckpoint = &Checkpoint{}
			}
			if err := m.FinalizedCheckpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconState
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingAttestation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingAttestation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingAttestation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationBits", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregationBits = append(m.AggregationBits[:0], dAtA[iNdEx:postIndex]...)
			if m.AggregationBits == nil {
				m.AggregationBits = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeaconState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &AttestationData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InclusionDelay", wireType)
			}
			m.InclusionDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InclusionDelay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerIndex", wireType)
			}
			m.ProposerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposerIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconState
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Committee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Committee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Committee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBeaconState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Validators = append(m.Validators, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBeaconState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBeaconState
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBeaconState
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Validators) == 0 {
					m.Validators = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBeaconState
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Validators = append(m.Validators, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconState
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fork) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeaconState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fork: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fork: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousVersion", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousVersion = append(m.PreviousVersion[:0], dAtA[iNdEx:postIndex]...)
			if m.PreviousVersion == nil {
				m.PreviousVersion = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentVersion", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBeaconState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBeaconState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentVersion = append(m.CurrentVersion[:0], dAtA[iNdEx:postIndex]...)
			if m.CurrentVersion == nil {
				m.CurrentVersion = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBeaconState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeaconState
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBeaconState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBeaconState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBeaconState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBeaconState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBeaconState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBeaconState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBeaconState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBeaconState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBeaconState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBeaconState = fmt.Errorf("proto: unexpected end of group")
)
