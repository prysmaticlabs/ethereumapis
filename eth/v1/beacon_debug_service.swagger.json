{
  "swagger": "2.0",
  "info": {
    "title": "eth/v1/beacon_debug_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "BeaconDebug"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/eth/v1/debug/beacon/heads": {
      "get": {
        "summary": "ListForkChoiceHeads retrieves all possible chain heads (leaves of fork choice tree).",
        "operationId": "BeaconDebug_ListForkChoiceHeads",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ForkChoiceHeadsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "BeaconDebug"
        ]
      }
    },
    "/eth/v1/debug/beacon/states/{stateId}": {
      "get": {
        "summary": "GetBeaconState returns full BeaconState object for given stateId.",
        "operationId": "BeaconDebug_GetBeaconState",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BeaconStateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stateId",
            "description": "The state id which can be any of: \"head\" (canonical head in node's view),\n\"genesis\", \"finalized\", \"justified\", \u003cslot\u003e, \u003chex encoded stateRoot with 0x prefix\u003e.\nUses the provided state_id for the request.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "BeaconDebug"
        ]
      }
    },
    "/eth/v1/debug/beacon/states/{stateId}/ssz": {
      "get": {
        "summary": "GetBeaconStateSsz returns the SSZ-serialized version of the full BeaconState object for given stateId.",
        "operationId": "BeaconDebug_GetBeaconStateSsz",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BeaconStateSszResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stateId",
            "description": "The state id which can be any of: \"head\" (canonical head in node's view),\n\"genesis\", \"finalized\", \"justified\", \u003cslot\u003e, \u003chex encoded stateRoot with 0x prefix\u003e.\nUses the provided state_id for the request.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "BeaconDebug"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1AttestationData": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "uint64",
          "description": "Slot of the attestation attesting for."
        },
        "index": {
          "type": "string",
          "format": "uint64",
          "description": "The committee index that submitted this attestation."
        },
        "beaconBlockRoot": {
          "type": "string",
          "format": "byte",
          "description": "32 byte root of the LMD GHOST block vote."
        },
        "source": {
          "$ref": "#/definitions/v1Checkpoint",
          "title": "The most recent justified checkpoint in the beacon state"
        },
        "target": {
          "$ref": "#/definitions/v1Checkpoint",
          "title": "The checkpoint attempting to be justified for the current epoch and its epoch boundary block"
        }
      }
    },
    "v1BeaconBlockHeader": {
      "type": "object",
      "properties": {
        "slot": {
          "type": "string",
          "format": "uint64",
          "description": "Beacon chain slot that this block represents."
        },
        "proposerIndex": {
          "type": "string",
          "format": "uint64",
          "description": "Validator index of the validator that proposed the block header."
        },
        "parentRoot": {
          "type": "string",
          "format": "byte",
          "description": "32 byte merkle tree root of the parent ssz encoded block."
        },
        "stateRoot": {
          "type": "string",
          "format": "byte",
          "description": "32 byte merkle tree root of the resulting ssz encoded state after processing this block."
        },
        "bodyRoot": {
          "type": "string",
          "format": "byte",
          "description": "32 byte merkle tree root of the ssz encoded block body."
        }
      },
      "description": "A beacon block header is essentially a beacon block with only a reference to\nthe beacon body as a 32 byte merkle tree root. This type of message is more\nlightweight than a full beacon block. The message does not contain\na validator signature."
    },
    "v1BeaconState": {
      "type": "object",
      "properties": {
        "genesisTime": {
          "type": "string",
          "format": "uint64",
          "title": "Versioning"
        },
        "genesisValidatorsRoot": {
          "type": "string",
          "format": "byte"
        },
        "slot": {
          "type": "string",
          "format": "uint64"
        },
        "fork": {
          "$ref": "#/definitions/v1Fork"
        },
        "latestBlockHeader": {
          "$ref": "#/definitions/v1BeaconBlockHeader",
          "title": "History"
        },
        "blockRoots": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "stateRoots": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "historicalRoots": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "eth1Data": {
          "$ref": "#/definitions/v1Eth1Data",
          "title": "Eth1"
        },
        "eth1DataVotes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Eth1Data"
          }
        },
        "eth1DepositIndex": {
          "type": "string",
          "format": "uint64"
        },
        "validators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Validator"
          },
          "title": "Registry"
        },
        "balances": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          }
        },
        "randaoMixes": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "title": "Randomness"
        },
        "slashings": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          },
          "title": "Slashings"
        },
        "previousEpochAttestations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PendingAttestation"
          },
          "title": "Attestations"
        },
        "currentEpochAttestations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PendingAttestation"
          }
        },
        "justificationBits": {
          "type": "string",
          "format": "byte",
          "description": "Finality\nSpec type [4]Bitvector which means this would be a fixed size of 4 bits."
        },
        "previousJustifiedCheckpoint": {
          "$ref": "#/definitions/v1Checkpoint"
        },
        "currentJustifiedCheckpoint": {
          "$ref": "#/definitions/v1Checkpoint"
        },
        "finalizedCheckpoint": {
          "$ref": "#/definitions/v1Checkpoint"
        }
      }
    },
    "v1BeaconStateResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/v1BeaconState"
        }
      }
    },
    "v1BeaconStateSszResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1Checkpoint": {
      "type": "object",
      "properties": {
        "epoch": {
          "type": "string",
          "format": "uint64",
          "description": "Epoch the checkpoint references."
        },
        "root": {
          "type": "string",
          "format": "byte",
          "description": "Block root of the checkpoint references."
        }
      }
    },
    "v1Eth1Data": {
      "type": "object",
      "properties": {
        "depositRoot": {
          "type": "string",
          "format": "byte",
          "description": "The 32 byte deposit tree root for the last deposit included in this\nblock."
        },
        "depositCount": {
          "type": "string",
          "format": "uint64",
          "description": "The total number of deposits included in the beacon chain since genesis\nincluding the deposits in this block."
        },
        "blockHash": {
          "type": "string",
          "format": "byte",
          "description": "The 32 byte block hash of the Ethereum 1.x block considered for deposit\ninclusion."
        }
      },
      "description": "Eth1Data represents references to the Ethereum 1.x deposit contract."
    },
    "v1Fork": {
      "type": "object",
      "properties": {
        "previousVersion": {
          "type": "string",
          "format": "byte"
        },
        "currentVersion": {
          "type": "string",
          "format": "byte"
        },
        "epoch": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "Fork structure used for indicating beacon chain versioning and forks."
    },
    "v1ForkChoiceHead": {
      "type": "object",
      "properties": {
        "root": {
          "type": "string",
          "format": "byte"
        },
        "slot": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1ForkChoiceHeadsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ForkChoiceHead"
          }
        }
      }
    },
    "v1PendingAttestation": {
      "type": "object",
      "properties": {
        "aggregationBits": {
          "type": "string",
          "format": "byte",
          "description": "Bitfield representation of validator indices that have voted exactly\nthe same vote and have been aggregated into this attestation."
        },
        "data": {
          "$ref": "#/definitions/v1AttestationData"
        },
        "inclusionDelay": {
          "type": "string",
          "format": "uint64",
          "description": "The difference of when attestation gets created and get included on chain."
        },
        "proposerIndex": {
          "type": "string",
          "format": "uint64",
          "description": "The proposer who included the attestation in the block."
        }
      }
    },
    "v1Validator": {
      "type": "object",
      "properties": {
        "pubkey": {
          "type": "string",
          "format": "byte",
          "description": "48 byte BLS public key used for the validator's activities."
        },
        "withdrawalCredentials": {
          "type": "string",
          "format": "byte",
          "description": "32 byte hash of the withdrawal destination public key."
        },
        "effectiveBalance": {
          "type": "string",
          "format": "uint64",
          "description": "The validators current effective balance in gwei."
        },
        "slashed": {
          "type": "boolean",
          "description": "Whether or not the validator has been slashed."
        },
        "activationEligibilityEpoch": {
          "type": "string",
          "format": "uint64",
          "description": "Epoch when the validator became eligible for activation. This field may\nbe zero if the validator was present in the Ethereum 2.0 genesis. This\nfield is FAR_FUTURE_EPOCH if the validator has not been activated."
        },
        "activationEpoch": {
          "type": "string",
          "format": "uint64",
          "description": "Epoch when the validator was activated. This field may be zero if the\nvalidator was present in the Ethereum 2.0 genesis. This field is\nFAR_FUTURE_EPOCH if the validator has not been activated."
        },
        "exitEpoch": {
          "type": "string",
          "format": "uint64",
          "title": "Epoch when the validator was exited. This field is FAR_FUTURE_EPOCH if\nthe validator has not exited.\nFAR_FUTURE_EPOCH is a constant defined by the official Ethereum 2.0 specification:\nhttps://github.com/ethereum/eth2.0-specs/blob/v0.9.2/specs/core/0_beacon-chain.md#constants"
        },
        "withdrawableEpoch": {
          "type": "string",
          "format": "uint64",
          "title": "Epoch when the validator is eligible to withdraw their funds. This field\nis FAR_FUTURE_EPOCH if the validator has not exited.\nFAR_FUTURE_EPOCH is a constant defined by the official Ethereum 2.0 specification:\nhttps://github.com/ethereum/eth2.0-specs/blob/v0.9.2/specs/core/0_beacon-chain.md#constants"
        }
      },
      "description": "An Ethereum 2.0 validator."
    }
  }
}
