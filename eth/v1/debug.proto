// Copyright 2020 Prysmatic Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package ethereum.eth.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";

import "eth/v1/beacon_state.proto";
import "eth/v1/beacon_blocks.proto";

// Beacon chain debug API
//
// The beacon chain debug API is a set of endpoints to debug chain and shouldn't be exposed publicly.
service Debug {
  // BeaconState returns full BeaconState object for given stateId.
  rpc BeaconState(StateRequest) returns (BeaconStateResponse) {
    option (google.api.http) = {get: "/eth/v1/debug/beacon/states/{state_id}"};
  }

  // ForkChoiceHeads retrieves all possible chain heads (leaves of fork choice tree).
  rpc ForkChoiceHeads(google.protobuf.Empty) returns (ForkChoiceHeadsResponse) {
    option (google.api.http) = {get: "/eth/v1/debug/beacon/heads"};
  }
}

message ForkChoiceHeadsResponse {
  repeated ForkChoiceHead data = 1;
}

message ForkChoiceHead {
  string root = 1;
  uint64 slot = 2;
}

message BeaconStateResponse {
  BeaconStateContainer data = 1;
}

message BeaconStateContainer {
  // Versioning [1001-2000]
  uint64 genesis_time = 1001;
  string genesis_validators_root = 1002;
  uint64 slot = 1003;
  Fork fork = 1004;

  // History [2001-3000]
  BlockHeader latest_block_header = 2001;
  repeated string block_roots = 2002;
  repeated string state_roots = 2003;
  repeated string historical_roots = 2004;

  // Eth1 [3001-4000]
  Eth1Data eth1_data = 3001;
  repeated Eth1Data eth1_data_votes = 3002;
  uint64 eth1_deposit_index = 3003;

  // Registry [4001-5000]
  repeated Validator validators = 4001;
  repeated uint64 balances = 4002;

  // Randomness [5001-6000]
  repeated string randao_mixes = 5001;

  // Slashings [6001-7000]
  repeated uint64 slashings = 6001;

  // Attestations [7001-8000]
  repeated PendingAttestation previous_epoch_attestations = 7001;
  repeated PendingAttestation current_epoch_attestations = 7002;

  // Finality [8001-9000]
  bytes justification_bits = 8001;
  Checkpoint previous_justified_checkpoint = 8002;
  Checkpoint current_justified_checkpoint = 8003;
  Checkpoint finalized_checkpoint = 8004;
}

message PendingAttestation {
  string aggregation_bits = 1;
  AttestationData data = 2;
  uint64 inclusion_delay = 3;
  uint64 proposer_index = 4;
}