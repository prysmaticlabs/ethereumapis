// Copyright 2020 Prysmatic Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package ethereum.eth.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";

import "eth/v1/attestation.proto";
import "eth/v1/beacon_states.proto";
import "eth/v1/beacon_blocks.proto";
import "eth/v1/beacon_block.proto";
import "eth/v1/validator.proto";

// Beacon chain debug API
//
// The beacon chain debug API is a set of endpoints to debug chain and shouldn't be exposed publicly.
service Debug {
  // BeaconState returns full BeaconState object for given stateId.
  rpc BeaconState(StateRequest) returns (BeaconStateResponse) {
    option (google.api.http) = {get: "/eth/v1/debug/beacon/states/{state_id}"};
  }

  // ForkChoiceHeads retrieves all possible chain heads (leaves of fork choice tree).
  rpc ForkChoiceHeads(google.protobuf.Empty) returns (ForkChoiceHeadsResponse) {
    option (google.api.http) = {get: "/eth/v1/debug/beacon/heads"};
  }
}

message ForkChoiceHeadsResponse {
  repeated ForkChoiceHead data = 1;
}

message ForkChoiceHead {
  bytes root = 1 [(gogoproto.moretags) = "ssz-size:\"32\""];
  uint64 slot = 2;
}

message BeaconStateResponse {
  BeaconStateContainer data = 1;
}

message BeaconStateContainer {
  // Versioning
  uint64 genesis_time = 1001;
  bytes genesis_validators_root = 1002 [(gogoproto.moretags) = "ssz-size:\"32\""];
  uint64 slot = 1003;
  Fork fork = 1004;

  // History
  BeaconBlockHeader latest_block_header = 1005;
  repeated bytes block_roots = 1006 [(gogoproto.moretags) = "ssz-size:\"block_roots.size\""];
  repeated bytes state_roots = 1007 [(gogoproto.moretags) = "ssz-size:\"state_roots.size\""];
  repeated bytes historical_roots = 1008 [(gogoproto.moretags) = "ssz-size:\"?,32\" ssz-max:\"16777216\""];

  // Eth1
  Eth1Data eth1_data = 1009;
  repeated Eth1Data eth1_data_votes = 1010 [(gogoproto.moretags) = "ssz-max:\"eth1_data_votes.size\""];
  uint64 eth1_deposit_index = 1011;

  // Registry
  repeated Validator validators = 1012 [(gogoproto.moretags) = "ssz-max:\"1099511627776\""];
  repeated uint64 balances = 1013 [(gogoproto.moretags) = "ssz-max:\"1099511627776\""];

  // Randomness
  repeated bytes randao_mixes = 1014 [(gogoproto.moretags) = "ssz-size:\"randao_mixes.size\""];

  // Slashings
  repeated uint64 slashings = 1015 [(gogoproto.moretags) = "ssz-size:\"slashings.size\""];

  // Attestations
  repeated PendingAttestation previous_epoch_attestations = 1016 [(gogoproto.moretags) = "ssz-max:\"previous_epoch_attestations.max\""];
  repeated PendingAttestation current_epoch_attestations = 1017 [(gogoproto.moretags) = "ssz-max:\"current_epoch_attestations.max\""];

  // Finality
  // Spec type [4]Bitvector which means this would be a fixed size of 4 bits.
  bytes justification_bits = 1018 [(gogoproto.moretags) = "ssz-size:\"1\"", (gogoproto.casttype) = "github.com/prysmaticlabs/go-bitfield.Bitvector4"];
  Checkpoint previous_justified_checkpoint = 1019;
  Checkpoint current_justified_checkpoint = 1020;
  Checkpoint finalized_checkpoint = 1021;
}

message PendingAttestation {
  // Bitfield representation of validator indices that have voted exactly
  // the same vote and have been aggregated into this attestation.
  bytes aggregation_bits = 1 [(gogoproto.moretags) = "ssz-max:\"2048\"", (gogoproto.casttype) = "github.com/prysmaticlabs/go-bitfield.Bitlist"];
  AttestationData data = 2;
  // The difference of when attestation gets created and get included on chain.
  uint64 inclusion_delay = 3;
  // The proposer who included the attestation in the block.
  uint64 proposer_index = 4;
}
