// Copyright 2020 Prysmatic Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package ethereum.eth.v1alpha1;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";

// Beacon chain API
//
// The beacon chain API can be used to access data relevant to the Ethereum 2.0
// phase 0 beacon chain.
service Beacon {
  // TODO(preston): Batch requests?

  // Return the SSZ state root for the requested beacon state. Accepted beacon states are:
  // "head" (canonical head in node's view), "genesis", "finalized", "justified",
  // <slot>, <hex encoded stateRoot with 0x prefix>.
  rpc Root(StateRootRequest) returns (StateRootResponse) {
    option (google.api.http) = { get: "/eth/v1/beacon/states/{state_id}/root" };
  }

  rpc Fork(StateForkRequest) returns (StateForkResponse) {
    option (google.api.http) = { get: "/eth/v1/beacon/states/{state_id}/fork" };
  }
}

message StateRootRequest {
  // The string ID of which state to use for the request.
  string state_id = 1;
}

message StateRootResponse {
  repeated bytes state_root = 1 [(gogoproto.moretags) = "ssz-size:\"32\""];
}

message StateForkRequest {
  // The string ID of which state to use for the request.
  string state_id = 1;
}

message StateForkResponse {
  Fork fork = 1;
}

message Fork {
  bytes previous_version = 1 [(gogoproto.moretags) = "ssz-size:\"4\""];
  bytes current_version = 2 [(gogoproto.moretags) = "ssz-size:\"4\""];
  uint64 epoch = 3;
}
