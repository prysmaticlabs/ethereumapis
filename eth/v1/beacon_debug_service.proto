// Copyright 2020 Prysmatic Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package ethereum.eth.v1;

import "google/api/annotations.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/empty.proto";

import "proto/eth/ext/options.proto";
import "proto/eth/v1/beacon_state.proto";
import "proto/eth/v1/beacon_chain_service.proto";

option csharp_namespace = "Ethereum.Eth.v1";
option go_package = "github.com/prysmaticlabs/prysm/proto/eth/v1";
option java_multiple_files = true;
option java_outer_classname = "BeaconDebugProto";
option java_package = "org.ethereum.eth.v1";
option php_namespace = "Ethereum\\Eth\\v1";

// Beacon chain debug API
//
// The beacon chain debug API is a set of endpoints to debug chain and shouldn't be exposed publicly.
//
// This service is defined in the upstream eth2.0-apis repository (eth2.0-APIs/apis/debug).
service BeaconDebug {
  // GetBeaconState returns full BeaconState object for given stateId.
  rpc GetBeaconState(StateRequest) returns (BeaconStateResponse) {
    option (google.api.http) = {
      get: "/eth/v1/debug/beacon/states/{state_id}"
    };
  }

  // GetBeaconStateSsz returns the SSZ-serialized version of the full BeaconState object for given stateId.
  rpc GetBeaconStateSsz(StateRequest) returns (BeaconStateSszResponse) {
    option (google.api.http) = {
      get: "/eth/v1/debug/beacon/states/{state_id}/ssz"
    };
  }

  // ListForkChoiceHeads retrieves all possible chain heads (leaves of fork choice tree).
  rpc ListForkChoiceHeads(google.protobuf.Empty) returns (ForkChoiceHeadsResponse) {
    option (google.api.http) = {
      get: "/eth/v1/debug/beacon/heads"
    };
  }
}

message ForkChoiceHeadsResponse {
  repeated ForkChoiceHead data = 1;
}

message ForkChoiceHead {
  bytes root = 1 [(ethereum.eth.ext.ssz_size) = "32"];
  uint64 slot = 2 [(ethereum.eth.ext.cast_type) = "github.com/prysmaticlabs/eth2-types.Slot"];
}

message BeaconStateResponse {
  BeaconState data = 1;
}

message BeaconStateSszResponse {
  bytes data = 1;
}